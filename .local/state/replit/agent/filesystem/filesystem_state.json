{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Consulta Ciudadana Honduras\n\n## Overview\n\nThis is a citizen consultation web application for Honduras that enables citizens to submit feedback and consultations to government entities. The application features a multi-tier architecture with a React frontend, Express.js backend, and PostgreSQL database. It supports different types of citizen participation (natural persons, legal entities, and anonymous users) with hierarchical location selection and sector-based categorization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n**September 21, 2025:**\n- Completely removed sidebar navigation and statistics cards from dashboard for streamlined SPE interface\n- Implemented role-specific dashboard views: SPE sees user management interface instead of charts\n- Added \"planificador\" role to schema and updated role hierarchy\n- Created SPE-exclusive user management component for creating planificador users\n- Added `/login` route alias for easier access to authentication page\n- Verified SPE credentials and functionality through automated testing\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Custom components built on Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with Bootstrap 5 integration for specific components\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Color Scheme**: Honduras-themed palette with primary color #1bd1e8 (celeste Honduras)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy using session-based auth\n- **Session Storage**: PostgreSQL-based session store using connect-pg-simple\n- **API Design**: RESTful endpoints with JSON responses\n- **Password Security**: scrypt-based hashing with salt\n\n### Database Architecture\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with type-safe schema definitions\n- **Schema Design**: \n  - Hierarchical location structure (departments → municipalities → localities)\n  - User role-based access control (ciudadano, admin, super_admin)\n  - Consultation system with person type variants (natural, juridica, anonimo)\n  - Sector-based categorization with search capabilities\n- **Migrations**: Drizzle Kit for schema migrations\n\n### Authentication & Authorization\n- **Strategy**: Session-based authentication with PostgreSQL session store\n- **User Roles**: Four-tier system (ciudadano, admin, super_admin, planificador)\n- **Protected Routes**: Role-based route protection on frontend\n- **Password Policy**: Minimum 6 characters with secure hashing\n- **SPE Super Admin**: Permanent super administrator account (username: SPE) with deletion protection and exclusive user management capabilities\n\n### Form Architecture\n- **Validation**: Zod schemas shared between frontend and backend\n- **Dynamic Forms**: Conditional field rendering based on person type selection\n- **Location Hierarchy**: Cascading dropdowns for department → municipality → locality selection\n- **Sector Search**: Smart search with auto-suggestions for sector selection\n\n### Development Environment\n- **Build System**: Vite with TypeScript configuration\n- **Development Tools**: tsx for TypeScript execution, esbuild for production builds\n- **Code Organization**: Monorepo structure with shared schema definitions\n- **Path Aliases**: Configured for clean imports (@/, @shared/, @assets/)\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless connection for Neon database\n- **drizzle-orm**: Type-safe database ORM with PostgreSQL dialect\n- **express**: Web framework for Node.js backend\n- **passport**: Authentication middleware with local strategy\n- **react**: Frontend framework with TypeScript support\n\n### UI Component Libraries\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives\n- **@tanstack/react-query**: Server state management and caching\n- **tailwindcss**: Utility-first CSS framework\n- **bootstrap**: CSS framework for specific components and icons\n\n### Development Tools\n- **vite**: Build tool and development server\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast bundler for production builds\n- **drizzle-kit**: Database migration and schema management\n\n### Form & Validation\n- **react-hook-form**: Performant form library with minimal re-renders\n- **@hookform/resolvers**: Validation resolvers for React Hook Form\n- **zod**: TypeScript-first schema validation\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n\n### Hosting & Infrastructure\n- **Replit**: Development and hosting platform\n- **Neon**: Serverless PostgreSQL hosting\n- **WebSocket**: Real-time capabilities via ws library for database connections","size_bytes":5044},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        honduras: {\n          primary: \"#1bd1e8\",\n          \"primary-dark\": \"#0f7a8c\", \n          \"bg-light\": \"#f5f5f5\",\n          white: \"#ffffff\",\n        },\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Fira Code\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2984},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import { Express, Request, Response, NextFunction } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport rateLimit from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\n// Simplified auth context interface\ninterface AuthUser {\n  id: string;\n  username: string;\n  role: string;\n}\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: AuthUser;\n    }\n  }\n}\n\n// Validate JWT secret at startup\nconst JWT_SECRET = (() => {\n  const secret = process.env.SESSION_SECRET;\n  if (!secret) {\n    throw new Error(\"SESSION_SECRET environment variable is required for JWT authentication\");\n  }\n  if (secret.length < 32) {\n    console.warn(\"WARNING: SESSION_SECRET should be at least 32 characters for security\");\n  }\n  return secret;\n})();\nconst JWT_EXPIRES_IN = \"7d\"; // Extended to 7 days for better UX\n\n// JWT payload type\ninterface JwtPayload {\n  id: string;\n  username: string;\n  role: string;\n  iat?: number;\n  exp?: number;\n}\n\n// bcrypt password hashing\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return await bcrypt.hash(password, saltRounds);\n}\n\nexport async function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  return await bcrypt.compare(supplied, stored);\n}\n\n// JWT functions\nexport function generateToken(user: SelectUser): string {\n  return jwt.sign(\n    { \n      id: user.id, \n      username: user.username, \n      role: user.role \n    },\n    JWT_SECRET,\n    { expiresIn: JWT_EXPIRES_IN }\n  );\n}\n\nexport function verifyToken(token: string): JwtPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET, {\n      algorithms: ['HS256']\n    }) as JwtPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n// Rate limiting for login attempts\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: {\n    error: \"Demasiados intentos de inicio de sesión. Intente nuevamente en 15 minutos.\"\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true,\n});\n\n// JWT Authentication middleware\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.startsWith('Bearer ') \n    ? authHeader.slice(7) \n    : req.cookies?.token;\n\n  if (!token) {\n    return res.status(401).json({ error: \"Token de acceso requerido\" });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(401).json({ error: \"Token inválido o expirado\" });\n  }\n\n  // Store minimal auth context\n  req.user = {\n    id: decoded.id,\n    username: decoded.username,\n    role: decoded.role\n  };\n\n  next();\n}\n\n// Role-based authorization middleware\nexport function requireRole(roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: \"Autenticación requerida\" });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"No tiene permisos para acceder a este recurso\" });\n    }\n    \n    next();\n  };\n}\n\nexport function setupAuth(app: Express) {\n  // Enable trust proxy for rate limiting\n  app.set(\"trust proxy\", 1);\n\n  // Login endpoint with rate limiting\n  app.post(\"/api/login\", loginLimiter, async (req: Request, res: Response) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res.status(400).json({ error: \"Usuario y contraseña son requeridos\" });\n      }\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ error: \"Usuario o contraseña incorrectos\" });\n      }\n\n      const isValidPassword = await comparePasswords(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Usuario o contraseña incorrectos\" });\n      }\n\n      const token = generateToken(user);\n      \n      // Set HTTP-only cookie for web app\n      res.cookie('token', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',\n        maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days to match JWT expiration\n      });\n\n      // Return user data (without password)\n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req: Request, res: Response) => {\n    res.clearCookie('token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',\n      path: '/'\n    });\n    res.json({ message: \"Sesión cerrada exitosamente\" });\n  });\n\n  // Get current user endpoint (allows unauthenticated access for frontend compatibility)\n  app.get(\"/api/user\", (req: Request, res: Response) => {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.startsWith('Bearer ') \n      ? authHeader.slice(7) \n      : req.cookies?.token;\n\n    if (!token) {\n      return res.status(401).json({ error: \"No authenticated user\" });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ error: \"Invalid or expired token\" });\n    }\n\n    // Return user data without password\n    res.json({\n      id: decoded.id,\n      username: decoded.username,\n      role: decoded.role,\n      createdAt: new Date() // Frontend expects this field\n    });\n  });\n}","size_bytes":5803},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(cookieParser());\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2133},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport rateLimit from \"express-rate-limit\";\nimport {\n  setupAuth,\n  requireAuth,\n  requireRole,\n  hashPassword,\n  comparePasswords,\n} from \"./auth\";\nimport { storage } from \"./storage\";\nimport {\n  insertConsultationSchema,\n  insertSectorSchema,\n  insertUserSchema,\n} from \"@shared/schema\";\nimport * as XLSX from \"xlsx\";\nimport multer from \"multer\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileTypeFromBuffer } from \"file-type\";\nimport sharp from \"sharp\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Autenticación base (para endpoints protegidos)\n  setupAuth(app);\n\n  // Rate limiting general para subida de imágenes\n  const imageUploadLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 10,\n    message: \"Demasiadas subidas de imágenes. Inténtalo más tarde.\",\n  });\n\n  // Multer en memoria + validaciones\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 15 * 1024 * 1024, // 15MB por archivo\n      files: 3, // máximo 3 archivos\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedMimes = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/webp\"];\n      if (allowedMimes.includes(file.mimetype.toLowerCase())) {\n        cb(null, true);\n      } else {\n        cb(new Error(\"Solo se permiten imágenes JPEG, PNG o WebP\"));\n      }\n    },\n  });\n\n  // Rate limit para creación de usuarios\n  const userCreationLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000,\n    max: 3,\n    message: {\n      error: \"Demasiados intentos de creación de usuarios. Intente nuevamente en 15 minutos.\",\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n    skipSuccessfulRequests: true,\n  });\n\n  // ===================== Ubicación =====================\n  app.get(\"/api/departments\", async (_req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n      res.status(500).json({ error: \"Failed to fetch departments\" });\n    }\n  });\n\n  app.get(\"/api/municipalities/:departmentId\", async (req, res) => {\n    try {\n      const municipalities = await storage.getMunicipalitiesByDepartment(\n        req.params.departmentId\n      );\n      res.json(municipalities);\n    } catch (error) {\n      console.error(\"Error fetching municipalities:\", error);\n      res.status(500).json({ error: \"Failed to fetch municipalities\" });\n    }\n  });\n\n  app.get(\"/api/localities/:municipalityId\", async (req, res) => {\n    try {\n      const localities = await storage.getLocalitiesByMunicipality(\n        req.params.municipalityId\n      );\n      res.json(localities);\n    } catch (error) {\n      console.error(\"Error fetching localities:\", error);\n      res.status(500).json({ error: \"Failed to fetch localities\" });\n    }\n  });\n\n  // ===================== Sectores =====================\n  app.get(\"/api/sectors\", async (_req, res) => {\n    try {\n      const sectors = await storage.getSectors();\n      res.json(sectors);\n    } catch (error) {\n      console.error(\"Error fetching sectors:\", error);\n      res.status(500).json({ error: \"Failed to fetch sectors\" });\n    }\n  });\n\n  app.get(\"/api/sectors/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) return res.json([]);\n      const sectors = await storage.searchSectors(query);\n      res.json(sectors);\n    } catch (error) {\n      console.error(\"Error searching sectors:\", error);\n      res.status(500).json({ error: \"Failed to search sectors\" });\n    }\n  });\n\n  // ===================== Subida de imágenes (PÚBLICO) =====================\n  app.post(\n    \"/api/upload-images\",\n    imageUploadLimiter,\n    // handler de errores de multer para devolver 4xx legible\n    (req, res, next) => {\n      upload.array(\"images\", 3)(req, res, (err: any) => {\n        if (err) {\n          if (err.code === \"LIMIT_FILE_SIZE\") {\n            return res.status(400).json({ error: \"El archivo excede el límite de 15 MB\" });\n          }\n          if (err.code === \"LIMIT_UNEXPECTED_FILE\") {\n            return res.status(400).json({ error: \"Se excedió el máximo de 3 imágenes\" });\n          }\n          return res.status(400).json({ error: err.message || \"Archivo inválido\" });\n        }\n        next();\n      });\n    },\n    async (req, res) => {\n      try {\n        if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {\n          return res.status(400).json({ error: \"No se proporcionaron imágenes\" });\n        }\n\n        const privateDir = process.env.PRIVATE_OBJECT_DIR;\n        if (!privateDir) {\n          return res\n            .status(500)\n            .json({ error: \"Configuración de almacenamiento no disponible\" });\n        }\n\n        const imageUrls: string[] = [];\n        const timestamp = Date.now();\n\n        for (const file of req.files as Express.Multer.File[]) {\n          const fileType = await fileTypeFromBuffer(file.buffer);\n          const allowedTypes = [\"jpg\", \"jpeg\", \"png\", \"webp\"];\n          if (!fileType || !allowedTypes.includes(fileType.ext)) {\n            return res\n              .status(400)\n              .json({ error: \"Tipo de archivo inválido. Solo JPEG, PNG o WebP permitidos.\" });\n          }\n\n          // Validar que realmente se puede decodificar\n          await sharp(file.buffer).metadata();\n\n          // Guardamos SIEMPRE como JPG optimizado\n          const uniqueFilename = `consultation-${timestamp}-${Math.random()\n            .toString(36)\n            .slice(2)}.jpg`;\n          const filePath = path.join(privateDir, \"images\", uniqueFilename);\n          await fs.promises.mkdir(path.dirname(filePath), { recursive: true });\n\n          const optimizedBuffer = await sharp(file.buffer)\n            .resize(1920, 1080, { fit: \"inside\", withoutEnlargement: true })\n            .jpeg({ quality: 85 })\n            .toBuffer();\n\n          await fs.promises.writeFile(filePath, optimizedBuffer);\n          imageUrls.push(`/api/images/${uniqueFilename}`);\n        }\n\n        res.status(201).json({ success: true, imageUrls });\n      } catch (error) {\n        console.error(\"Error uploading images:\", error);\n        res.status(500).json({ error: \"Error al subir las imágenes\" });\n      }\n    }\n  );\n\n  // Servir imágenes guardadas\n  app.get(\"/api/images/:filename\", async (req, res) => {\n    try {\n      const filename = req.params.filename;\n      // solo .jpg porque guardamos en .jpg\n      const filenamePattern = /^consultation-\\d+-[a-z0-9]+\\.jpg$/i;\n      if (!filenamePattern.test(filename)) {\n        return res.status(400).json({ error: \"Nombre de archivo inválido\" });\n      }\n\n      const privateDir = process.env.PRIVATE_OBJECT_DIR;\n      if (!privateDir) {\n        return res\n          .status(500)\n          .json({ error: \"Configuración de almacenamiento no disponible\" });\n      }\n\n      const filePath = path.join(privateDir, \"images\", filename);\n      if (!fs.existsSync(filePath)) {\n        return res.status(404).json({ error: \"Imagen no encontrada\" });\n      }\n\n      res.set({\n        \"Content-Type\": \"image/jpeg\",\n        \"X-Content-Type-Options\": \"nosniff\",\n        \"Cache-Control\": \"public, max-age=31536000\",\n      });\n      res.sendFile(path.resolve(filePath));\n    } catch (error) {\n      console.error(\"Error serving image:\", error);\n      res.status(500).json({ error: \"Error al servir la imagen\" });\n    }\n  });\n\n  // ===================== Consultas =====================\n  app.post(\"/api/consultations\", async (req, res) => {\n    try {\n      const validatedData = insertConsultationSchema.parse(req.body);\n      const consultation = await storage.createConsultation(validatedData);\n      res.status(201).json(consultation);\n    } catch (error) {\n      console.error(\"Error creating consultation:\", error);\n      res.status(400).json({ error: \"Invalid consultation data\" });\n    }\n  });\n\n  app.get(\n    \"/api/consultations\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const filters = {\n          dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n          dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n          departmentId: req.query.departmentId as string,\n          sector: req.query.sector as string,\n          offset: req.query.offset ? parseInt(req.query.offset as string) : 0,\n          limit: req.query.limit ? parseInt(req.query.limit as string) : 50,\n        };\n\n        const result = await storage.getConsultations(filters);\n        res.json(result);\n      } catch (error) {\n        console.error(\"Error fetching consultations:\", error);\n        res.status(500).json({ error: \"Failed to fetch consultations\" });\n      }\n    }\n  );\n\n  app.get(\n    \"/api/consultations/:id\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const consultation = await storage.getConsultationById(req.params.id);\n        if (!consultation) {\n          return res.status(404).json({ error: \"Consultation not found\" });\n        }\n        res.json(consultation);\n      } catch (error) {\n        console.error(\"Error fetching consultation:\", error);\n        res.status(500).json({ error: \"Failed to fetch consultation\" });\n      }\n    }\n  );\n\n  // ===================== Dashboard =====================\n  app.get(\n    \"/api/dashboard/stats\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (_req, res) => {\n      try {\n        const stats = await storage.getConsultationStats();\n        res.json(stats);\n      } catch (error) {\n        console.error(\"Error fetching dashboard stats:\", error);\n        res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n      }\n    }\n  );\n\n  app.get(\n    \"/api/dashboard/consultations-by-date\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const days = parseInt(req.query.days as string) || 30;\n        const data = await storage.getConsultationsByDate(days);\n        res.json(data);\n      } catch (error) {\n        console.error(\"Error fetching consultations by date:\", error);\n        res.status(500).json({ error: \"Failed to fetch consultations by date\" });\n      }\n    }\n  );\n\n  app.get(\n    \"/api/dashboard/consultations-by-sector\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (_req, res) => {\n      try {\n        const data = await storage.getConsultationsBySector();\n        res.json(data);\n      } catch (error) {\n        console.error(\"Error fetching consultations by sector:\", error);\n        res.status(500).json({ error: \"Failed to fetch consultations by sector\" });\n      }\n    }\n  );\n\n  // ===================== Exportaciones =====================\n  app.get(\n    \"/api/export/consultations/csv\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const filters = {\n          dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n          dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n          departmentId: req.query.departmentId as string,\n          sector: req.query.sector as string,\n        };\n\n        const result = await storage.getConsultations({ ...filters, limit: 10000 });\n        const consultations = result.consultations;\n\n        const sanitizeCSVField = (field: string | undefined | null): string => {\n          if (!field) return \"\";\n          let sanitized = String(field);\n          if (/^[=+\\-@]/.test(sanitized)) sanitized = \"'\" + sanitized;\n          sanitized = sanitized.replace(/[\\r\\n]/g, \" \");\n          sanitized = '\"' + sanitized.replace(/\"/g, '\"\"') + '\"';\n          return sanitized;\n        };\n\n        const csvHeaders = [\n          \"ID\",\n          \"Fecha\",\n          \"Tipo de Persona\",\n          \"Nombre/Empresa\",\n          \"Departamento\",\n          \"Municipio\",\n          \"Colonia/Aldea\",\n          \"Geocódigo\",\n          \"Sectores\",\n          \"Mensaje\",\n          \"Estado\",\n        ]\n          .map((h) => sanitizeCSVField(h))\n          .join(\",\");\n\n        const csvRows = consultations.map((c) =>\n          [\n            sanitizeCSVField(c.id),\n            sanitizeCSVField(new Date(c.createdAt).toLocaleDateString(\"es-HN\")),\n            sanitizeCSVField(c.personType === \"natural\" ? \"Natural\" : c.personType === \"juridica\" ? \"Jurídica\" : \"Anónimo\"),\n            sanitizeCSVField(c.firstName ? `${c.firstName} ${c.lastName}` : c.companyName || \"Anónimo\"),\n            sanitizeCSVField(c.departmentId),\n            sanitizeCSVField(c.municipalityId),\n            sanitizeCSVField(c.localityId),\n            sanitizeCSVField(c.geocode),\n            sanitizeCSVField(c.selectedSectors.join(\"; \")),\n            sanitizeCSVField(c.message),\n            sanitizeCSVField(c.status === \"active\" ? \"Activa\" : \"Archivada\"),\n          ].join(\",\")\n        );\n\n        const csvContent = [csvHeaders, ...csvRows].join(\"\\n\");\n        res.setHeader(\"Content-Type\", \"text/csv; charset=utf-8\");\n        res.setHeader(\n          \"Content-Disposition\",\n          `attachment; filename=\"consultas_${new Date().toISOString().split(\"T\")[0]}.csv\"`\n        );\n        res.send(\"\\uFEFF\" + csvContent);\n      } catch (error) {\n        console.error(\"Error exporting CSV:\", error);\n        res.status(500).json({ error: \"Failed to export CSV\" });\n      }\n    }\n  );\n\n  app.get(\n    \"/api/export/consultations/excel\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const filters = {\n          dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n          dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n          departmentId: req.query.departmentId as string,\n          sector: req.query.sector as string,\n        };\n\n        const result = await storage.getConsultations({ ...filters, limit: 10000 });\n        const consultations = result.consultations;\n\n        const sanitizeExcelField = (field: string | undefined | null): string => {\n          if (!field) return \"\";\n          let sanitized = String(field);\n          if (/^[=+\\-@]/.test(sanitized)) sanitized = \"'\" + sanitized;\n          sanitized = sanitized.replace(/[\\r\\n]/g, \" \");\n          return sanitized;\n        };\n\n        const workbook = XLSX.utils.book_new();\n        const worksheetData = [\n          [\n            \"ID\",\n            \"Fecha\",\n            \"Tipo de Persona\",\n            \"Nombre/Empresa\",\n            \"Departamento\",\n            \"Municipio\",\n            \"Colonia/Aldea\",\n            \"Geocódigo\",\n            \"Sectores\",\n            \"Mensaje\",\n            \"Estado\",\n          ],\n          ...consultations.map((c) => [\n            sanitizeExcelField(c.id),\n            sanitizeExcelField(new Date(c.createdAt).toLocaleDateString(\"es-HN\")),\n            sanitizeExcelField(c.personType === \"natural\" ? \"Natural\" : c.personType === \"juridica\" ? \"Jurídica\" : \"Anónimo\"),\n            sanitizeExcelField(c.firstName ? `${c.firstName} ${c.lastName}` : c.companyName || \"Anónimo\"),\n            sanitizeExcelField(c.departmentId),\n            sanitizeExcelField(c.municipalityId),\n            sanitizeExcelField(c.localityId),\n            sanitizeExcelField(c.geocode),\n            sanitizeExcelField(c.selectedSectors.join(\", \")),\n            sanitizeExcelField(c.message),\n            sanitizeExcelField(c.status === \"active\" ? \"Activa\" : \"Archivada\"),\n          ]),\n        ];\n\n        const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);\n        worksheet[\"!cols\"] = [\n          { width: 10 },\n          { width: 12 },\n          { width: 15 },\n          { width: 20 },\n          { width: 15 },\n          { width: 15 },\n          { width: 15 },\n          { width: 15 },\n          { width: 25 },\n          { width: 50 },\n          { width: 10 },\n        ];\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Consultas\");\n\n        const excelBuffer = XLSX.write(workbook, { type: \"buffer\", bookType: \"xlsx\" });\n        res.setHeader(\n          \"Content-Type\",\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n        res.setHeader(\n          \"Content-Disposition\",\n          `attachment; filename=\"consultas_${new Date().toISOString().split(\"T\")[0]}.xlsx\"`\n        );\n        res.send(excelBuffer);\n      } catch (error) {\n        console.error(\"Error exporting Excel:\", error);\n        res.status(500).json({ error: \"Failed to export Excel\" });\n      }\n    }\n  );\n\n  app.get(\n    \"/api/export/consultations/pdf\",\n    requireAuth,\n    requireRole([\"admin\", \"super_admin\"]),\n    async (req, res) => {\n      try {\n        const filters = {\n          dateFrom: req.query.dateFrom ? new Date(req.query.dateFrom as string) : undefined,\n          dateTo: req.query.dateTo ? new Date(req.query.dateTo as string) : undefined,\n          departmentId: req.query.departmentId as string,\n          sector: req.query.sector as string,\n        };\n\n        const result = await storage.getConsultations({ ...filters, limit: 10000 });\n        const consultations = result.consultations;\n\n        const { jsPDF } = await import(\"jspdf\");\n        const { default: autoTable } = await import(\"jspdf-autotable\");\n\n        const doc = new jsPDF();\n        doc.setFontSize(16);\n        doc.text(\"Reporte de Consultas Ciudadanas\", 14, 22);\n\n        doc.setFontSize(10);\n        const dateRange =\n          filters.dateFrom && filters.dateTo\n            ? `${filters.dateFrom.toLocaleDateString(\"es-HN\")} - ${filters.dateTo.toLocaleDateString(\"es-HN\")}`\n            : \"Todas las fechas\";\n        doc.text(`Período: ${dateRange}`, 14, 30);\n        doc.text(`Total de consultas: ${consultations.length}`, 14, 36);\n\n        const tableColumns = [\"Fecha\", \"Tipo\", \"Nombre/Empresa\", \"Ubicación\", \"Sectores\", \"Estado\"];\n        const tableRows = consultations.map((c) => [\n          new Date(c.createdAt).toLocaleDateString(\"es-HN\"),\n          c.personType === \"natural\" ? \"Natural\" : c.personType === \"juridica\" ? \"Jurídica\" : \"Anónimo\",\n          c.firstName ? `${c.firstName} ${c.lastName}` : c.companyName || \"Anónimo\",\n          `${c.departmentId}-${c.municipalityId}`,\n          c.selectedSectors.slice(0, 2).join(\", \") + (c.selectedSectors.length > 2 ? \"...\" : \"\"),\n          c.status === \"active\" ? \"Activa\" : \"Archivada\",\n        ]);\n\n        autoTable(doc, {\n          head: [tableColumns],\n          body: tableRows,\n          startY: 45,\n          styles: { fontSize: 8, cellPadding: 2 },\n          headStyles: { fillColor: [27, 209, 232], textColor: [255, 255, 255], fontStyle: \"bold\" },\n          alternateRowStyles: { fillColor: [245, 245, 245] },\n          margin: { top: 45, left: 14, right: 14 },\n          columnStyles: {\n            0: { cellWidth: 25 },\n            1: { cellWidth: 20 },\n            2: { cellWidth: 35 },\n            3: { cellWidth: 25 },\n            4: { cellWidth: 35 },\n            5: { cellWidth: 20 },\n          },\n        });\n\n        const pageCount = doc.getNumberOfPages();\n        for (let i = 1; i <= pageCount; i++) {\n          doc.setPage(i);\n          doc.setFontSize(8);\n          doc.text(\n            `Página ${i} de ${pageCount} - Generado el ${new Date().toLocaleDateString(\"es-HN\")}`,\n            14,\n            doc.internal.pageSize.height - 10\n          );\n        }\n\n        const pdfBuffer = Buffer.from(doc.output(\"arraybuffer\"));\n        res.setHeader(\"Content-Type\", \"application/pdf\");\n        res.setHeader(\n          \"Content-Disposition\",\n          `attachment; filename=\"consultas_${new Date().toISOString().split(\"T\")[0]}.pdf\"`\n        );\n        res.send(pdfBuffer);\n      } catch (error) {\n        console.error(\"Error exporting PDF:\", error);\n        res.status(500).json({ error: \"Failed to export PDF\" });\n      }\n    }\n  );\n\n  // ===================== Usuarios (solo super_admin) =====================\n  app.get(\"/api/users\", requireAuth, requireRole([\"super_admin\"]), async (_req, res) => {\n    try {\n      const users = await storage.getUsers();\n      const sanitizedUsers = users.map(({ password, ...u }) => u);\n      res.json(sanitizedUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\n    \"/api/users\",\n    requireAuth,\n    requireRole([\"super_admin\"]),\n    userCreationLimiter,\n    async (req, res) => {\n      try {\n        const validatedData = insertUserSchema.parse(req.body);\n        const hashedPassword = await hashPassword(validatedData.password);\n        const userData = { ...validatedData, password: hashedPassword };\n        const user = await storage.createUser(userData);\n        const { password, ...userWithoutPassword } = user;\n        res.status(201).json(userWithoutPassword);\n      } catch (error) {\n        console.error(\"Error creating user:\", error);\n        if (error instanceof Error && error.message.includes(\"duplicate key\")) {\n          res.status(400).json({ error: \"El nombre de usuario ya existe\" });\n        } else {\n          res.status(400).json({ error: \"Datos de usuario inválidos\" });\n        }\n      }\n    }\n  );\n\n  app.delete(\"/api/users/:id\", requireAuth, requireRole([\"super_admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      if (req.user?.id === id) {\n        return res.status(400).json({ error: \"No puede eliminar su propia cuenta\" });\n      }\n\n      const userToDelete = await storage.getUser(id);\n      if (!userToDelete) return res.status(404).json({ error: \"Usuario no encontrado\" });\n      if (userToDelete.username === \"SPE\") {\n        return res.status(403).json({ error: \"La cuenta SPE está protegida y no puede ser eliminada\" });\n      }\n\n      const deleted = await storage.deleteUser(id);\n      if (!deleted) return res.status(404).json({ error: \"Usuario no encontrado\" });\n\n      res.json({ message: \"Usuario eliminado exitosamente\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/password\", requireAuth, requireRole([\"super_admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { password } = req.body;\n\n      if (!password || password.length < 6) {\n        return res.status(400).json({ error: \"La contraseña debe tener al menos 6 caracteres\" });\n      }\n\n      const userToUpdate = await storage.getUser(id);\n      if (!userToUpdate) return res.status(404).json({ error: \"Usuario no encontrado\" });\n      if (userToUpdate.username === \"SPE\") {\n        return res.status(403).json({ error: \"La cuenta SPE está protegida y no puede ser modificada\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const updated = await storage.updateUserPassword(id, hashedPassword);\n      if (!updated) return res.status(404).json({ error: \"Usuario no encontrado\" });\n\n      res.json({ message: \"Contraseña actualizada exitosamente\" });\n    } catch (error) {\n      console.error(\"Error updating user password:\", error);\n      res.status(500).json({ error: \"Error al actualizar la contraseña\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/status\", requireAuth, requireRole([\"super_admin\"]), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { active } = req.body;\n\n      if (typeof active !== \"boolean\") {\n        return res.status(400).json({ error: \"El estado debe ser true o false\" });\n      }\n\n      const userToUpdate = await storage.getUser(id);\n      if (!userToUpdate) return res.status(404).json({ error: \"Usuario no encontrado\" });\n      if (userToUpdate.username === \"SPE\") {\n        return res.status(403).json({ error: \"La cuenta SPE está protegida y no puede ser modificada\" });\n      }\n      if (req.user?.id === id) {\n        return res.status(400).json({ error: \"No puede cambiar su propio estado\" });\n      }\n\n      const updated = await storage.updateUserStatus(id, active);\n      if (!updated) return res.status(404).json({ error: \"Usuario no encontrado\" });\n\n      res.json({ message: `Usuario ${active ? \"activado\" : \"suspendido\"} exitosamente`, active });\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ error: \"Error al actualizar el estado del usuario\" });\n    }\n  });\n\n  // Cambiar la propia contraseña\n  app.put(\"/api/profile/password\", requireAuth, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ error: \"Se requiere contraseña actual y nueva contraseña\" });\n      }\n      if (newPassword.length < 6) {\n        return res\n          .status(400)\n          .json({ error: \"La nueva contraseña debe tener al menos 6 caracteres\" });\n      }\n\n      const currentUser = await storage.getUser(req.user!.id);\n      if (!currentUser) return res.status(404).json({ error: \"Usuario no encontrado\" });\n\n      const isValidCurrentPassword = await comparePasswords(\n        currentPassword,\n        currentUser.password\n      );\n      if (!isValidCurrentPassword) {\n        return res.status(401).json({ error: \"La contraseña actual es incorrecta\" });\n      }\n\n      const hashedNewPassword = await hashPassword(newPassword);\n      const updated = await storage.updateUserPassword(req.user!.id, hashedNewPassword);\n      if (!updated) return res.status(500).json({ error: \"Error al actualizar la contraseña\" });\n\n      req.session.destroy((err) => {\n        if (err) {\n          console.error(\"Error destroying session after password change:\", err);\n          return res.status(500).json({ error: \"Contraseña actualizada pero error en sesión\" });\n        }\n        res.json({ message: \"Contraseña actualizada exitosamente\", requiresReauth: true });\n      });\n    } catch (error) {\n      console.error(\"Error updating own password:\", error);\n      res.status(500).json({ error: \"Error interno del servidor\" });\n    }\n  });\n\n  // Admin-only (placeholder)\n  app.post(\"/api/sectors\", requireAuth, requireRole([\"super_admin\"]), async (req, res) => {\n    try {\n      const validatedData = insertSectorSchema.parse(req.body);\n      res.status(501).json({ error: \"Not implemented yet\" });\n    } catch (error) {\n      console.error(\"Error creating sector:\", error);\n      res.status(400).json({ error: \"Invalid sector data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26704},"server/storage.ts":{"content":"import { \n  users, \n  departments, \n  municipalities, \n  localities, \n  sectors, \n  consultations,\n  type User, \n  type InsertUser,\n  type Department,\n  type Municipality,\n  type Locality,\n  type Sector,\n  type Consultation,\n  type InsertConsultation,\n  type InsertDepartment,\n  type InsertMunicipality,\n  type InsertLocality,\n  type InsertSector\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, like, sql, desc } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport bcrypt from \"bcrypt\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsers(): Promise<User[]>;\n  deleteUser(id: string): Promise<boolean>;\n  updateUserPassword(id: string, newPassword: string): Promise<boolean>;\n  updateUserStatus(id: string, active: boolean): Promise<boolean>;\n\n  // Locations\n  getDepartments(): Promise<Department[]>;\n  getMunicipalitiesByDepartment(departmentId: string): Promise<Municipality[]>;\n  getLocalitiesByMunicipality(municipalityId: string): Promise<Locality[]>;\n  \n  // Sectors\n  getSectors(): Promise<Sector[]>;\n  searchSectors(query: string): Promise<Sector[]>;\n\n  // Consultations\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  getConsultations(filters?: {\n    dateFrom?: Date;\n    dateTo?: Date;\n    departmentId?: string;\n    sector?: string;\n    offset?: number;\n    limit?: number;\n  }): Promise<{ consultations: Consultation[]; total: number }>;\n  getConsultationById(id: string): Promise<Consultation | undefined>;\n  \n  // Dashboard stats\n  getConsultationStats(): Promise<{\n    total: number;\n    thisWeek: number;\n    departments: number;\n    activeSectors: number;\n  }>;\n  getConsultationsByDate(days: number): Promise<{ date: string; count: number }[]>;\n  getConsultationsBySector(): Promise<{ sector: string; count: number }[]>;\n\n  // Session store\n  sessionStore: any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 12);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword\n      })\n      .returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(users.createdAt);\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const [deleted] = await db\n      .delete(users)\n      .where(eq(users.id, id))\n      .returning();\n    return !!deleted;\n  }\n\n  async updateUserPassword(id: string, newPassword: string): Promise<boolean> {\n    // Hash password before updating\n    const hashedPassword = await bcrypt.hash(newPassword, 12);\n    \n    const [updated] = await db\n      .update(users)\n      .set({ password: hashedPassword })\n      .where(eq(users.id, id))\n      .returning();\n    return !!updated;\n  }\n\n  async updateUserStatus(id: string, active: boolean): Promise<boolean> {\n    const [updated] = await db\n      .update(users)\n      .set({ active })\n      .where(eq(users.id, id))\n      .returning();\n    return !!updated;\n  }\n\n  async getDepartments(): Promise<Department[]> {\n    return await db.select().from(departments).orderBy(departments.name);\n  }\n\n  async getMunicipalitiesByDepartment(departmentId: string): Promise<Municipality[]> {\n    return await db\n      .select()\n      .from(municipalities)\n      .where(eq(municipalities.departmentId, departmentId))\n      .orderBy(municipalities.name);\n  }\n\n  async getLocalitiesByMunicipality(municipalityId: string): Promise<Locality[]> {\n    return await db\n      .select()\n      .from(localities)\n      .where(eq(localities.municipalityId, municipalityId))\n      .orderBy(localities.name);\n  }\n\n  async getSectors(): Promise<Sector[]> {\n    return await db\n      .select()\n      .from(sectors)\n      .where(eq(sectors.active, true))\n      .orderBy(sectors.name);\n  }\n\n  async searchSectors(query: string): Promise<Sector[]> {\n    return await db\n      .select()\n      .from(sectors)\n      .where(\n        and(\n          eq(sectors.active, true),\n          sql`${sectors.name} ILIKE ${`%${query}%`}`\n        )\n      )\n      .orderBy(sectors.name);\n  }\n\n  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {\n    // Fetch and validate location hierarchy with relational integrity\n    const [department] = await db\n      .select({ geocode: departments.geocode })\n      .from(departments)\n      .where(eq(departments.id, insertConsultation.departmentId));\n    \n    const [municipality] = await db\n      .select({ \n        geocode: municipalities.geocode,\n        departmentId: municipalities.departmentId \n      })\n      .from(municipalities)\n      .where(eq(municipalities.id, insertConsultation.municipalityId));\n    \n    if (!department || !municipality) {\n      throw new Error('Invalid department or municipality ID provided');\n    }\n    \n    // Enforce relational integrity\n    if (municipality.departmentId !== insertConsultation.departmentId) {\n      throw new Error('Municipality does not belong to the selected department');\n    }\n    \n    let localityGeocodeComponent = \"999\"; // Código genérico para \"Otro\"\n    \n    // Si hay localityId, validar que existe y pertenece al municipio\n    if (insertConsultation.localityId) {\n      const [locality] = await db\n        .select({ \n          geocode: localities.geocode,\n          municipalityId: localities.municipalityId\n        })\n        .from(localities)\n        .where(eq(localities.id, insertConsultation.localityId));\n      \n      if (!locality) {\n        throw new Error('Invalid locality ID provided');\n      }\n      \n      if (locality.municipalityId !== insertConsultation.municipalityId) {\n        throw new Error('Locality does not belong to the selected municipality');\n      }\n      \n      localityGeocodeComponent = locality.geocode;\n    }\n    \n    // Generar geocódigo completo: Departamento + Municipio + Localidad\n    const geocode = `${department.geocode}${municipality.geocode}${localityGeocodeComponent}`;\n    \n    const [consultation] = await db\n      .insert(consultations)\n      .values({\n        ...insertConsultation,\n        geocode,\n        updatedAt: new Date(),\n      })\n      .returning();\n    return consultation;\n  }\n\n  async getConsultations(filters?: {\n    dateFrom?: Date;\n    dateTo?: Date;\n    departmentId?: string;\n    sector?: string;\n    offset?: number;\n    limit?: number;\n  }): Promise<{ consultations: Consultation[]; total: number }> {\n    const conditions = [];\n    \n    if (filters?.dateFrom) {\n      conditions.push(gte(consultations.createdAt, filters.dateFrom));\n    }\n    if (filters?.dateTo) {\n      conditions.push(lte(consultations.createdAt, filters.dateTo));\n    }\n    if (filters?.departmentId) {\n      conditions.push(eq(consultations.departmentId, filters.departmentId));\n    }\n    if (filters?.sector) {\n      conditions.push(sql`${filters.sector} = ANY(${consultations.selectedSectors})`);\n    }\n\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n\n    const [totalResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(consultations)\n      .where(whereClause);\n\n    const consultationsList = await db\n      .select()\n      .from(consultations)\n      .where(whereClause)\n      .orderBy(desc(consultations.createdAt))\n      .limit(filters?.limit || 50)\n      .offset(filters?.offset || 0);\n\n    return {\n      consultations: consultationsList,\n      total: totalResult.count,\n    };\n  }\n\n  async getConsultationById(id: string): Promise<Consultation | undefined> {\n    const [consultation] = await db\n      .select()\n      .from(consultations)\n      .where(eq(consultations.id, id));\n    return consultation || undefined;\n  }\n\n  async getConsultationStats(): Promise<{\n    total: number;\n    thisWeek: number;\n    departments: number;\n    activeSectors: number;\n  }> {\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n    const [totalResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(consultations);\n\n    const [thisWeekResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(consultations)\n      .where(gte(consultations.createdAt, oneWeekAgo));\n\n    const [departmentsResult] = await db\n      .select({ count: sql<number>`count(distinct ${consultations.departmentId})` })\n      .from(consultations);\n\n    const [sectorsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(sectors)\n      .where(eq(sectors.active, true));\n\n    return {\n      total: totalResult.count,\n      thisWeek: thisWeekResult.count,\n      departments: departmentsResult.count,\n      activeSectors: sectorsResult.count,\n    };\n  }\n\n  async getConsultationsByDate(days: number): Promise<{ date: string; count: number }[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const result = await db\n      .select({\n        date: sql<string>`date(${consultations.createdAt})`,\n        count: sql<number>`count(*)`\n      })\n      .from(consultations)\n      .where(gte(consultations.createdAt, startDate))\n      .groupBy(sql`date(${consultations.createdAt})`)\n      .orderBy(sql`date(${consultations.createdAt})`);\n\n    return result;\n  }\n\n  async getConsultationsBySector(): Promise<{ sector: string; count: number }[]> {\n    const result = await db\n      .select({\n        sectors: consultations.selectedSectors,\n      })\n      .from(consultations);\n\n    // Process the sectors array to count occurrences\n    const sectorCounts: Record<string, number> = {};\n    \n    result.forEach(row => {\n      row.sectors.forEach(sector => {\n        sectorCounts[sector] = (sectorCounts[sector] || 0) + 1;\n      });\n    });\n\n    return Object.entries(sectorCounts)\n      .map(([sector, count]) => ({ sector, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10); // Top 10 sectors\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10849},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"ciudadano\"), // ciudadano, admin, super_admin, planificador\n  active: boolean(\"active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\", { length: 2 }).primaryKey(),\n  name: text(\"name\").notNull(),\n  geocode: text(\"geocode\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n});\n\nexport const municipalities = pgTable(\"municipalities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  departmentId: varchar(\"department_id\", { length: 2 }).notNull(),\n  geocode: text(\"geocode\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n});\n\nexport const localities = pgTable(\"localities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  municipalityId: varchar(\"municipality_id\").notNull(),\n  area: text(\"area\").notNull(), // rural, urbano\n  geocode: text(\"geocode\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n});\n\nexport const sectors = pgTable(\"sectors\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  active: boolean(\"active\").default(true).notNull(),\n});\n\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personType: text(\"person_type\").notNull(), // natural, juridica, anonimo\n  \n  // Natural person fields\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  identity: text(\"identity\"),\n  email: text(\"email\"),\n  \n  // Juridica person fields\n  companyName: text(\"company_name\"),\n  rtn: text(\"rtn\"),\n  legalRepresentative: text(\"legal_representative\"),\n  companyContact: text(\"company_contact\"),\n  \n  // Optional contact info\n  mobile: text(\"mobile\"),\n  phone: text(\"phone\"),\n  altEmail: text(\"alt_email\"),\n  \n  // Location\n  departmentId: varchar(\"department_id\", { length: 2 }).notNull(),\n  municipalityId: varchar(\"municipality_id\").notNull(),\n  zone: text(\"zone\").notNull(), // urbano, rural\n  localityId: varchar(\"locality_id\"), // Nullable - required when selecting predefined locality\n  customLocalityName: text(\"custom_locality_name\"), // Para \"Otro\" - nombres personalizados\n  geocode: text(\"geocode\").notNull(),\n  \n  // Message and sectors\n  message: text(\"message\").notNull(),\n  images: text(\"images\").array().default([]), // Array of image URLs (max 3)\n  selectedSectors: text(\"selected_sectors\").array().notNull(),\n  \n  // Status and timestamps\n  status: text(\"status\").default(\"active\").notNull(), // active, archived\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const departmentsRelations = relations(departments, ({ many }) => ({\n  municipalities: many(municipalities),\n}));\n\nexport const municipalitiesRelations = relations(municipalities, ({ one, many }) => ({\n  department: one(departments, {\n    fields: [municipalities.departmentId],\n    references: [departments.id],\n  }),\n  localities: many(localities),\n}));\n\nexport const localitiesRelations = relations(localities, ({ one }) => ({\n  municipality: one(municipalities, {\n    fields: [localities.municipalityId],\n    references: [municipalities.id],\n  }),\n}));\n\nexport const consultationsRelations = relations(consultations, ({ one }) => ({\n  department: one(departments, {\n    fields: [consultations.departmentId],\n    references: [departments.id],\n  }),\n  municipality: one(municipalities, {\n    fields: [consultations.municipalityId],\n    references: [municipalities.id],\n  }),\n  locality: one(localities, {\n    fields: [consultations.localityId],\n    references: [localities.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  geocode: true,\n}).refine((data) => {\n  // Validación condicional para zona urbana\n  if (data.zone === \"urbano\") {\n    return !!data.localityId;\n  }\n  // Validación condicional para zona rural\n  if (data.zone === \"rural\") {\n    return !!data.localityId || !!data.customLocalityName;\n  }\n  return true;\n}, {\n  message: \"Para zona urbana seleccione una localidad. Para zona rural seleccione una aldea o escriba el nombre manualmente.\",\n});\n\nexport const insertDepartmentSchema = createInsertSchema(departments);\nexport const insertMunicipalitySchema = createInsertSchema(municipalities).omit({ id: true });\nexport const insertLocalitySchema = createInsertSchema(localities).omit({ id: true });\nexport const insertSectorSchema = createInsertSchema(sectors).omit({ id: true });\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Department = typeof departments.$inferSelect;\nexport type Municipality = typeof municipalities.$inferSelect;\nexport type Locality = typeof localities.$inferSelect;\nexport type Sector = typeof sectors.$inferSelect;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type InsertMunicipality = z.infer<typeof insertMunicipalitySchema>;\nexport type InsertLocality = z.infer<typeof insertLocalitySchema>;\nexport type InsertSector = z.infer<typeof insertSectorSchema>;\n","size_bytes":6136},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport UserManagement from \"@/pages/user-management\";\nimport { Dashboard } from \"@/components/dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport { AccessibilityButton } from \"@/components/accessibility-button\";\n\nfunction Router() {\n  return (\n    <>\n      <Switch>\n        <Route path=\"/\" component={HomePage} />\n        <Route path=\"/auth\" component={AuthPage} />\n        <Route path=\"/login\" component={AuthPage} />\n        <ProtectedRoute \n          path=\"/admin\" \n          component={() => <Dashboard />} \n          requiredRole={[\"admin\", \"super_admin\", \"planificador\"]} \n        />\n        <ProtectedRoute \n          path=\"/admin/users\" \n          component={() => <UserManagement />} \n          requiredRole={[\"super_admin\"]} \n        />\n        <Route component={NotFound} />\n      </Switch>\n      <AccessibilityButton />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1575},"client/src/index.css":{"content":"@import url('https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');\n@import url('https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Honduras Colors */\n  --honduras-primary: #1bd1e8;\n  --honduras-primary-dark: #17b8cd;\n  --honduras-secondary: #88cfe0;\n  --honduras-bg-light: hsl(0, 0%, 96%);\n  --honduras-white: hsl(0, 0%, 100%);\n  --honduras-text-dark: hsl(220, 15%, 15%);\n  \n  /* Bootstrap Color Overrides */\n  --bs-primary: var(--honduras-primary);\n  --bs-primary-rgb: 27, 209, 232;\n  --bs-link-color: var(--honduras-primary);\n  --bs-link-hover-color: var(--honduras-primary-dark);\n  \n  /* Placeholder Colors */\n  --placeholder-light: hsl(0, 0%, 75%);\n  --placeholder-dark: hsl(0, 0%, 50%);\n  \n  /* Shadcn Variables */\n  --background: var(--honduras-white);\n  --foreground: var(--honduras-text-dark);\n  --card: var(--honduras-white);\n  --card-foreground: var(--honduras-text-dark);\n  --popover: var(--honduras-white);\n  --popover-foreground: var(--honduras-text-dark);\n  --primary: var(--honduras-primary);\n  --primary-foreground: var(--honduras-white);\n  --secondary: var(--honduras-secondary);\n  --secondary-foreground: var(--honduras-white);\n  --muted: var(--honduras-bg-light);\n  --muted-foreground: var(--honduras-text-dark);\n  --accent: hsl(211, 51%, 93%);\n  --accent-foreground: var(--honduras-primary);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: var(--honduras-white);\n  --border: hsl(201, 30%, 91%);\n  --input: hsl(200, 23%, 97%);\n  --ring: var(--honduras-primary);\n  --chart-1: var(--honduras-primary);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: var(--honduras-bg-light);\n  --sidebar-foreground: var(--honduras-text-dark);\n  --sidebar-primary: var(--honduras-primary);\n  --sidebar-primary-foreground: var(--honduras-white);\n  --sidebar-accent: hsl(211, 51%, 93%);\n  --sidebar-accent-foreground: var(--honduras-primary);\n  --sidebar-border: hsl(205, 25%, 91%);\n  --sidebar-ring: var(--honduras-primary);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(228, 10%, 10%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(228, 10%, 10%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: var(--honduras-primary);\n  --primary-foreground: var(--honduras-white);\n  --secondary: var(--honduras-secondary);\n  --secondary-foreground: var(--honduras-white);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: var(--honduras-primary);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: var(--honduras-white);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: var(--honduras-primary);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Placeholder styles */\n  input::placeholder,\n  textarea::placeholder {\n    color: var(--placeholder-light) !important;\n    opacity: 1 !important;\n  }\n\n  .dark input::placeholder,\n  .dark textarea::placeholder {\n    color: var(--placeholder-dark) !important;\n    opacity: 1 !important;\n  }\n}\n\n/* Bootstrap Customizations for Honduras Theme */\n.btn-primary {\n  background-color: var(--honduras-primary);\n  border-color: var(--honduras-primary);\n  color: var(--honduras-white);\n}\n\n.btn-primary:hover {\n  background-color: var(--honduras-primary-dark);\n  border-color: var(--honduras-primary-dark);\n  color: var(--honduras-white);\n}\n\n/* Admin Login Button Styles */\n.btn-admin-login {\n  background-color: var(--honduras-primary) !important;\n  border-color: var(--honduras-primary) !important;\n  color: var(--honduras-white) !important;\n  border-radius: 8px !important;\n  box-shadow: 0 2px 4px rgba(27, 209, 232, 0.2) !important;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.btn-admin-login:hover {\n  background-color: var(--honduras-primary-dark) !important;\n  border-color: var(--honduras-primary-dark) !important;\n  color: var(--honduras-white) !important;\n  box-shadow: 0 4px 8px rgba(27, 209, 232, 0.3) !important;\n  transform: translateY(-1px);\n}\n\n.btn-admin-login:focus,\n.btn-admin-login:active {\n  background-color: var(--honduras-primary-dark) !important;\n  border-color: var(--honduras-primary-dark) !important;\n  color: var(--honduras-white) !important;\n  box-shadow: 0 4px 8px rgba(27, 209, 232, 0.3) !important;\n}\n\n/* Dropdown and Popover Positioning Fixes - Targeted for Consultation Form Dropdowns */\n.consultation-dropdown {\n  z-index: 80;\n  max-width: calc(100vw - 32px);\n  max-height: calc(100vh - 32px);\n}\n\n.consultation-dropdown[data-radix-select-content] {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n/* Ensure dropdowns don't get clipped by parent containers in consultation form */\n.consultation-container .form-section-card,\n.consultation-container .location-step,\n.consultation-container .conditional-fields {\n  overflow: visible;\n}\n\n/* Additional positioning for Combobox (Command) dropdowns */\n.consultation-dropdown [cmdk-root] {\n  max-height: 300px;\n  overflow: hidden;\n}\n\n.consultation-dropdown [cmdk-list] {\n  max-height: 250px;\n  overflow-y: auto;\n}\n\n/* Password Toggle Styles */\n.password-input-container {\n  position: relative;\n}\n\n.password-input {\n  padding-right: 45px !important;\n}\n\n.password-toggle-btn {\n  position: absolute;\n  right: 12px;\n  top: 50%;\n  transform: translateY(-50%);\n  background: none;\n  border: none;\n  padding: 4px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  transition: all 0.2s ease;\n  z-index: 10;\n}\n\n.password-toggle-btn:hover {\n  background-color: rgba(27, 209, 232, 0.1);\n}\n\n.password-toggle-icon {\n  width: 18px;\n  height: 18px;\n  color: #999;\n  transition: color 0.2s ease;\n}\n\n.password-toggle-btn:hover .password-toggle-icon {\n  color: var(--honduras-primary);\n}\n\n.password-toggle-btn:focus {\n  outline: none;\n  box-shadow: 0 0 0 2px rgba(27, 209, 232, 0.2);\n}\n\n.navbar-brand {\n  color: var(--honduras-primary) !important;\n  font-weight: bold;\n}\n\n.bg-primary-custom {\n  background-color: var(--honduras-primary) !important;\n}\n\n.text-primary-custom {\n  color: var(--honduras-primary) !important;\n}\n\n.border-primary-custom {\n  border-color: var(--honduras-primary) !important;\n}\n\n.sector-tag {\n  background-color: var(--honduras-bg-light);\n  border: 1px solid var(--honduras-primary);\n  border-radius: 20px;\n  padding: 5px 12px;\n  margin: 2px;\n  display: inline-block;\n  font-size: 0.875rem;\n}\n\n/* Accessibility Button Styles */\n.accessibility-button-container {\n  position: fixed;\n  left: 20px;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 1000;\n}\n\n.accessibility-button {\n  background-color: var(--honduras-primary) !important;\n  border-color: var(--honduras-primary) !important;\n  color: var(--honduras-white) !important;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 4px 12px rgba(27, 209, 232, 0.3);\n  transition: all 0.3s ease;\n}\n\n.accessibility-button:hover {\n  background-color: var(--honduras-primary-dark) !important;\n  border-color: var(--honduras-primary-dark) !important;\n  transform: scale(1.1);\n  box-shadow: 0 6px 16px rgba(27, 209, 232, 0.4);\n}\n\n.accessibility-button:focus {\n  outline: 3px solid var(--honduras-primary);\n  outline-offset: 2px;\n}\n\n.accessibility-panel {\n  max-width: 500px;\n  max-height: 80vh;\n  overflow-y: auto;\n}\n\n.accessibility-controls {\n  padding: 0;\n}\n\n.accessibility-section {\n  margin-bottom: 1rem;\n}\n\n.accessibility-section-title {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-weight: 600;\n  margin-bottom: 0.75rem;\n  color: var(--honduras-primary);\n}\n\n.accessibility-controls-row {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n  flex-wrap: wrap;\n}\n\n.accessibility-toggle-button {\n  min-width: 120px;\n}\n\n.accessibility-font-indicator {\n  min-width: 60px;\n  text-align: center;\n  background-color: var(--honduras-primary);\n  color: var(--honduras-white);\n}\n\n.accessibility-help-text {\n  font-size: 0.875rem;\n  color: #6b7280;\n  margin-top: 0.5rem;\n  font-style: italic;\n}\n\n/* High Contrast Mode */\n.accessibility-high-contrast {\n  filter: invert(1) hue-rotate(180deg);\n}\n\n.accessibility-high-contrast img,\n.accessibility-high-contrast video,\n.accessibility-high-contrast iframe,\n.accessibility-high-contrast svg {\n  filter: invert(1) hue-rotate(180deg);\n}\n\n.accessibility-high-contrast .accessibility-button {\n  filter: invert(1) hue-rotate(180deg);\n}\n\n/* Visual Guides Mode */\n.accessibility-visual-guides a,\n.accessibility-visual-guides [role=\"button\"],\n.accessibility-visual-guides button {\n  text-decoration: underline !important;\n  outline: 2px solid var(--honduras-primary) !important;\n  outline-offset: 2px !important;\n}\n\n.accessibility-visual-guides input,\n.accessibility-visual-guides textarea,\n.accessibility-visual-guides select {\n  border: 3px solid var(--honduras-primary) !important;\n  box-shadow: 0 0 0 2px rgba(27, 209, 232, 0.3) !important;\n}\n\n.accessibility-visual-guides input:focus,\n.accessibility-visual-guides textarea:focus,\n.accessibility-visual-guides select:focus {\n  border-color: var(--honduras-primary-dark) !important;\n  box-shadow: 0 0 0 4px rgba(27, 209, 232, 0.5) !important;\n}\n\n/* Simple Mode */\n.accessibility-simple-mode .complex-text {\n  display: none;\n}\n\n.accessibility-simple-mode .simple-text {\n  display: block;\n}\n\n.accessibility-simple-mode h1,\n.accessibility-simple-mode h2,\n.accessibility-simple-mode h3,\n.accessibility-simple-mode h4,\n.accessibility-simple-mode h5,\n.accessibility-simple-mode h6 {\n  font-size: 1.5rem !important;\n  font-weight: bold !important;\n  margin-bottom: 1rem !important;\n}\n\n.accessibility-simple-mode p,\n.accessibility-simple-mode span,\n.accessibility-simple-mode div {\n  font-size: 1.1rem !important;\n  line-height: 1.6 !important;\n}\n\n/* Google Forms Style Sections */\n.form-section-card {\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background: white;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);\n  margin-bottom: 24px;\n  transition: box-shadow 0.2s ease-in-out;\n}\n\n.form-section-card:hover {\n  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12);\n}\n\n.form-section-header {\n  border-bottom: 1px solid #e8f0fe;\n  background-color: #f8f9fa;\n  border-radius: 8px 8px 0 0;\n  padding: 20px 24px 16px;\n}\n\n.form-section-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: var(--honduras-primary);\n  margin: 0;\n  margin-bottom: 8px;\n}\n\n.form-section-description {\n  font-size: 0.875rem;\n  color: #5f6368;\n  margin: 0;\n  line-height: 1.4;\n}\n\n.form-section-card .CardContent {\n  padding: 24px;\n}\n\n/* Section numbering visual enhancement */\n.form-section-title::before {\n  content: \"\";\n  display: inline-block;\n  width: 6px;\n  height: 6px;\n  background-color: var(--honduras-primary);\n  border-radius: 50%;\n  margin-right: 12px;\n  vertical-align: middle;\n}\n\n/* Responsive section cards */\n@media (max-width: 768px) {\n  .form-section-card {\n    margin-bottom: 16px;\n    border-radius: 6px;\n  }\n  \n  .form-section-header {\n    padding: 16px 20px 12px;\n  }\n  \n  .form-section-title {\n    font-size: 0.9rem;\n  }\n  \n  .form-section-card .CardContent {\n    padding: 20px;\n  }\n\n  /* Mapa responsivo para móvil */\n  .location-map-container {\n    margin-top: 12px;\n  }\n  \n  .location-map-container > div {\n    border-radius: 8px;\n  }\n  \n  .location-map-container .text-xs {\n    font-size: 0.75rem;\n  }\n\n  /* Mejorar los popovers para táctil */\n  .location-select {\n    min-height: 48px;\n    font-size: 16px; /* Prevenir zoom en iOS */\n  }\n  \n  /* Ajustar spacing entre elementos del formulario */\n  .location-step {\n    margin-bottom: 20px;\n  }\n  \n  /* Mejorar las tarjetas de tipo de persona */\n  .person-type-card {\n    min-height: 60px;\n    margin-bottom: 12px;\n  }\n  \n  .person-type-content {\n    padding: 16px 12px;\n  }\n}\n\n/* Optimizaciones para tabletas */\n@media (min-width: 769px) and (max-width: 1024px) {\n  .form-section-card {\n    margin-bottom: 24px;\n  }\n  \n  .location-select {\n    min-height: 44px;\n  }\n  \n  .person-type-card {\n    min-height: 80px;\n  }\n  \n  /* Altura del mapa en tabletas */\n  .location-map-wrapper {\n    height: 300px;\n  }\n}\n\n/* Pantallas muy pequeñas (móviles en horizontal o muy pequeños) */\n@media (max-width: 480px) {\n  .consultation-container .container {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n  \n  .form-section-card {\n    margin: 0 -8px 16px -8px;\n    border-radius: 0;\n    border-left: none;\n    border-right: none;\n  }\n  \n  .person-type-card {\n    min-height: 56px;\n    border-radius: 6px;\n  }\n  \n  .creative-title {\n    font-size: 1.1rem;\n    line-height: 1.3;\n  }\n  \n  /* Altura del mapa en pantallas muy pequeñas */\n  .location-map-wrapper {\n    height: 200px;\n  }\n  \n  /* Mejorar popovers en móvil */\n  .location-select {\n    font-size: 16px; /* Prevenir zoom iOS */\n    padding: 12px 16px;\n  }\n  \n  /* Mejor spacing para sectores */\n  .sectors-container {\n    max-height: 180px;\n    overflow-y: auto;\n  }\n}\n\n/* Altura base del mapa */\n.location-map-wrapper {\n  height: 250px;\n}\n\n/* Mejoras para dispositivos táctiles */\n@media (hover: none) and (pointer: coarse) {\n  .person-type-card:hover {\n    transform: none; /* Deshabilitar hover animations en táctil */\n  }\n  \n  .location-select:hover {\n    background-color: inherit;\n  }\n  \n  /* Hacer botones más grandes para táctil */\n  .btn {\n    min-height: 44px;\n    padding: 12px 20px;\n  }\n  \n  /* Mejorar área táctil de los botones del Command */\n  [data-radix-collection-item] {\n    min-height: 44px;\n    padding: 8px 12px;\n  }\n}\n\n.accessibility-simple-mode .form-text,\n.accessibility-simple-mode .text-muted,\n.accessibility-simple-mode small {\n  font-size: 1rem !important;\n  color: #374151 !important;\n}\n\n/* Responsive Design for Accessibility Button */\n@media (max-width: 768px) {\n  .accessibility-button-container {\n    left: 10px;\n    top: 20px;\n    transform: none;\n  }\n  \n  .accessibility-button {\n    width: 45px;\n    height: 45px;\n  }\n  \n  .accessibility-panel {\n    max-width: 95vw;\n    margin: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .accessibility-controls-row {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .accessibility-toggle-button {\n    min-width: auto;\n    width: 100%;\n  }\n}\n\n/* Creative Title Styles */\n.creative-title {\n  color: white;\n  font-weight: 600;\n  font-size: 1.5rem;\n  letter-spacing: -0.02em;\n  line-height: 1.2;\n  text-shadow: 0 4px 8px rgba(97, 200, 216, 0.4), 0 2px 4px rgba(0, 0, 0, 0.3);\n  position: relative;\n  display: inline-block;\n  animation: creativeGlow 3s ease-in-out infinite alternate;\n}\n\n.creative-title::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, var(--honduras-secondary) 0%, var(--honduras-primary) 50%, var(--honduras-primary-dark) 100%);\n  border-radius: 12px;\n  opacity: 0.1;\n  z-index: -1;\n  transform: scale(1.05);\n  animation: creativeBackground 4s ease-in-out infinite alternate;\n}\n\n.creative-title::after {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  background: linear-gradient(45deg, var(--honduras-secondary), var(--honduras-primary), var(--honduras-primary-dark), var(--honduras-secondary));\n  border-radius: 14px;\n  opacity: 0.3;\n  z-index: -2;\n  animation: creativeRotate 6s linear infinite;\n  background-size: 300% 300%;\n}\n\n@keyframes creativeGlow {\n  0% {\n    filter: brightness(1) contrast(1);\n    transform: translateY(0px);\n  }\n  100% {\n    filter: brightness(1.1) contrast(1.05);\n    transform: translateY(-2px);\n  }\n}\n\n@keyframes creativeBackground {\n  0% {\n    opacity: 0.1;\n    transform: scale(1.05) rotate(0deg);\n  }\n  100% {\n    opacity: 0.15;\n    transform: scale(1.08) rotate(1deg);\n  }\n}\n\n@keyframes creativeRotate {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* Responsive adjustments for creative title */\n@media (max-width: 768px) {\n  .creative-title {\n    font-size: 1.25rem;\n    letter-spacing: -0.01em;\n  }\n}\n\n@media (max-width: 480px) {\n  .creative-title {\n    font-size: 1.125rem;\n    letter-spacing: 0;\n    line-height: 1.3;\n  }\n}\n\n/* Accessibility: Preserve text readability in high contrast mode */\n.accessibility-high-contrast .creative-title {\n  -webkit-text-fill-color: inherit;\n  background: none;\n  color: inherit !important;\n  text-shadow: none;\n}\n\n.accessibility-high-contrast .creative-title::before,\n.accessibility-high-contrast .creative-title::after {\n  display: none;\n}\n\n/* Person Type Card Styles */\n.person-type-card {\n  background-color: var(--honduras-white);\n  border: 2px solid #e9ecef;\n  border-radius: 12px;\n  padding: 20px;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  height: 80px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.person-type-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  border-color: var(--honduras-primary);\n}\n\n.person-type-card.selected {\n  border-color: var(--honduras-primary);\n  box-shadow: 0 4px 12px rgba(27, 209, 232, 0.15);\n  background-color: #f8fdff;\n}\n\n.person-type-content h6 {\n  color: #495057;\n  font-weight: 500;\n  font-size: 0.875rem;\n}\n\n.person-type-card.selected .person-type-content h6 {\n  color: var(--honduras-primary);\n}\n\n/* Conditional Fields Animation */\n.conditional-fields {\n  animation: slideDown 0.4s ease-out;\n  overflow: hidden;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    max-height: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    max-height: 500px;\n    transform: translateY(0);\n  }\n}\n\n/* Responsive Design for Cards */\n@media (max-width: 768px) {\n  .person-type-card {\n    margin-bottom: 16px;\n    height: 70px;\n    padding: 16px;\n  }\n  \n  .person-type-content h6 {\n    font-size: 0.8rem;\n  }\n}\n\n/* Modern Location Selector Styles */\n.modern-location-selector {\n  background: linear-gradient(135deg, #f8fdff 0%, #ffffff 100%);\n  border-radius: 16px;\n  padding: 32px;\n  border: 1px solid #e3f2fd;\n  box-shadow: 0 4px 20px rgba(27, 209, 232, 0.08);\n}\n\n.location-icon {\n  font-size: 1.8rem;\n  margin-right: 12px;\n}\n\n.location-step {\n  opacity: 0;\n  animation: slideInUp 0.5s ease-out forwards;\n}\n\n.location-label {\n  font-weight: 500;\n  color: var(--honduras-primary);\n  font-size: 0.8rem;\n  margin-bottom: 8px;\n  display: block;\n}\n\n.location-select {\n  border: 2px solid #e9f4f7;\n  border-radius: 12px;\n  transition: all 0.3s ease;\n  background: white;\n  font-size: 0.875rem;\n  padding: 12px 16px;\n  height: auto;\n}\n\n.location-select:hover {\n  border-color: var(--honduras-primary);\n  box-shadow: 0 2px 8px rgba(27, 209, 232, 0.15);\n}\n\n.location-select:focus-within {\n  border-color: var(--honduras-primary);\n  box-shadow: 0 0 0 3px rgba(27, 209, 232, 0.1);\n}\n\n/* Zone Selection Cards */\n.zone-selection {\n  margin-top: 8px;\n}\n\n.zone-card {\n  background: white;\n  border: 2px solid #e9f4f7;\n  border-radius: 12px;\n  padding: 20px;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.zone-card:hover {\n  border-color: var(--honduras-primary);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(27, 209, 232, 0.15);\n}\n\n.zone-card.selected {\n  border-color: var(--honduras-primary);\n  background: linear-gradient(135deg, #f8fdff 0%, #ffffff 100%);\n  box-shadow: 0 4px 16px rgba(27, 209, 232, 0.2);\n}\n\n.zone-content {\n  text-align: center;\n}\n\n.zone-emoji {\n  font-size: 1.8rem;\n  display: block;\n  margin-bottom: 8px;\n}\n\n.zone-text {\n  font-weight: 600;\n  color: #333;\n  font-size: 1rem;\n  display: block;\n}\n\n.zone-card.selected .zone-text {\n  color: var(--honduras-primary);\n}\n\n.zone-subtitle {\n  color: #666;\n  font-size: 0.8rem;\n  margin-top: 4px;\n  display: block;\n}\n\n/* Geocode Display */\n.geocode-display {\n  margin-top: 16px;\n}\n\n.geocode-container {\n  background: none;\n  border-radius: 0;\n  padding: 8px 0;\n  text-align: center;\n  color: #666;\n}\n\n.geocode-label {\n  color: var(--honduras-primary);\n  font-weight: 500;\n  font-size: 0.7rem;\n  margin-bottom: 4px;\n  opacity: 0.9;\n}\n\n.geocode-value {\n  font-size: 0.85rem;\n  font-weight: 500;\n  font-family: 'Courier New', monospace;\n  letter-spacing: 0.5px;\n  background: none;\n  border-radius: 8px;\n  padding: 12px 16px;\n  margin: 8px 0;\n  border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n.geocode-subtitle {\n  color: #888;\n  font-size: 0.65rem;\n  margin-top: 2px;\n}\n\n/* Animations */\n.animate-fade-in {\n  animation: fadeInUp 0.4s ease-out;\n}\n\n@keyframes slideInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(15px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Responsive Design for Location Selector */\n@media (max-width: 768px) {\n  .modern-location-selector {\n    padding: 20px;\n    margin: 0 -10px;\n  }\n  \n  .zone-card {\n    height: 90px;\n    padding: 16px;\n  }\n  \n  .zone-emoji {\n    font-size: 1.5rem;\n  }\n  \n  .zone-text {\n    font-size: 0.9rem;\n  }\n  \n  .geocode-value {\n    font-size: 1rem;\n    letter-spacing: 0.5px;\n  }\n  \n  .location-icon {\n    font-size: 1.5rem;\n  }\n}\n\n/* Modern Form Buttons Honduras Style */\n.form-buttons-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin-top: 32px;\n  padding: 24px 0;\n}\n\n/* Submit Button - Primary Honduras Style */\n.btn-submit-custom {\n  background-color: var(--honduras-primary) !important;\n  border-color: var(--honduras-primary) !important;\n  color: var(--honduras-white) !important;\n  font-weight: 600;\n  font-size: 1.1rem;\n  padding: 16px 32px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(27, 209, 232, 0.3);\n  transition: all 0.3s ease;\n  text-transform: none;\n  letter-spacing: 0.5px;\n  border: 2px solid var(--honduras-primary);\n  width: 100%;\n  min-height: 56px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.btn-submit-custom:hover:not(:disabled) {\n  background-color: var(--honduras-primary-dark) !important;\n  border-color: var(--honduras-primary-dark) !important;\n  color: var(--honduras-white) !important;\n  transform: translateY(-2px);\n  box-shadow: 0 6px 16px rgba(23, 184, 205, 0.4);\n}\n\n.btn-submit-custom:active:not(:disabled) {\n  transform: translateY(0);\n  box-shadow: 0 2px 8px rgba(27, 209, 232, 0.3);\n}\n\n.btn-submit-custom:disabled {\n  background-color: #a0d4dd !important;\n  border-color: #a0d4dd !important;\n  color: #ffffff !important;\n  cursor: not-allowed;\n  transform: none;\n  box-shadow: 0 2px 8px rgba(160, 212, 221, 0.2);\n}\n\n/* Reset Button - Outline Honduras Style */\n.btn-reset-custom {\n  background-color: var(--honduras-white) !important;\n  border-color: var(--honduras-primary) !important;\n  color: var(--honduras-primary) !important;\n  font-weight: 600;\n  font-size: 1rem;\n  padding: 14px 28px;\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(27, 209, 232, 0.1);\n  transition: all 0.3s ease;\n  text-transform: none;\n  letter-spacing: 0.3px;\n  border: 2px solid var(--honduras-primary);\n  width: 100%;\n  min-height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.btn-reset-custom:hover {\n  background-color: #e6f9fb !important;\n  border-color: var(--honduras-primary) !important;\n  color: var(--honduras-primary) !important;\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(27, 209, 232, 0.2);\n}\n\n.btn-reset-custom:active {\n  transform: translateY(0);\n  background-color: #d1f4f8 !important;\n  box-shadow: 0 2px 6px rgba(27, 209, 232, 0.15);\n}\n\n/* Desktop Layout - Side by Side */\n@media (min-width: 768px) {\n  .form-buttons-container {\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 20px;\n  }\n  \n  .btn-reset-custom {\n    width: auto;\n    min-width: 180px;\n  }\n  \n  .btn-submit-custom {\n    width: auto;\n    min-width: 200px;\n  }\n}\n\n/* Mobile Responsive - Full Width */\n@media (max-width: 767px) {\n  .form-buttons-container {\n    padding: 20px 0;\n    gap: 14px;\n  }\n  \n  .btn-submit-custom {\n    order: 1;\n    font-size: 1.05rem;\n    padding: 18px 24px;\n    min-height: 60px;\n  }\n  \n  .btn-reset-custom {\n    order: 2;\n    font-size: 0.95rem;\n    padding: 16px 20px;\n    min-height: 52px;\n  }\n}\n\n/* Icon Spacing in Buttons */\n.btn-submit-custom i,\n.btn-reset-custom i {\n  margin-right: 8px;\n}\n\n/* Loading Spinner in Submit Button */\n.btn-submit-custom .animate-spin {\n  margin-left: 8px;\n}\n\n.location-selector {\n  border-left: 3px solid var(--honduras-primary);\n}\n\n.form-section {\n  background-color: var(--honduras-white);\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.dashboard-card {\n  transition: transform 0.2s;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n}\n\n.navbar {\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.sidebar {\n  background-color: var(--honduras-bg-light);\n  min-height: calc(100vh - 76px);\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n}\n\n/* Custom scrollbar for better UX */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--honduras-bg-light);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--honduras-primary);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--honduras-primary-dark);\n}\n\n/* Photo upload section styles */\n.photo-upload-section {\n  padding: 0.5rem 0;\n}\n\n.photo-upload-button {\n  border: 2px dashed #cbd5e1;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  padding: 1rem;\n}\n\n.photo-upload-button:hover {\n  border-color: #1bd1e8;\n  background-color: #f8fafc;\n}\n\n.selected-photos-grid .photo-preview-card {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n  overflow: hidden;\n  background: #f8fafc;\n}\n\n.selected-photos-grid .photo-preview-card:hover {\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n  transform: translateY(-2px);\n  transition: all 0.2s ease;\n}\n\n.photo-info {\n  padding: 0.5rem;\n  background: #f1f5f9;\n  font-size: 0.8rem;\n}\n","size_bytes":26419},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/consultation-form.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { insertConsultationSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Loader2,\n  X,\n  Plus,\n  ChevronsUpDown,\n  Upload,\n  Trash2,\n  Check,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\nimport LocationMap from \"@/components/location-map\";\nimport aldeasData from \"@shared/aldeas-honduras.json\";\n\ntype Department = { id: string; name: string; geocode: string };\ntype Municipality = { id: string; name: string; geocode: string; departmentId: string };\ntype Locality = {\n  id: string;\n  name: string;\n  area: \"urbano\" | \"rural\";\n  municipalityId: string;\n  latitude?: string | null;\n  longitude?: string | null;\n};\n\nconst consultationFormSchema = insertConsultationSchema;\ntype ConsultationFormData = z.infer<typeof consultationFormSchema>;\n\nfunction ConsultationForm() {\n  const { toast } = useToast();\n  const [personType, setPersonType] = useState<string>(\"natural\");\n  const [selectedSectors, setSelectedSectors] = useState<string[]>([]);\n  const [selectedZone, setSelectedZone] = useState<string>(\"\");\n  const [localitySearchOpen, setLocalitySearchOpen] = useState(false);\n  const [localitySearchValue, setLocalitySearchValue] = useState(\"\");\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [openDepartment, setOpenDepartment] = useState(false);\n  const [openMunicipality, setOpenMunicipality] = useState(false);\n  const [showCustomLocality, setShowCustomLocality] = useState(false);\n\n  const form = useForm<ConsultationFormData>({\n    resolver: zodResolver(consultationFormSchema),\n    defaultValues: {\n      personType: \"natural\",\n      selectedSectors: [],\n      status: \"active\",\n      // lat/lng se setean al hacer clic en el mapa\n    },\n  });\n\n  const departmentId = form.watch(\"departmentId\");\n  const municipalityId = form.watch(\"municipalityId\");\n  const localityId = form.watch(\"localityId\");\n\n  // Función para obtener aldeas rurales del JSON por municipio usando geocode\n  const getRuralAldeas = (municipalityGeocode: string) => {\n    if (!municipalityGeocode || selectedZone !== \"rural\") return [];\n    \n    // Normalizar geocode removiendo ceros a la izquierda para mapear al JSON\n    // DB: \"0101\" -> JSON: \"101\"\n    const normalizedGeocode = municipalityGeocode.replace(/^0+/, '') || '0';\n    \n    const aldeasForMunicipality = aldeasData[normalizedGeocode as keyof typeof aldeasData];\n    if (!aldeasForMunicipality) {\n      return [];\n    }\n    return aldeasForMunicipality.aldeas.map(aldea => ({\n      id: aldea.name, // Usar el nombre como ID para las aldeas\n      name: aldea.name,\n      area: \"rural\" as const,\n      municipalityId: municipalityId,\n      latitude: null,\n      longitude: null\n    }));\n  };\n\n  // Combinar localidades urbanas con aldeas rurales\n  const getAllLocalitiesForZone = () => {\n    if (selectedZone === \"rural\") {\n      // Construir el geocode completo: departamento + municipio\n      const selectedDepartment = departments.find(d => d.id === departmentId);\n      const selectedMunicipality = municipalities.find(m => m.id === municipalityId);\n      \n      if (!selectedDepartment || !selectedMunicipality) return [];\n      \n      // Geocode completo = departmentGeocode + municipalityGeocode\n      // Ej: ATLÁNTIDA(\"01\") + LA CEIBA(\"01\") = \"0101\"\n      const fullMunicipalityGeocode = selectedDepartment.geocode + selectedMunicipality.geocode;\n      \n      console.log('🏗️ Building full geocode:', { \n        dept: selectedDepartment.geocode, \n        muni: selectedMunicipality.geocode, \n        full: fullMunicipalityGeocode \n      });\n      \n      const ruralAldeas = getRuralAldeas(fullMunicipalityGeocode);\n      // Agregar opción \"Otro\" al final\n      ruralAldeas.push({\n        id: \"otro\",\n        name: \"Otro (escribir manualmente)\",\n        area: \"rural\" as const,\n        municipalityId: municipalityId,\n        latitude: null,\n        longitude: null\n      });\n      return ruralAldeas;\n    } else if (selectedZone === \"urbano\") {\n      return localities.filter(l => l.area === \"urbano\" && l.municipalityId === municipalityId);\n    }\n    return [];\n  };\n\n  // === Data queries ===\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // IMPORTANTE: usar rutas con parámetro para el defaultQueryFn\n  const { data: municipalities = [] } = useQuery<Municipality[]>({\n    queryKey: departmentId ? [`/api/municipalities/${departmentId}`] : [],\n    enabled: !!departmentId,\n  });\n\n  const { data: localities = [] } = useQuery<Locality[]>({\n    queryKey: municipalityId ? [`/api/localities/${municipalityId}`] : [],\n    enabled: !!municipalityId,\n  });\n\n  const { data: sectors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/sectors\"],\n  });\n\n  // Cargar todos los sectores para mostrarlos como botones\n  const { data: allSectors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/sectors\"],\n  });\n\n  // === Mutación para crear consulta ===\n  const createConsultationMutation = useMutation({\n    mutationFn: async (data: ConsultationFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/consultations\", data);\n      if (!res.ok) {\n        const msg = await res.text().catch(() => \"\");\n        throw new Error(msg || \"Error al crear consulta\");\n      }\n      return await res.json();\n    },\n    onSuccess: (result) => {\n      console.log(\"✅ Consulta exitosa:\", result);\n      toast({\n        title: \"¡Consulta enviada exitosamente!\",\n        description: \"Tu consulta ha sido registrada. Gracias por tu participación.\",\n      });\n      form.reset();\n      setSelectedSectors([]);\n      setPersonType(\"natural\");\n      setSelectedImages([]);\n      setSelectedZone(\"urbano\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error al enviar consulta\",\n        description: \"Hubo un problema al enviar tu consulta. Revisa los campos requeridos.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: ConsultationFormData) => {\n    let imageUrls: string[] = [];\n\n    // Subida de imágenes (opcional)\n    if (selectedImages.length > 0) {\n      const formData = new FormData();\n      selectedImages.forEach((file) => formData.append(\"images\", file));\n      try {\n        const uploadRes = await fetch(\"/api/upload-images\", {\n          method: \"POST\",\n          body: formData,\n        });\n        if (!uploadRes.ok) throw new Error(\"Error al subir imágenes\");\n        const uploadData = await uploadRes.json();\n        imageUrls = uploadData.imageUrls;\n      } catch {\n        toast({\n          title: \"Error al subir imágenes\",\n          description: \"No se pudieron subir las imágenes. Envía la consulta sin ellas o inténtalo de nuevo.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    createConsultationMutation.mutate({\n      ...data,\n      selectedSectors,\n      images: imageUrls,\n    });\n  };\n\n  const handleSectorAdd = (sectorName: string) => {\n    if (!selectedSectors.includes(sectorName)) {\n      setSelectedSectors((prev) => [...prev, sectorName]);\n    }\n  };\n\n  const handleSectorRemove = (sectorName: string) => {\n    setSelectedSectors((prev) => prev.filter((s) => s !== sectorName));\n  };\n\n  // Manejar cambios de tipo de persona (limpieza de campos)\n  useEffect(() => {\n    form.setValue(\"personType\", personType);\n    if (personType === \"anonimo\") {\n      form.setValue(\"firstName\", undefined);\n      form.setValue(\"lastName\", undefined);\n      form.setValue(\"identity\", undefined);\n      form.setValue(\"email\", undefined);\n      form.setValue(\"companyName\", undefined);\n      form.setValue(\"rtn\", undefined);\n      form.setValue(\"legalRepresentative\", undefined);\n      form.setValue(\"companyContact\", undefined);\n    }\n  }, [personType, form]);\n\n  return (\n    <div className=\"consultation-container\">\n      <div className=\"container mt-4\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12 col-lg-10\">\n            <Card className=\"form-section\">\n              <CardHeader>\n                <CardTitle className=\"text-center\">\n                  <h2 className=\"mb-1 creative-title\">Construyamos una Honduras Próspera Juntos</h2>\n                </CardTitle>\n              </CardHeader>\n\n              <CardContent>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* ============== 1. TIPO DE PERSONA ============== */}\n                  <Card className=\"form-section-card\">\n                    <CardHeader className=\"form-section-header\">\n                      <h3 className=\"form-section-title\">1. Tipo de Persona</h3>\n                      <p className=\"form-section-description\">\n                        Seleccione el tipo de persona que mejor lo describa\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"row g-3 mb-4\">\n                        {/* Natural */}\n                        <div className=\"col-md-4\">\n                          <div\n                            className={`person-type-card ${personType === \"natural\" ? \"selected\" : \"\"}`}\n                            onClick={() => setPersonType(\"natural\")}\n                            onKeyDown={(e) => {\n                              if (e.key === \"Enter\" || e.key === \" \") {\n                                e.preventDefault();\n                                setPersonType(\"natural\");\n                              }\n                            }}\n                            role=\"button\"\n                            tabIndex={0}\n                            data-testid=\"card-natural\"\n                            aria-label=\"Seleccionar Persona Natural\"\n                          >\n                            <div className=\"person-type-content\">\n                              <h6 className=\"mb-0 text-dark-emphasis\">Persona Natural</h6>\n                            </div>\n                          </div>\n                        </div>\n                        {/* Jurídica */}\n                        <div className=\"col-md-4\">\n                          <div\n                            className={`person-type-card ${personType === \"juridica\" ? \"selected\" : \"\"}`}\n                            onClick={() => setPersonType(\"juridica\")}\n                            onKeyDown={(e) => {\n                              if (e.key === \"Enter\" || e.key === \" \") {\n                                e.preventDefault();\n                                setPersonType(\"juridica\");\n                              }\n                            }}\n                            role=\"button\"\n                            tabIndex={0}\n                            data-testid=\"card-juridica\"\n                            aria-label=\"Seleccionar Persona Jurídica\"\n                          >\n                            <div className=\"person-type-content\">\n                              <h6 className=\"mb-0 text-dark-emphasis\">Persona Jurídica</h6>\n                            </div>\n                          </div>\n                        </div>\n                        {/* Anónimo */}\n                        <div className=\"col-md-4\">\n                          <div\n                            className={`person-type-card ${personType === \"anonimo\" ? \"selected\" : \"\"}`}\n                            onClick={() => setPersonType(\"anonimo\")}\n                            onKeyDown={(e) => {\n                              if (e.key === \"Enter\" || e.key === \" \") {\n                                e.preventDefault();\n                                setPersonType(\"anonimo\");\n                              }\n                            }}\n                            role=\"button\"\n                            tabIndex={0}\n                            data-testid=\"card-anonimo\"\n                            aria-label=\"Seleccionar Anónimo\"\n                          >\n                            <div className=\"person-type-content\">\n                              <h6 className=\"mb-0 text-dark-emphasis\">Anónimo</h6>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Datos persona natural */}\n                      {personType === \"natural\" && (\n                        <div className=\"conditional-fields mt-4\">\n                          <h6 className=\"mb-3 text-muted\">Información de Persona Natural</h6>\n                          <div className=\"row mb-3\">\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"firstName\">Primer Nombre *</Label>\n                              <Input id=\"firstName\" {...form.register(\"firstName\")} placeholder=\"Ingrese su primer nombre\" />\n                              {form.formState.errors.firstName && (\n                                <div className=\"text-danger small\">{form.formState.errors.firstName.message}</div>\n                              )}\n                            </div>\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"lastName\">Apellido *</Label>\n                              <Input id=\"lastName\" {...form.register(\"lastName\")} placeholder=\"Ingrese su apellido\" />\n                              {form.formState.errors.lastName && (\n                                <div className=\"text-danger small\">{form.formState.errors.lastName.message}</div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"row mb-3\">\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"identity\">Número de Identidad *</Label>\n                              <Input id=\"identity\" placeholder=\"Ingrese su número de identidad\" {...form.register(\"identity\")} />\n                              {form.formState.errors.identity && (\n                                <div className=\"text-danger small\">{form.formState.errors.identity.message}</div>\n                              )}\n                            </div>\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"email\">Correo Electrónico *</Label>\n                              <Input id=\"email\" type=\"email\" {...form.register(\"email\")} placeholder=\"Ingrese su correo\" />\n                              {form.formState.errors.email && (\n                                <div className=\"text-danger small\">{form.formState.errors.email.message}</div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Datos persona jurídica */}\n                      {personType === \"juridica\" && (\n                        <div className=\"conditional-fields mt-4\">\n                          <h6 className=\"mb-3 text-muted\">Información de Persona Jurídica</h6>\n                          <div className=\"row mb-3\">\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"companyName\">Nombre de la Empresa *</Label>\n                              <Input id=\"companyName\" {...form.register(\"companyName\")} placeholder=\"Nombre de la empresa\" />\n                              {form.formState.errors.companyName && (\n                                <div className=\"text-danger small\">{form.formState.errors.companyName.message}</div>\n                              )}\n                            </div>\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"rtn\">RTN *</Label>\n                              <Input id=\"rtn\" {...form.register(\"rtn\")} placeholder=\"RTN\" />\n                              {form.formState.errors.rtn && (\n                                <div className=\"text-danger small\">{form.formState.errors.rtn.message}</div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"row mb-3\">\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"legalRepresentative\">Representante Legal *</Label>\n                              <Input id=\"legalRepresentative\" {...form.register(\"legalRepresentative\")} placeholder=\"Nombre del representante\" />\n                              {form.formState.errors.legalRepresentative && (\n                                <div className=\"text-danger small\">{form.formState.errors.legalRepresentative.message}</div>\n                              )}\n                            </div>\n                            <div className=\"col-md-6\">\n                              <Label htmlFor=\"companyContact\">Correo/Teléfono *</Label>\n                              <Input id=\"companyContact\" {...form.register(\"companyContact\")} placeholder=\"Correo o teléfono\" />\n                              {form.formState.errors.companyContact && (\n                                <div className=\"text-danger small\">{form.formState.errors.companyContact.message}</div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Contacto opcional */}\n                      {personType !== \"anonimo\" && (\n                        <div className=\"mt-4\">\n                          <h6 className=\"mb-3 text-muted\">Información de Contacto (Opcional)</h6>\n                          <div className=\"row mb-3\">\n                            <div className=\"col-md-4\">\n                              <Label htmlFor=\"mobile\">Celular</Label>\n                              <Input id=\"mobile\" placeholder=\"Celular\" {...form.register(\"mobile\")} />\n                            </div>\n                            <div className=\"col-md-4\">\n                              <Label htmlFor=\"phone\">Teléfono Fijo</Label>\n                              <Input id=\"phone\" placeholder=\"Teléfono fijo\" {...form.register(\"phone\")} />\n                            </div>\n                            <div className=\"col-md-4\">\n                              <Label htmlFor=\"altEmail\">Correo Alternativo</Label>\n                              <Input id=\"altEmail\" type=\"email\" placeholder=\"Correo alternativo\" {...form.register(\"altEmail\")} />\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* ============== 2. UBICACIÓN ============== */}\n                  <Card className=\"form-section-card\">\n                    <CardHeader className=\"form-section-header\">\n                      <h3 className=\"form-section-title\">2. Ubicación</h3>\n                      <p className=\"form-section-description\">\n                        Seleccione su ubicación geográfica para una mejor atención\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      {/* Departamento */}\n                      <div className=\"location-step mb-3\">\n                        <Label className=\"location-label\">1. Departamento *</Label>\n                        <Popover open={openDepartment} onOpenChange={setOpenDepartment}>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              aria-expanded={openDepartment}\n                              className=\"location-select justify-between\"\n                              data-testid=\"select-department\"\n                            >\n                              {departmentId\n                                ? departments.find((d) => d.id === departmentId)?.name\n                                : \"Seleccione su departamento...\"}\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0 consultation-dropdown\" side=\"bottom\" align=\"start\" sideOffset={4} collisionPadding={16}>\n                            <Command>\n                              <CommandInput placeholder=\"Buscar departamento...\" />\n                              <CommandEmpty>No se encontró el departamento.</CommandEmpty>\n                              <CommandGroup>\n                                {departments.map((dept) => (\n                                  <CommandItem\n                                    key={dept.id}\n                                    value={dept.name}\n                                    onSelect={() => {\n                                      form.setValue(\"departmentId\", dept.id);\n                                      form.setValue(\"municipalityId\", \"\");\n                                      form.setValue(\"localityId\", \"\");\n                                      form.setValue(\"customLocalityName\", \"\");\n                                      setSelectedZone(\"\");\n                                      setShowCustomLocality(false);\n                                      setOpenDepartment(false);\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        departmentId === dept.id ? \"opacity-100\" : \"opacity-0\",\n                                      )}\n                                    />\n                                    {dept.name}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        {form.formState.errors.departmentId && (\n                          <div className=\"text-danger small mt-1\">{form.formState.errors.departmentId.message}</div>\n                        )}\n                      </div>\n\n                      {/* Municipio */}\n                      <div className=\"location-step mb-3\">\n                        <Label className=\"location-label\">2. Municipio *</Label>\n                        <Popover open={openMunicipality} onOpenChange={setOpenMunicipality}>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              aria-expanded={openMunicipality}\n                              className=\"location-select justify-between\"\n                              data-testid=\"select-municipality\"\n                              disabled={!departmentId}\n                            >\n                              {municipalityId\n                                ? municipalities.find((m) => m.id === municipalityId)?.name\n                                : !departmentId\n                                  ? \"Primero seleccione un departamento...\"\n                                  : \"Seleccione su municipio...\"}\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0 consultation-dropdown\" side=\"bottom\" align=\"start\" sideOffset={4} collisionPadding={16}>\n                            <Command>\n                              <CommandInput placeholder=\"Buscar municipio...\" />\n                              <CommandEmpty>No se encontró el municipio.</CommandEmpty>\n                              <CommandGroup>\n                                {municipalities.map((muni) => (\n                                  <CommandItem\n                                    key={muni.id}\n                                    value={muni.name}\n                                    onSelect={() => {\n                                      form.setValue(\"municipalityId\", muni.id);\n                                      form.setValue(\"localityId\", \"\");\n                                      form.setValue(\"customLocalityName\", \"\");\n                                      setSelectedZone(\"\");\n                                      setShowCustomLocality(false);\n                                      setOpenMunicipality(false);\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        municipalityId === muni.id ? \"opacity-100\" : \"opacity-0\",\n                                      )}\n                                    />\n                                    {muni.name}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        {form.formState.errors.municipalityId && (\n                          <div className=\"text-danger small mt-1\">{form.formState.errors.municipalityId.message}</div>\n                        )}\n                      </div>\n\n                      {/* Zona */}\n                      <div className=\"location-step mb-3\">\n                        <Label className=\"location-label\">3. Zona *</Label>\n                        <Select\n                          onValueChange={(value) => {\n                            setSelectedZone(value);\n                            form.setValue(\"zone\", value); // Setear el campo zone\n                            form.setValue(\"localityId\", \"\");\n                            form.setValue(\"customLocalityName\", \"\");\n                            setShowCustomLocality(false);\n                          }}\n                          value={selectedZone}\n                          disabled={!municipalityId}\n                        >\n                          <SelectTrigger className=\"location-select\" data-testid=\"select-zone\">\n                            <SelectValue\n                              placeholder={\n                                !municipalityId\n                                  ? \"Primero seleccione un municipio...\"\n                                  : \"Seleccione el tipo de zona...\"\n                              }\n                            />\n                          </SelectTrigger>\n                          <SelectContent className=\"consultation-dropdown\" position=\"popper\" side=\"bottom\" align=\"start\" sideOffset={4} collisionPadding={16}>\n                            <SelectItem value=\"urbano\">Urbano</SelectItem>\n                            <SelectItem value=\"rural\">Rural</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Localidad + Buscador */}\n                      <div className=\"location-step mb-3\">\n                        <Label className=\"location-label\">\n                          4. {selectedZone === \"urbano\"\n                            ? \"Colonia o Barrio\"\n                            : selectedZone === \"rural\"\n                              ? \"Aldea o Caserío\"\n                              : \"Localidad\"} *\n                        </Label>\n                        <Popover open={localitySearchOpen} onOpenChange={setLocalitySearchOpen}>\n                          <PopoverTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              aria-expanded={localitySearchOpen}\n                              className=\"w-full justify-between location-select\"\n                              data-testid=\"select-locality\"\n                              disabled={!selectedZone}\n                            >\n                              {(() => {\n                                if (!selectedZone) return \"Primero seleccione un tipo de zona...\";\n                                if (selectedZone === \"rural\") {\n                                  const customName = form.watch(\"customLocalityName\");\n                                  if (customName) return customName;\n                                  return \"Busque su aldea o caserío...\";\n                                } else {\n                                  const localityId = form.watch(\"localityId\");\n                                  if (localityId) {\n                                    return getAllLocalitiesForZone().find((l) => l.id === localityId)?.name;\n                                  }\n                                  return \"Busque su colonia o barrio...\";\n                                }\n                              })()}\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0 consultation-dropdown\" side=\"bottom\" align=\"start\" sideOffset={4} collisionPadding={16}>\n                            <Command>\n                              <CommandInput\n                                placeholder={selectedZone === \"urbano\" ? \"Buscar colonia o barrio...\" : \"Buscar aldea o caserío...\"}\n                                value={localitySearchValue}\n                                onValueChange={setLocalitySearchValue}\n                              />\n                              <CommandList>\n                                <CommandEmpty>No se encontraron localidades.</CommandEmpty>\n                                <CommandGroup>\n                                  {selectedZone &&\n                                    getAllLocalitiesForZone()\n                                      .filter((l) => l.name.toLowerCase().includes(localitySearchValue.toLowerCase()))\n                                      .map((locality) => (\n                                        <CommandItem\n                                          key={locality.id}\n                                          value={locality.name}\n                                          onSelect={() => {\n                                            if (locality.id === \"otro\") {\n                                              // Opción \"Otro\" - permitir nombre personalizado\n                                              form.setValue(\"localityId\", \"\");\n                                              form.setValue(\"customLocalityName\", \"\");\n                                              setShowCustomLocality(true);\n                                            } else if (selectedZone === \"rural\") {\n                                              // Aldea rural - usar nombre en customLocalityName\n                                              form.setValue(\"localityId\", \"\");\n                                              form.setValue(\"customLocalityName\", locality.name);\n                                              setShowCustomLocality(false);\n                                            } else {\n                                              // Localidad urbana real de DB - usar ID real\n                                              form.setValue(\"localityId\", locality.id);\n                                              form.setValue(\"customLocalityName\", \"\");\n                                              setShowCustomLocality(false);\n                                            }\n                                            setLocalitySearchOpen(false);\n                                            setLocalitySearchValue(\"\");\n                                          }}\n                                        >\n                                          <Check\n                                            className={`mr-2 h-4 w-4 ${\n                                              selectedZone === \"rural\" \n                                                ? (locality.id === \"otro\" && showCustomLocality) || \n                                                  (locality.id !== \"otro\" && form.watch(\"customLocalityName\") === locality.name)\n                                                  ? \"opacity-100\" : \"opacity-0\"\n                                                : locality.id === form.watch(\"localityId\") ? \"opacity-100\" : \"opacity-0\"\n                                            }`}\n                                          />\n                                          {locality.name}\n                                        </CommandItem>\n                                      ))}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        {form.formState.errors.localityId && (\n                          <div className=\"text-danger small mt-1\">{form.formState.errors.localityId.message}</div>\n                        )}\n                      </div>\n\n                      {/* Campo manual para \"Otro\" cuando es zona rural */}\n                      {showCustomLocality && (\n                        <div className=\"location-step mb-3\">\n                          <Label htmlFor=\"customLocalityName\">Escriba el nombre de su aldea o caserío *</Label>\n                          <Input\n                            id=\"customLocalityName\"\n                            placeholder=\"Ingrese el nombre de su aldea o caserío...\"\n                            value={form.watch(\"customLocalityName\") || \"\"}\n                            onChange={(e) => {\n                              form.setValue(\"customLocalityName\", e.target.value);\n                            }}\n                            data-testid=\"input-custom-locality\"\n                            className=\"location-select\"\n                          />\n                          {form.formState.errors.customLocalityName && (\n                            <div className=\"text-danger small mt-1\">{form.formState.errors.customLocalityName.message}</div>\n                          )}\n                        </div>\n                      )}\n\n\n                      {/* ====== MAPA e inputs ocultos ====== */}\n                      <div className=\"mt-4 location-map-container\">\n                        <LocationMap\n                          latitude={(() => {\n                            // Prioridad: localidad > municipio > departamento\n                            const selectedLocality = localities.find((l) => l.id === form.watch(\"localityId\"));\n                            if (selectedLocality?.latitude) return selectedLocality.latitude;\n                            \n                            const selectedMuni = municipalities.find((m) => m.id === municipalityId);\n                            if (selectedMuni && (selectedMuni as any).latitude) return (selectedMuni as any).latitude;\n                            \n                            const selectedDept = departments.find((d) => d.id === departmentId);\n                            if (selectedDept && (selectedDept as any).latitude) return (selectedDept as any).latitude;\n                            \n                            return undefined;\n                          })()}\n                          longitude={(() => {\n                            // Prioridad: localidad > municipio > departamento\n                            const selectedLocality = localities.find((l) => l.id === form.watch(\"localityId\"));\n                            if (selectedLocality?.longitude) return selectedLocality.longitude;\n                            \n                            const selectedMuni = municipalities.find((m) => m.id === municipalityId);\n                            if (selectedMuni && (selectedMuni as any).longitude) return (selectedMuni as any).longitude;\n                            \n                            const selectedDept = departments.find((d) => d.id === departmentId);\n                            if (selectedDept && (selectedDept as any).longitude) return (selectedDept as any).longitude;\n                            \n                            return undefined;\n                          })()}\n                          locationName={(() => {\n                            const selectedDept = departments.find((d) => d.id === departmentId);\n                            const selectedMuni = municipalities.find((m) => m.id === municipalityId);\n                            const selectedLocality = localities.find((l) => l.id === form.watch(\"localityId\"));\n                            if (selectedDept && selectedMuni && selectedLocality) {\n                              return `${selectedLocality.name}, ${selectedMuni.name}, ${selectedDept.name}`;\n                            }\n                            return undefined;\n                          })()}\n                          geocode={(() => {\n                            const selectedDept = departments.find((d) => d.id === departmentId);\n                            const selectedMuni = municipalities.find((m) => m.id === municipalityId);\n                            if (selectedDept && selectedMuni) {\n                              return `${selectedDept.geocode}${selectedMuni.geocode}`;\n                            }\n                            return undefined;\n                          })()}\n                          onPick={(lat, lng) => {\n                            // Las coordenadas se manejan internamente por el mapa\n                            console.log(\"Coordenadas seleccionadas:\", lat, lng);\n                          }}\n                        />\n                      </div>\n\n                    </CardContent>\n                  </Card>\n\n                  {/* ============== 3. SECTORES ============== */}\n                  <Card className=\"form-section-card\">\n                    <CardHeader className=\"form-section-header\">\n                      <h3 className=\"form-section-title\">3. Sectores de Interés</h3>\n                      <p className=\"form-section-description\">Seleccione los sectores sobre los que desea consultar</p>\n                    </CardHeader>\n                    <CardContent>\n                      {/* Botones de sectores para seleccionar */}\n                      <div className=\"sectors-grid\">\n                        <p className=\"text-muted small mb-3\">Haga clic en los sectores que le interesen:</p>\n                        <div className=\"row g-2\">\n                          {allSectors.map((sector) => {\n                            const isSelected = selectedSectors.includes(sector.name);\n                            return (\n                              <div key={sector.id} className=\"col-md-6 col-lg-4\">\n                                <Button\n                                  type=\"button\"\n                                  variant={isSelected ? \"default\" : \"outline\"}\n                                  className={`w-100 text-start ${isSelected ? 'bg-primary text-white' : 'bg-light'}`}\n                                  onClick={() => {\n                                    if (isSelected) {\n                                      handleSectorRemove(sector.name);\n                                    } else {\n                                      handleSectorAdd(sector.name);\n                                    }\n                                  }}\n                                  data-testid={`button-sector-${sector.name}`}\n                                >\n                                  {isSelected ? (\n                                    <Check className=\"w-4 h-4 me-2\" />\n                                  ) : (\n                                    <Plus className=\"w-4 h-4 me-2\" />\n                                  )}\n                                  {sector.name}\n                                </Button>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n\n                      {/* Seleccionados */}\n                      <div className=\"mt-3\">\n                        <small className=\"text-muted\">Sectores seleccionados:</small>\n                        <div className=\"mt-2\">\n                          {selectedSectors.map((sector) => (\n                            <Badge key={sector} variant=\"secondary\" className=\"sector-tag me-1 mb-1\" data-testid={`badge-sector-${sector}`}>\n                              {sector}\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-sm btn-link p-0 ms-1\"\n                                onClick={() => handleSectorRemove(sector)}\n                                data-testid={`button-removeSector-${sector}`}\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </button>\n                            </Badge>\n                          ))}\n                          {selectedSectors.length === 0 && (\n                            <span className=\"text-muted small\">Ningún sector seleccionado</span>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* ============== 4. MENSAJE / FOTOS ============== */}\n                  <Card className=\"form-section-card\">\n                    <CardHeader className=\"form-section-header\">\n                      <h3 className=\"form-section-title\">Comparte tu idea</h3>\n                      <p className=\"form-section-description\">Queremos escuchar tu voz para mejorar Honduras</p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"mb-4\">\n                        <Label htmlFor=\"message\">Mensaje *</Label>\n                        <Textarea\n                          id=\"message\"\n                          rows={5}\n                          placeholder=\"Ejemplo: En mi barrio necesitamos mejor alumbrado público.\"\n                          {...form.register(\"message\")}\n                          data-testid=\"textarea-message\"\n                        />\n                        <div className=\"form-text\">Sea específico y constructivo en su mensaje.</div>\n                        {form.formState.errors.message && (\n                          <div className=\"text-danger small\">{form.formState.errors.message.message}</div>\n                        )}\n                      </div>\n\n                      {/* Subida de fotos */}\n                      <div className=\"mb-4\">\n                        <Label className=\"mb-3 d-block\">Fotografías (Opcional)</Label>\n                        <div className=\"photo-upload-section\">\n                          {selectedImages.length < 3 && (\n                            <div className=\"photo-upload-button mb-3\">\n                              <input\n                                type=\"file\"\n                                id=\"photo-input\"\n                                accept=\"image/*\"\n                                multiple\n                                style={{ display: \"none\" }}\n                                onChange={(e) => {\n                                  const files = Array.from(e.target.files || []);\n                                  const remaining = 3 - selectedImages.length;\n                                  setSelectedImages((prev) => [...prev, ...files.slice(0, remaining)]);\n                                  e.target.value = \"\";\n                                }}\n                                data-testid=\"input-photos\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                className=\"w-100 d-flex align-items-center justify-content-center gap-2 py-3\"\n                                onClick={() => document.getElementById(\"photo-input\")?.click()}\n                                data-testid=\"button-uploadPhotos\"\n                              >\n                                <Upload className=\"w-5 h-5\" />\n                                Subir fotografías ({selectedImages.length}/3)\n                              </Button>\n                              <div className=\"form-text mt-1\">Máximo 3 fotografías.</div>\n                            </div>\n                          )}\n\n                          {selectedImages.length > 0 && (\n                            <div className=\"selected-photos-grid row g-3\">\n                              {selectedImages.map((file, index) => (\n                                <div key={index} className=\"col-md-4\">\n                                  <div className=\"photo-preview-card position-relative\">\n                                    <img\n                                      src={URL.createObjectURL(file)}\n                                      alt={`Fotografía ${index + 1}`}\n                                      className=\"img-fluid rounded\"\n                                      style={{ width: \"100%\", height: \"150px\", objectFit: \"cover\" }}\n                                    />\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"destructive\"\n                                      size=\"sm\"\n                                      className=\"position-absolute top-0 end-0 m-1\"\n                                      onClick={() =>\n                                        setSelectedImages((prev) => prev.filter((_, i) => i !== index))\n                                      }\n                                      data-testid={`button-removePhoto-${index}`}\n                                    >\n                                      <Trash2 className=\"w-3 h-3\" />\n                                    </Button>\n                                    <div className=\"photo-info mt-1\">\n                                      <small className=\"text-muted\">\n                                        {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)\n                                      </small>\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Botones */}\n                      <div className=\"form-buttons-container\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"btn-reset-custom\"\n                          onClick={() => {\n                            form.reset();\n                            setSelectedSectors([]);\n                            setPersonType(\"natural\");\n                            setSelectedZone(\"\");\n                            setSelectedImages([]);\n                          }}\n                          data-testid=\"button-reset\"\n                        >\n                          Limpiar Formulario\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          className=\"btn-submit-custom\"\n                          disabled={createConsultationMutation.isPending}\n                          data-testid=\"button-submit\"\n                        >\n                          Enviar\n                          {createConsultationMutation.isPending && (\n                            <Loader2 className=\"w-4 h-4 ms-2 animate-spin\" />\n                          )}\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default ConsultationForm; \n","size_bytes":49393},"client/src/components/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Calendar, \n  Filter, \n  Download, \n  RefreshCw, \n  Eye, \n  ChevronDown, \n  BarChart3, \n  PieChart, \n  MapPin, \n  MessageSquare, \n  User, \n  UserPlus, \n  LogOut, \n  Edit, \n  Trash2, \n  ArrowUpDown,\n  Settings,\n  X,\n  Shield,\n  Key,\n  Zap,\n  Users\n} from \"lucide-react\";\nimport { UserManagementSPE } from \"./user-management-spe\";\n\n// Schema de validación para cambio de contraseña\nconst changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"La contraseña actual es requerida\"),\n  newPassword: z.string().min(6, \"La nueva contraseña debe tener al menos 6 caracteres\"),\n  confirmPassword: z.string().min(6, \"Confirme la nueva contraseña\")\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Las contraseñas no coinciden\",\n  path: [\"confirmPassword\"]\n}).refine((data) => data.newPassword !== data.currentPassword, {\n  message: \"La nueva contraseña debe ser diferente a la actual\",\n  path: [\"newPassword\"]\n});\n\ntype ChangePasswordFormData = z.infer<typeof changePasswordSchema>;\n\nexport function Dashboard() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, logoutMutation } = useAuth();\n  const [filtersOpen, setFiltersOpen] = useState(false);\n  const [showCreatePlanificador, setShowCreatePlanificador] = useState(false);\n  const [showProfile, setShowProfile] = useState(false);\n  const [showChangePassword, setShowChangePassword] = useState(false);\n  const [showSecurityInfo, setShowSecurityInfo] = useState(false);\n  const [showConsultationDetail, setShowConsultationDetail] = useState(false);\n  const [selectedConsultation, setSelectedConsultation] = useState<any>(null);\n  const [sortConfig, setSortConfig] = useState<{key: string, direction: 'asc' | 'desc'} | null>(null);\n  const [filters, setFilters] = useState({\n    dateFrom: \"\",\n    dateTo: \"\",\n    departmentId: \"\",\n    sector: \"\",\n    personType: \"\",\n    status: \"\",\n    offset: 0,\n    limit: 10,\n  });\n\n  // Chart dependencies - Chart.js\n  useEffect(() => {\n    const loadChartJS = async () => {\n      if (typeof window !== 'undefined' && !(window as any).Chart) {\n        const script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\n        script.onload = () => {\n          setTimeout(initializeCharts, 100);\n        };\n        document.head.appendChild(script);\n      } else if ((window as any).Chart) {\n        initializeCharts();\n      }\n    };\n\n    loadChartJS();\n  }, []);\n\n  const initializeCharts = () => {\n    if (!(window as any).Chart) return;\n\n    // Sectors pie chart\n    const sectorsCtx = document.getElementById('sectorsChart') as HTMLCanvasElement;\n    if (sectorsCtx && !(sectorsCtx as any).chart) {\n      (sectorsCtx as any).chart = new (window as any).Chart(sectorsCtx, {\n        type: 'doughnut',\n        data: {\n          labels: (consultationsBySector as any)?.map((d: any) => d.sector) || ['Educación', 'Salud', 'Infraestructura', 'Seguridad', 'Otros'],\n          datasets: [{\n            data: (consultationsBySector as any)?.map((d: any) => d.count) || [25, 20, 18, 15, 22],\n            backgroundColor: ['#1bd1e8', '#17b8cd', '#198754', '#ffc107', '#6c757d']\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom',\n              labels: {\n                usePointStyle: true,\n                padding: 15\n              }\n            }\n          }\n        }\n      });\n    }\n  };\n\n  // Data queries with hierarchical keys\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: consultationsByDate } = useQuery<any>({\n    queryKey: [\"/api/dashboard/consultations-by-date\", 30],\n  });\n\n  const { data: consultationsBySector } = useQuery<any>({\n    queryKey: [\"/api/dashboard/consultations-by-sector\"],\n  });\n\n  const { data: consultationsData, refetch: refetchConsultations } = useQuery<any>({\n    queryKey: [\"/api/consultations\", filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== \"\" && value !== null && value !== undefined) {\n          params.append(key, String(value));\n        }\n      });\n      const response = await fetch(`/api/consultations?${params.toString()}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch consultations');\n      return response.json();\n    }\n  });\n\n  const { data: departments = [] } = useQuery<any[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  const { data: sectors = [] } = useQuery<any[]>({\n    queryKey: [\"/api/sectors\"],\n  });\n\n  // Filter handlers\n  const handleFilterApply = () => {\n    setFilters({\n      ...filters,\n      departmentId: filters.departmentId === \"all\" ? \"\" : filters.departmentId,\n      sector: filters.sector === \"all\" ? \"\" : filters.sector,\n      personType: filters.personType === \"all\" ? \"\" : filters.personType,\n      status: filters.status === \"all\" ? \"\" : filters.status,\n      offset: 0, // Reset pagination\n    });\n  };\n\n  const handleFilterClear = () => {\n    setFilters({\n      dateFrom: \"\",\n      dateTo: \"\",\n      departmentId: \"\",\n      sector: \"\",\n      personType: \"\",\n      status: \"\",\n      offset: 0,\n      limit: 10,\n    });\n  };\n\n  // Manual refresh function\n  const handleRefresh = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/consultations\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/consultations-by-sector\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/consultations-by-date\"] });\n    toast({\n      title: \"Datos actualizados\",\n      description: \"Los datos han sido actualizados exitosamente.\",\n    });\n  };\n\n  // Export functions\n  const downloadFile = async (url: string, filename: string) => {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n      console.error('Download failed:', error);\n      toast({\n        title: \"Error al exportar\",\n        description: \"No se pudo descargar el archivo. Inténtelo de nuevo.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const buildExportUrl = (format: string) => {\n    const baseUrl = `/api/export/consultations/${format}`;\n    const params = new URLSearchParams();\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.departmentId && filters.departmentId !== 'all') params.append('departmentId', filters.departmentId);\n    if (filters.sector && filters.sector !== 'all') params.append('sector', filters.sector);\n    if (filters.personType && filters.personType !== 'all') params.append('personType', filters.personType);\n    if (filters.status && filters.status !== 'all') params.append('status', filters.status);\n    return `${baseUrl}?${params.toString()}`;\n  };\n\n  const handleExportCSV = () => {\n    const url = buildExportUrl('csv');\n    const filename = `consultas_${new Date().toISOString().split('T')[0]}.csv`;\n    downloadFile(url, filename);\n  };\n\n  const handleExportExcel = () => {\n    const url = buildExportUrl('excel');\n    const filename = `consultas_${new Date().toISOString().split('T')[0]}.xlsx`;\n    downloadFile(url, filename);\n  };\n\n  const handleExportPDF = () => {\n    const url = buildExportUrl('pdf');\n    const filename = `consultas_${new Date().toISOString().split('T')[0]}.pdf`;\n    downloadFile(url, filename);\n  };\n\n  // Navbar actions\n  const handleCreatePlanificador = () => {\n    navigate(\"/admin/users\");\n  };\n\n  const handleProfile = () => {\n    setShowProfile(true);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Sorting functions\n  const handleSort = (key: string) => {\n    let direction: 'asc' | 'desc' = 'asc';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  // Apply sorting to consultations data\n  const sortedConsultations = consultationsData?.consultations ? \n    [...consultationsData.consultations].sort((a: any, b: any) => {\n      if (!sortConfig) return 0;\n      \n      const { key, direction } = sortConfig;\n      let aValue = a[key];\n      let bValue = b[key];\n      \n      // Handle specific field types\n      if (key === 'createdAt') {\n        aValue = new Date(aValue).getTime();\n        bValue = new Date(bValue).getTime();\n      } else if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = bValue.toLowerCase();\n      }\n      \n      if (aValue < bValue) return direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return 0;\n    }) : [];\n\n  // View consultation detail\n  const handleViewDetail = (consultation: any) => {\n    setSelectedConsultation(consultation);\n    setShowConsultationDetail(true);\n  };\n\n  // Delete consultation mutation\n  const deleteConsultationMutation = useMutation({\n    mutationFn: async (consultationId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/consultations/${consultationId}`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\"] });\n      toast({\n        title: \"Consulta eliminada\",\n        description: \"La consulta ha sido eliminada exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al eliminar la consulta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ consultationId, status }: { consultationId: string, status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/consultations/${consultationId}/status`, { status });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/consultations\"] });\n      toast({\n        title: \"Estado actualizado\",\n        description: \"El estado de la consulta ha sido actualizado exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al actualizar el estado\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Change password mutation\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordFormData) => {\n      const response = await apiRequest(\"PUT\", `/api/profile/password`, {\n        currentPassword: data.currentPassword,\n        newPassword: data.newPassword\n      });\n      return response;\n    },\n    onSuccess: (response: any) => {\n      toast({\n        title: \"Contraseña actualizada\",\n        description: \"Tu contraseña ha sido actualizada exitosamente. Por seguridad, debes iniciar sesión nuevamente.\",\n      });\n      // Delay closing the modal to ensure toast is visible\n      setTimeout(() => {\n        setShowChangePassword(false);\n        changePasswordForm.reset();\n        \n        // If backend requires re-authentication, redirect to login\n        if (response?.requiresReauth) {\n          setTimeout(() => {\n            window.location.href = \"/login\";\n          }, 2000); // Give user time to read the toast\n        }\n      }, 100);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al cambiar la contraseña\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Form para cambio de contraseña\n  const changePasswordForm = useForm<ChangePasswordFormData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Funciones de manejo\n  const handleChangePassword = () => {\n    setShowProfile(false);\n    setShowChangePassword(true);\n  };\n\n  const handleVerifySecurity = () => {\n    setShowProfile(false);\n    setShowSecurityInfo(true);\n  };\n\n  const onSubmitChangePassword = (data: ChangePasswordFormData) => {\n    changePasswordMutation.mutate(data);\n  };\n\n  // Utility functions\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-HN');\n  };\n\n  const getPersonTypeBadgeVariant = (type: string) => {\n    switch (type) {\n      case 'natural': return 'default';\n      case 'juridica': return 'secondary';\n      case 'anonimo': return 'outline';\n      default: return 'default';\n    }\n  };\n\n  const getPersonTypeLabel = (type: string) => {\n    switch (type) {\n      case 'natural': return 'Natural';\n      case 'juridica': return 'Jurídica';\n      case 'anonimo': return 'Anónimo';\n      default: return type;\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'active': return 'default';\n      case 'archived': return 'secondary';\n      default: return 'default';\n    }\n  };\n\n  const getPersonalData = (consultation: any) => {\n    if (consultation.personType === 'natural') {\n      return `${consultation.firstName || ''} ${consultation.lastName || ''}`.trim() || consultation.identity || 'Sin datos';\n    } else if (consultation.personType === 'juridica') {\n      return consultation.companyName || consultation.rtn || 'Sin datos';\n    } else {\n      return 'Anónimo';\n    }\n  };\n\n  const getLocationString = (consultation: any) => {\n    const parts = [];\n    if (consultation.department?.name) parts.push(consultation.department.name);\n    if (consultation.municipality?.name) parts.push(consultation.municipality.name);\n    if (consultation.locality?.name) parts.push(consultation.locality.name);\n    return parts.join(', ') || consultation.geocode || 'Sin ubicación';\n  };\n\n  return (\n    <div className=\"min-h-screen\" style={{ backgroundColor: '#f5f7fa' }}>\n      {/* Navbar Superior - Responsive */}\n      <div \n        className=\"shadow-sm sticky top-0 border-0 z-10\" \n        style={{ backgroundColor: '#1bd1e8' }}\n      >\n        <div className=\"container mx-auto px-2 sm:px-4\">\n          <div className=\"flex justify-between items-center py-2 sm:py-3\">\n            <div className=\"flex items-center\">\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white mr-2 sm:mr-3\" />\n              <h4 className=\"mb-0 font-bold text-white text-sm sm:text-lg\">Panel Principal</h4>\n            </div>\n            \n            <div className=\"flex items-center gap-1 sm:gap-3\">\n              <Button \n                variant=\"outline\" \n                className=\"border-white text-white hover:bg-white hover:text-slate-800 bg-transparent\" \n                size=\"sm\" \n                onClick={handleRefresh}\n                data-testid=\"button-refresh\"\n              >\n                <RefreshCw className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                <span className=\"hidden sm:inline ml-1\">Actualizar</span>\n              </Button>\n\n              {/* User Menu */}\n              <div className=\"flex items-center text-white\">\n                <span className=\"font-medium mr-1 text-sm sm:text-base hidden sm:inline\">{user?.username}</span>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-white hover:bg-white hover:bg-opacity-20 p-1\"\n                      data-testid=\"button-user-menu\"\n                    >\n                      <User className=\"w-4 h-4 sm:hidden\" />\n                      <ChevronDown className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem \n                      onClick={handleCreatePlanificador}\n                      data-testid=\"button-create-planificador\"\n                    >\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Crear Usuario\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={handleProfile}\n                      data-testid=\"button-profile\"\n                    >\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Mi Perfil\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={handleLogout}\n                      data-testid=\"button-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Cerrar Sesión\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content - Responsive */}\n      <div className=\"container mx-auto px-2 sm:px-4 py-2 sm:py-4\">\n        <div className=\"grid grid-cols-1 gap-2 sm:gap-4\">\n          <div className=\"w-full\">\n\n            {/* Data Table */}\n            <Card className=\"border-0 shadow-sm rounded-lg\">\n              <CardHeader style={{ backgroundColor: '#fff' }} className=\"border-0 rounded-t-lg px-3 sm:px-6 py-3 sm:py-4\">\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-2 sm:mb-4 gap-2 sm:gap-0\">\n                  <div>\n                    <CardTitle className=\"mb-0 flex items-center text-lg sm:text-xl\">\n                      <BarChart3 className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n                      Consultas Ciudadanas\n                    </CardTitle>\n                  </div>\n                </div>\n                \n                {/* Action Buttons - Responsive */}\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 sm:mb-4 gap-2 sm:gap-0\">\n                  <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"outline\"\n                          size=\"sm\" \n                          data-testid=\"button-export-table\"\n                          className=\"border text-gray-600 hover:bg-gray-50 flex-1 sm:flex-none\"\n                        >\n                          <Download className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                          <span className=\"hidden sm:inline\">Exportar</span>\n                          <span className=\"sm:hidden\">Exp.</span>\n                          <ChevronDown className=\"w-3 h-3 sm:w-4 sm:h-4 ml-1\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent>\n                        <DropdownMenuItem \n                          onClick={() => handleExportCSV()}\n                          data-testid=\"button-export-csv\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />CSV\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleExportExcel()}\n                          data-testid=\"button-export-excel\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />Excel\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleExportPDF()}\n                          data-testid=\"button-export-pdf\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />PDF\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                  \n                  <div className=\"w-full sm:w-auto\">\n                    <Collapsible open={filtersOpen} onOpenChange={setFiltersOpen}>\n                      <CollapsibleTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          data-testid=\"button-toggleFilters\"\n                          className=\"border-2 w-full sm:w-auto\"\n                          style={{ borderColor: '#1bd1e8', color: '#1bd1e8' }}\n                        >\n                          <Filter className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                          Filtros\n                          <ChevronDown className=\"w-3 h-3 sm:w-4 sm:h-4 ml-1\" />\n                        </Button>\n                      </CollapsibleTrigger>\n                      <CollapsibleContent className=\"mt-3\">\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-3\">\n                          <div>\n                            <Label className=\"text-sm font-medium\">Fecha Desde</Label>\n                            <Input\n                              type=\"date\"\n                              value={filters.dateFrom}\n                              onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}\n                              data-testid=\"input-dateFrom\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-sm font-medium\">Fecha Hasta</Label>\n                            <Input\n                              type=\"date\"\n                              value={filters.dateTo}\n                              onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}\n                              data-testid=\"input-dateTo\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-sm font-medium\">Departamento</Label>\n                            <Select\n                              value={filters.departmentId}\n                              onValueChange={(value) => setFilters({ ...filters, departmentId: value })}\n                            >\n                              <SelectTrigger data-testid=\"select-departmentFilter\">\n                                <SelectValue placeholder=\"Todos\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"all\">Todos</SelectItem>\n                                {departments.map((dept) => (\n                                  <SelectItem key={dept.id} value={dept.id}>\n                                    {dept.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-sm font-medium\">Sector</Label>\n                            <Select\n                              value={filters.sector}\n                              onValueChange={(value) => setFilters({ ...filters, sector: value })}\n                            >\n                              <SelectTrigger data-testid=\"select-sectorFilter\">\n                                <SelectValue placeholder=\"Todos\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"all\">Todos</SelectItem>\n                                {sectors.map((sector) => (\n                                  <SelectItem key={sector.id} value={sector.name}>\n                                    {sector.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-sm font-medium\">Tipo Persona</Label>\n                            <Select\n                              value={filters.personType}\n                              onValueChange={(value) => setFilters({ ...filters, personType: value })}\n                            >\n                              <SelectTrigger data-testid=\"select-personTypeFilter\">\n                                <SelectValue placeholder=\"Todos\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"all\">Todos</SelectItem>\n                                <SelectItem value=\"natural\">Natural</SelectItem>\n                                <SelectItem value=\"juridica\">Jurídica</SelectItem>\n                                <SelectItem value=\"anonimo\">Anónimo</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-sm font-medium\">Estado</Label>\n                            <Select\n                              value={filters.status}\n                              onValueChange={(value) => setFilters({ ...filters, status: value })}\n                            >\n                              <SelectTrigger data-testid=\"select-statusFilter\">\n                                <SelectValue placeholder=\"Todos\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"all\">Todos</SelectItem>\n                                <SelectItem value=\"active\">Activa</SelectItem>\n                                <SelectItem value=\"archived\">Archivada</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        <div className=\"flex flex-col sm:flex-row gap-2 mt-3\">\n                          <Button \n                            size=\"sm\" \n                            onClick={handleFilterApply}\n                            data-testid=\"button-applyFilters\"\n                            style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                            className=\"w-full sm:w-auto\"\n                          >\n                            <Filter className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                            <span className=\"hidden sm:inline\">Aplicar Filtros</span>\n                            <span className=\"sm:hidden\">Aplicar</span>\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={handleFilterClear}\n                            data-testid=\"button-clearFilters\"\n                            className=\"w-full sm:w-auto\"\n                          >\n                            <span className=\"hidden sm:inline\">Limpiar</span>\n                            <span className=\"sm:hidden\">Limpiar</span>\n                          </Button>\n                        </div>\n                      </CollapsibleContent>\n                    </Collapsible>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {/* Desktop Table */}\n                <div className=\"overflow-x-auto hidden lg:block\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"font-bold\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleSort('id')}\n                            className=\"p-0 h-auto font-bold\"\n                          >\n                            ID <ArrowUpDown className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className=\"font-bold\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleSort('createdAt')}\n                            className=\"p-0 h-auto font-bold\"\n                          >\n                            Fecha <ArrowUpDown className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className=\"font-bold\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleSort('personType')}\n                            className=\"p-0 h-auto font-bold\"\n                          >\n                            Tipo Persona <ArrowUpDown className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className=\"font-bold\">Datos Personales</TableHead>\n                        <TableHead className=\"font-bold\">Ubicación</TableHead>\n                        <TableHead className=\"font-bold\">Sectores</TableHead>\n                        <TableHead className=\"font-bold\">Mensaje</TableHead>\n                        <TableHead className=\"font-bold\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleSort('status')}\n                            className=\"p-0 h-auto font-bold\"\n                          >\n                            Estado <ArrowUpDown className=\"w-3 h-3 ml-1\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className=\"font-bold\">Acciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {sortedConsultations.length > 0 ? sortedConsultations.map((consultation: any) => (\n                        <TableRow key={consultation.id}>\n                          <TableCell>\n                            <code className=\"text-sm\">{consultation.id.slice(0, 8)}...</code>\n                          </TableCell>\n                          <TableCell>{formatDate(consultation.createdAt.toString())}</TableCell>\n                          <TableCell>\n                            <Badge variant={getPersonTypeBadgeVariant(consultation.personType)}>\n                              {getPersonTypeLabel(consultation.personType)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">{getPersonalData(consultation)}</span>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">{getLocationString(consultation)}</span>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {consultation.selectedSectors.slice(0, 2).map((sector: any, index: number) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {sector}\n                                </Badge>\n                              ))}\n                              {consultation.selectedSectors.length > 2 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{consultation.selectedSectors.length - 2}\n                                </Badge>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm\">\n                              {consultation.message.length > 50 \n                                ? `${consultation.message.substring(0, 50)}...` \n                                : consultation.message}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getStatusBadgeVariant(consultation.status)}>\n                              {consultation.status === 'active' ? 'Activa' : 'Archivada'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-1\">\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={() => handleViewDetail(consultation)}\n                                data-testid={`button-view-${consultation.id}`}\n                                title=\"Ver detalles\"\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={() => updateStatusMutation.mutate({\n                                  consultationId: consultation.id,\n                                  status: consultation.status === 'active' ? 'archived' : 'active'\n                                })}\n                                data-testid={`button-edit-${consultation.id}`}\n                                title={consultation.status === 'active' ? 'Archivar' : 'Activar'}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                onClick={() => deleteConsultationMutation.mutate(consultation.id)}\n                                data-testid={`button-delete-${consultation.id}`}\n                                className=\"text-red-600 hover:bg-red-50 border-red-200\"\n                                title=\"Eliminar\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      )) : (\n                        <>\n                          {/* Filas vacías para mantener la estructura visible */}\n                          {[...Array(5)].map((_, index) => (\n                            <TableRow key={`empty-${index}`} className=\"h-16\">\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                              <TableCell className=\"text-center text-gray-300\">-</TableCell>\n                            </TableRow>\n                          ))}\n                          {/* Mensaje de no hay datos en una fila separada */}\n                          <TableRow>\n                            <TableCell colSpan={9} className=\"text-center text-gray-500 py-4 bg-gray-50 border-t-2 border-gray-200\">\n                              <div className=\"flex flex-col items-center justify-center\">\n                                <div className=\"mb-2\">\n                                  <BarChart3 className=\"w-8 h-8 text-gray-400\" />\n                                </div>\n                                <p className=\"font-medium text-lg mb-1\">No hay consultas disponibles</p>\n                                <p className=\"text-sm text-gray-400\">Los datos aparecerán aquí cuando estén disponibles</p>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        </>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n\n                {/* Mobile Cards - Responsive */}\n                <div className=\"lg:hidden p-2 sm:p-3\">\n                  {sortedConsultations.length > 0 ? sortedConsultations.map((consultation: any) => (\n                    <Card key={consultation.id} className=\"mb-2 sm:mb-3 border rounded-lg\">\n                      <CardContent className=\"p-3 sm:p-4\">\n                        <div className=\"flex flex-col xs:flex-row xs:justify-between xs:items-start mb-2 gap-2 xs:gap-0\">\n                          <code className=\"text-xs sm:text-sm\">{consultation.id.slice(0, 8)}...</code>\n                          <Badge variant={getStatusBadgeVariant(consultation.status)} className=\"self-start xs:self-auto\">\n                            {consultation.status === 'active' ? 'Activa' : 'Archivada'}\n                          </Badge>\n                        </div>\n                        <div className=\"mb-2 text-sm\">\n                          <strong className=\"text-xs sm:text-sm\">Fecha:</strong> \n                          <span className=\"text-xs sm:text-sm ml-1\">{formatDate(consultation.createdAt.toString())}</span>\n                        </div>\n                        <div className=\"mb-2 text-sm\">\n                          <strong className=\"text-xs sm:text-sm\">Tipo:</strong> \n                          <Badge variant={getPersonTypeBadgeVariant(consultation.personType)} className=\"ml-2 text-xs\">\n                            {getPersonTypeLabel(consultation.personType)}\n                          </Badge>\n                        </div>\n                        <div className=\"mb-2 text-sm\">\n                          <strong className=\"text-xs sm:text-sm\">Datos:</strong> \n                          <span className=\"text-xs sm:text-sm ml-1 break-words\">{getPersonalData(consultation)}</span>\n                        </div>\n                        <div className=\"mb-2 text-sm\">\n                          <strong className=\"text-xs sm:text-sm\">Ubicación:</strong> \n                          <span className=\"text-xs sm:text-sm ml-1 break-words\">{getLocationString(consultation)}</span>\n                        </div>\n                        <div className=\"mb-2\">\n                          <strong className=\"text-xs sm:text-sm\">Sectores:</strong>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {consultation.selectedSectors.slice(0, 2).map((sector: any, index: number) => (\n                              <Badge key={index} variant=\"secondary\" className=\"text-[10px] sm:text-xs\">\n                                {sector.length > 15 ? `${sector.substring(0, 15)}...` : sector}\n                              </Badge>\n                            ))}\n                            {consultation.selectedSectors.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-[10px] sm:text-xs\">\n                                +{consultation.selectedSectors.length - 2}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"mb-3\">\n                          <strong className=\"text-xs sm:text-sm\">Mensaje:</strong>\n                          <p className=\"mb-0 text-xs sm:text-sm mt-1 break-words\">\n                            {consultation.message.length > 80 \n                              ? `${consultation.message.substring(0, 80)}...` \n                              : consultation.message}\n                          </p>\n                        </div>\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => handleViewDetail(consultation)}\n                            data-testid={`button-view-mobile-${consultation.id}`}\n                            className=\"text-xs sm:text-sm w-full sm:w-auto\"\n                          >\n                            <Eye className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />Ver\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => updateStatusMutation.mutate({\n                              consultationId: consultation.id,\n                              status: consultation.status === 'active' ? 'archived' : 'active'\n                            })}\n                            data-testid={`button-edit-mobile-${consultation.id}`}\n                            className=\"text-xs sm:text-sm w-full sm:w-auto\"\n                          >\n                            <Edit className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                            <span className=\"hidden xs:inline\">{consultation.status === 'active' ? 'Archivar' : 'Activar'}</span>\n                            <span className=\"xs:hidden\">{consultation.status === 'active' ? 'Arch.' : 'Act.'}</span>\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => deleteConsultationMutation.mutate(consultation.id)}\n                            data-testid={`button-delete-mobile-${consultation.id}`}\n                            className=\"text-red-600 hover:bg-red-50 border-red-200 text-xs sm:text-sm w-full sm:w-auto\"\n                          >\n                            <Trash2 className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                            <span className=\"hidden xs:inline\">Eliminar</span>\n                            <span className=\"xs:hidden\">Elim.</span>\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )) : (\n                    <div className=\"text-center text-gray-500 py-8\">\n                      <div className=\"flex flex-col items-center justify-center\">\n                        <div className=\"mb-2\">\n                          <BarChart3 className=\"w-12 h-12 text-gray-400\" />\n                        </div>\n                        <p className=\"text-base font-medium mb-1\">No hay consultas disponibles</p>\n                        <p className=\"text-sm text-gray-400\">Los datos aparecerán aquí cuando estén disponibles</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {/* Pagination - Responsive */}\n                {consultationsData?.total > 0 && (\n                  <div className=\"flex flex-col sm:flex-row justify-between items-center p-3 border-t gap-2 sm:gap-0\">\n                    <small className=\"text-gray-600 text-xs sm:text-sm text-center sm:text-left\">\n                      <span className=\"hidden sm:inline\">\n                        Mostrando {filters.offset + 1}-{Math.min(filters.offset + filters.limit, consultationsData.total)} de {consultationsData.total} registros\n                      </span>\n                      <span className=\"sm:hidden\">\n                        {filters.offset + 1}-{Math.min(filters.offset + filters.limit, consultationsData.total)} de {consultationsData.total}\n                      </span>\n                    </small>\n                    <nav>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          disabled={filters.offset === 0}\n                          onClick={() => setFilters({ ...filters, offset: Math.max(0, filters.offset - filters.limit) })}\n                          data-testid=\"button-previousPage\"\n                          className=\"text-xs sm:text-sm\"\n                        >\n                          <span className=\"hidden sm:inline\">Anterior</span>\n                          <span className=\"sm:hidden\">Ant.</span>\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          disabled={filters.offset + filters.limit >= consultationsData.total}\n                          onClick={() => setFilters({ ...filters, offset: filters.offset + filters.limit })}\n                          data-testid=\"button-nextPage\"\n                          className=\"text-xs sm:text-sm\"\n                        >\n                          <span className=\"hidden sm:inline\">Siguiente</span>\n                          <span className=\"sm:hidden\">Sig.</span>\n                        </Button>\n                      </div>\n                    </nav>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de Detalle de Consulta - Responsive */}\n      <Dialog open={showConsultationDetail} onOpenChange={setShowConsultationDetail}>\n        <DialogContent className=\"max-w-[95vw] sm:max-w-2xl lg:max-w-4xl max-h-[95vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-sm sm:text-base\">\n              <MessageSquare className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n              Detalle de Consulta Ciudadana\n            </DialogTitle>\n            <DialogDescription className=\"text-xs sm:text-sm\">\n              Información completa de la consulta seleccionada\n            </DialogDescription>\n          </DialogHeader>\n          {selectedConsultation && (\n            <div className=\"space-y-3 sm:space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                <div>\n                  <Label className=\"font-semibold\">ID de Consulta</Label>\n                  <p className=\"text-sm\"><code>{selectedConsultation.id}</code></p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Fecha de Creación</Label>\n                  <p className=\"text-sm\">{formatDate(selectedConsultation.createdAt.toString())}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Tipo de Persona</Label>\n                  <div>\n                    <Badge variant={getPersonTypeBadgeVariant(selectedConsultation.personType)}>\n                      {getPersonTypeLabel(selectedConsultation.personType)}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Estado</Label>\n                  <div>\n                    <Badge variant={getStatusBadgeVariant(selectedConsultation.status)}>\n                      {selectedConsultation.status === 'active' ? 'Activa' : 'Archivada'}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Datos Personales */}\n              <div>\n                <Label className=\"font-semibold text-sm sm:text-lg\">Datos Personales</Label>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 mt-2\">\n                  {selectedConsultation.personType === 'natural' && (\n                    <>\n                      <div>\n                        <Label className=\"text-sm\">Nombre</Label>\n                        <p className=\"text-sm\">{selectedConsultation.firstName || 'No especificado'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Apellido</Label>\n                        <p className=\"text-sm\">{selectedConsultation.lastName || 'No especificado'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Identidad</Label>\n                        <p className=\"text-sm\">{selectedConsultation.identity || 'No especificado'}</p>\n                      </div>\n                    </>\n                  )}\n                  {selectedConsultation.personType === 'juridica' && (\n                    <>\n                      <div>\n                        <Label className=\"text-sm\">Nombre de la Empresa</Label>\n                        <p className=\"text-sm\">{selectedConsultation.companyName || 'No especificado'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">RTN</Label>\n                        <p className=\"text-sm\">{selectedConsultation.rtn || 'No especificado'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Representante Legal</Label>\n                        <p className=\"text-sm\">{selectedConsultation.legalRepresentative || 'No especificado'}</p>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm\">Contacto de la Empresa</Label>\n                        <p className=\"text-sm\">{selectedConsultation.companyContact || 'No especificado'}</p>\n                      </div>\n                    </>\n                  )}\n                  <div>\n                    <Label className=\"text-sm\">Email</Label>\n                    <p className=\"text-sm\">{selectedConsultation.email || 'No especificado'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm\">Teléfono Móvil</Label>\n                    <p className=\"text-sm\">{selectedConsultation.mobile || 'No especificado'}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Ubicación */}\n              <div>\n                <Label className=\"font-semibold text-sm sm:text-lg\">Ubicación</Label>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 mt-2\">\n                  <div>\n                    <Label className=\"text-xs sm:text-sm\">Ubicación Completa</Label>\n                    <p className=\"text-xs sm:text-sm break-words\">{getLocationString(selectedConsultation)}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs sm:text-sm\">Geocódigo</Label>\n                    <p className=\"text-xs sm:text-sm break-words\">{selectedConsultation.geocode}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Sectores */}\n              <div>\n                <Label className=\"font-semibold text-sm sm:text-lg\">Sectores Seleccionados</Label>\n                <div className=\"flex flex-wrap gap-1 sm:gap-2 mt-2\">\n                  {selectedConsultation.selectedSectors.map((sector: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs sm:text-sm\">\n                      {sector}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Mensaje */}\n              <div>\n                <Label className=\"font-semibold text-sm sm:text-lg\">Mensaje Ciudadano</Label>\n                <div className=\"border rounded p-2 sm:p-3 mt-2\" style={{ backgroundColor: '#f5f7fa' }}>\n                  <p className=\"text-xs sm:text-sm mb-0 break-words\">{selectedConsultation.message}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter className=\"flex-col sm:flex-row gap-2 sm:gap-0\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowConsultationDetail(false)}\n              className=\"w-full sm:w-auto text-xs sm:text-sm\"\n            >\n              Cerrar\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Crear Planificador - Responsive */}\n      <Dialog open={showCreatePlanificador} onOpenChange={setShowCreatePlanificador}>\n        <DialogContent className=\"max-w-[95vw] sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-sm sm:text-base\">Crear Usuario Planificador</DialogTitle>\n            <DialogDescription className=\"text-xs sm:text-sm\">\n              Esta funcionalidad será implementada próximamente.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter className=\"flex-col sm:flex-row gap-2 sm:gap-0\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowCreatePlanificador(false)}\n              className=\"w-full sm:w-auto text-xs sm:text-sm\"\n            >\n              Cerrar\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Perfil - Responsive */}\n      <Dialog open={showProfile} onOpenChange={setShowProfile}>\n        <DialogContent className=\"max-w-[95vw] sm:max-w-2xl max-h-[95vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-sm sm:text-base\">\n              <User className=\"w-4 h-4 sm:w-6 sm:h-6 mr-2\" style={{ color: '#1bd1e8' }} />\n              Mi Perfil de Usuario\n            </DialogTitle>\n            <DialogDescription className=\"text-xs sm:text-sm\">\n              Información de tu cuenta y opciones de seguridad\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 sm:space-y-6\">\n            {/* Avatar y Info Principal */}\n            <div className=\"flex items-center space-x-3 sm:space-x-4 p-3 sm:p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border\">\n              <div \n                className=\"w-12 h-12 sm:w-16 sm:h-16 rounded-full flex items-center justify-center text-white font-bold text-lg sm:text-xl\"\n                style={{ backgroundColor: '#1bd1e8' }}\n              >\n                {user?.username?.charAt(0).toUpperCase()}\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-base sm:text-lg\">{user?.username}</h3>\n                <Badge \n                  variant={user?.role === 'super_admin' ? 'destructive' : 'default'}\n                  className=\"mt-1\"\n                >\n                  {user?.role === 'super_admin' ? 'Super Administrador' : \n                   user?.role === 'admin' ? 'Administrador' : \n                   user?.role === 'planificador' ? 'Planificador' : 'Ciudadano'}\n                </Badge>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Miembro desde {user?.createdAt ? formatDate(user.createdAt.toString()) : 'Fecha no disponible'}\n                </p>\n              </div>\n            </div>\n\n\n            {/* Seguridad */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold flex items-center\">\n                <Shield className=\"w-4 h-4 mr-2\" style={{ color: '#1bd1e8' }} />\n                Seguridad\n              </h4>\n              <div className=\"space-y-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full justify-start\"\n                  onClick={handleChangePassword}\n                  data-testid=\"button-change-password\"\n                >\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  Cambiar Contraseña\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"w-full justify-start\"\n                  onClick={handleVerifySecurity}\n                  data-testid=\"button-verify-security\"\n                >\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Verificar Seguridad\n                </Button>\n              </div>\n            </div>\n\n          </div>\n          \n          <DialogFooter className=\"flex-col sm:flex-row gap-2 sm:gap-0\">\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowProfile(false)}\n              className=\"w-full sm:w-auto text-xs sm:text-sm\"\n            >\n              Cerrar\n            </Button>\n            <Button \n              onClick={() => {\n                toast({\n                  title: \"¡Perfil actualizado!\",\n                  description: \"Tu información de perfil se mantiene sincronizada.\",\n                });\n                setShowProfile(false);\n              }}\n              style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n              className=\"w-full sm:w-auto text-xs sm:text-sm\"\n            >\n              Actualizar Perfil\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Cambio de Contraseña - Responsive */}\n      <Dialog open={showChangePassword} onOpenChange={setShowChangePassword}>\n        <DialogContent className=\"max-w-[95vw] sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-sm sm:text-base\">\n              <Key className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n              Cambiar Contraseña\n            </DialogTitle>\n            <DialogDescription className=\"text-xs sm:text-sm\">\n              Actualiza tu contraseña para mantener tu cuenta segura\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...changePasswordForm}>\n            <form onSubmit={changePasswordForm.handleSubmit(onSubmitChangePassword)} className=\"space-y-4\">\n              <FormField\n                control={changePasswordForm.control}\n                name=\"currentPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contraseña Actual</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Ingresa tu contraseña actual\"\n                        data-testid=\"input-current-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={changePasswordForm.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nueva Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Ingresa tu nueva contraseña\"\n                        data-testid=\"input-new-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={changePasswordForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirmar Nueva Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirma tu nueva contraseña\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowChangePassword(false);\n                    changePasswordForm.reset();\n                  }}\n                  data-testid=\"button-cancel-password\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={changePasswordMutation.isPending}\n                  style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                  data-testid=\"button-submit-password\"\n                >\n                  {changePasswordMutation.isPending ? \"Cambiando...\" : \"Cambiar Contraseña\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Información de Seguridad */}\n      <Dialog open={showSecurityInfo} onOpenChange={setShowSecurityInfo}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Shield className=\"w-5 h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n              Información de Seguridad\n            </DialogTitle>\n            <DialogDescription>\n              Estado actual de la seguridad de tu cuenta\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Estado de Sesión */}\n            <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full mr-3\"></div>\n                <div>\n                  <h4 className=\"font-semibold text-green-800\">Sesión Activa</h4>\n                  <p className=\"text-sm text-green-600\">Tu sesión está protegida y encriptada</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Información de Cuenta */}\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Usuario:</span>\n                <span className=\"text-sm\">{user?.username}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Rol:</span>\n                <Badge variant={user?.role === 'super_admin' ? 'destructive' : 'default'} className=\"text-xs\">\n                  {user?.role === 'super_admin' ? 'Super Admin' : \n                   user?.role === 'admin' ? 'Admin' : \n                   user?.role === 'planificador' ? 'Planificador' : 'Ciudadano'}\n                </Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Estado de Cuenta:</span>\n                <Badge variant=\"default\" className=\"text-xs\">Activa</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Última Actividad:</span>\n                <span className=\"text-sm\">Ahora mismo</span>\n              </div>\n            </div>\n\n            {/* Características de Seguridad */}\n            <div className=\"border-t pt-3\">\n              <h4 className=\"font-semibold mb-2 text-sm\">Características de Seguridad:</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center text-sm\">\n                  <Shield className=\"w-4 h-4 mr-2 text-green-600\" />\n                  <span>Contraseña encriptada con hash seguro</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <Shield className=\"w-4 h-4 mr-2 text-green-600\" />\n                  <span>Sesión con cookies HTTP-only</span>\n                </div>\n                <div className=\"flex items-center text-sm\">\n                  <Shield className=\"w-4 h-4 mr-2 text-green-600\" />\n                  <span>Conexión HTTPS segura</span>\n                </div>\n                {user?.username === 'SPE' && (\n                  <div className=\"flex items-center text-sm\">\n                    <Shield className=\"w-4 h-4 mr-2 text-blue-600\" />\n                    <span className=\"text-blue-600 font-medium\">Cuenta protegida del sistema</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => setShowSecurityInfo(false)}\n              data-testid=\"button-close-security\"\n            >\n              Cerrar\n            </Button>\n            <Button \n              onClick={() => {\n                toast({\n                  title: \"Seguridad verificada\",\n                  description: \"Tu cuenta tiene todas las medidas de seguridad activas.\",\n                });\n                setShowSecurityInfo(false);\n              }}\n              style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n              data-testid=\"button-confirm-security\"\n            >\n              Todo está seguro\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":67474},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport function Navbar() {\n  const { user, logoutMutation } = useAuth();\n  const [location] = useLocation();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-white shadow-sm\">\n      <div className=\"container\">\n        <Link href=\"/\" className=\"navbar-brand text-primary fw-bold\" data-testid=\"navbar-brand\">\n          <i className=\"bi bi-chat-square-text-fill me-2\"></i>\n          Construyamos una Honduras Próspera Juntos\n        </Link>\n        \n        <div className=\"d-flex ms-auto\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link \n                href=\"/\" \n                className={`nav-link ${isActive('/') ? 'active' : ''}`}\n                data-testid=\"nav-consultation\"\n              >\n                <i className=\"bi bi-pencil-square me-1\"></i>Consulta\n              </Link>\n            </li>\n            \n            {user && (user.role === 'admin' || user.role === 'super_admin') && (\n              <li className=\"nav-item\">\n                <Link \n                  href=\"/admin\" \n                  className={`nav-link ${isActive('/admin') ? 'active' : ''}`}\n                  data-testid=\"nav-admin-dashboard\"\n                >\n                  <i className=\"bi bi-graph-up me-1\"></i>Dashboard\n                </Link>\n              </li>\n            )}\n            \n            {user && user.role === 'super_admin' && (\n              <li className=\"nav-item\">\n                <Link \n                  href=\"/admin\" \n                  className={`nav-link ${isActive('/admin') ? 'active' : ''}`}\n                  data-testid=\"nav-admin\"\n                >\n                  <i className=\"bi bi-people-fill me-1\"></i>Administración\n                </Link>\n              </li>\n            )}\n            \n            {user ? (\n              <li className=\"nav-item\">\n                <button \n                  className=\"nav-link btn btn-link\" \n                  onClick={handleLogout}\n                  data-testid=\"nav-logout\"\n                >\n                  <i className=\"bi bi-box-arrow-right me-1\"></i>Salir\n                </button>\n              </li>\n            ) : null}\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2448},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n};\n\ntype LoginData = {\n  username: string;\n  password: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"¡Bienvenido!\",\n        description: \"Has iniciado sesión exitosamente.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error de inicio de sesión\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Sesión cerrada\",\n        description: \"Has cerrado sesión exitosamente.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error al cerrar sesión\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2483},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  requiredRole,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n  requiredRole?: string[];\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  if (requiredRole && !requiredRole.includes(user.role)) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-destructive mb-2\">Acceso Denegado</h1>\n            <p className=\"text-muted-foreground\">No tienes permisos para acceder a esta página.</p>\n          </div>\n        </div>\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":1210},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"returnNull\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1388},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2, ShieldCheck, MessageSquare, BarChart3, Eye, EyeOff } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"El usuario es requerido\"),\n  password: z.string().min(1, \"La contraseña es requerida\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/admin\" />;\n  }\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-light\">\n      <div className=\"container\">\n        <div className=\"row min-vh-100\">\n          {/* Left Column - Auth Forms */}\n          <div className=\"col-lg-6 d-flex align-items-center\">\n            <div className=\"w-100\">\n\n              <Card className=\"mx-auto\" style={{ maxWidth: \"400px\" }}>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    <ShieldCheck className=\"w-6 h-6 me-2 text-primary\" />\n                    Acceso Administrativo\n                  </CardTitle>\n                  <p className=\"text-center text-muted mb-0 small\">Acceso exclusivo para administradores autorizados</p>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <div className=\"mb-3\">\n                      <Label htmlFor=\"loginUsername\">Usuario</Label>\n                      <Input\n                        id=\"loginUsername\"\n                        placeholder=\"Ingrese su nombre de usuario\"\n                        {...loginForm.register(\"username\")}\n                        data-testid=\"input-username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <div className=\"text-danger small\">\n                          {loginForm.formState.errors.username.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"mb-3\">\n                      <Label htmlFor=\"loginPassword\">Contraseña</Label>\n                      <div className=\"password-input-container position-relative\">\n                        <Input\n                          id=\"loginPassword\"\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Ingrese su contraseña\"\n                          {...loginForm.register(\"password\")}\n                          data-testid=\"input-password\"\n                          className=\"password-input\"\n                        />\n                        <button\n                          type=\"button\"\n                          className=\"password-toggle-btn\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"password-toggle-icon\" />\n                          ) : (\n                            <Eye className=\"password-toggle-icon\" />\n                          )}\n                        </button>\n                      </div>\n                      {loginForm.formState.errors.password && (\n                        <div className=\"text-danger small\">\n                          {loginForm.formState.errors.password.message}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"d-grid mt-4\">\n                      <Button\n                        type=\"submit\"\n                        className=\"btn-admin-login\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login\"\n                      >\n                        {loginMutation.isPending ? (\n                          <Loader2 className=\"w-4 h-4 me-2 animate-spin\" />\n                        ) : (\n                          <i className=\"bi bi-box-arrow-in-right me-2\"></i>\n                        )}\n                        Iniciar Sesión\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Right Column - Hero Section */}\n          <div className=\"col-lg-6 bg-primary text-white d-flex align-items-center d-none d-lg-flex\">\n            <div className=\"text-center w-100 p-5\">\n              <div className=\"mb-4\">\n                <i className=\"bi bi-graph-up display-1\"></i>\n              </div>\n              <p className=\"lead mb-4\">\n                Gestiona las consultas ciudadanas, analiza tendencias y toma decisiones informadas\n                para el desarrollo de Honduras.\n              </p>\n              \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5639},"client/src/pages/home-page.tsx":{"content":"import ConsultationForm from \"@/components/consultation-form\";\n\nexport default function HomePage() {\n  return <ConsultationForm />;\n}\n","size_bytes":134},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePriHSmitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1725},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/accessibility-button.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Volume2, VolumeX, Eye, Type, Palette, MousePointer, BookOpen } from \"lucide-react\";\n\ninterface AccessibilitySettings {\n  fontSize: number;\n  highContrast: boolean;\n  textToSpeech: boolean;\n  visualGuides: boolean;\n  simpleMode: boolean;\n}\n\nexport function AccessibilityButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [settings, setSettings] = useState<AccessibilitySettings>({\n    fontSize: 100,\n    highContrast: false,\n    textToSpeech: false,\n    visualGuides: false,\n    simpleMode: false,\n  });\n  const [isSpeaking, setIsSpeaking] = useState(false);\n\n  // Apply accessibility settings to the document\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Font size adjustment\n    root.style.fontSize = `${settings.fontSize}%`;\n    \n    // High contrast mode\n    if (settings.highContrast) {\n      root.classList.add('accessibility-high-contrast');\n    } else {\n      root.classList.remove('accessibility-high-contrast');\n    }\n    \n    // Visual guides\n    if (settings.visualGuides) {\n      root.classList.add('accessibility-visual-guides');\n    } else {\n      root.classList.remove('accessibility-visual-guides');\n    }\n    \n    // Simple mode\n    if (settings.simpleMode) {\n      root.classList.add('accessibility-simple-mode');\n    } else {\n      root.classList.remove('accessibility-simple-mode');\n    }\n  }, [settings]);\n\n  // Text-to-Speech functionality\n  const speakText = (text: string) => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = 'es-ES';\n      utterance.rate = 0.8;\n      utterance.pitch = 1;\n      \n      utterance.onstart = () => setIsSpeaking(true);\n      utterance.onend = () => setIsSpeaking(false);\n      utterance.onerror = () => setIsSpeaking(false);\n      \n      window.speechSynthesis.speak(utterance);\n    }\n  };\n\n  const stopSpeaking = () => {\n    if ('speechSynthesis' in window) {\n      window.speechSynthesis.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  const toggleTextToSpeech = () => {\n    const newValue = !settings.textToSpeech;\n    setSettings(prev => ({ ...prev, textToSpeech: newValue }));\n    \n    if (newValue) {\n      speakText(\"Lectura de texto activada. Haga clic en cualquier texto para escucharlo.\");\n    } else {\n      stopSpeaking();\n    }\n  };\n\n  // Handle text-to-speech clicks\n  useEffect(() => {\n    const handleTextClick = (e: MouseEvent) => {\n      if (settings.textToSpeech && e.target instanceof HTMLElement) {\n        const text = e.target.textContent || e.target.innerText;\n        if (text && text.trim().length > 0) {\n          speakText(text.trim());\n        }\n      }\n    };\n\n    if (settings.textToSpeech) {\n      document.addEventListener('click', handleTextClick);\n    }\n\n    return () => {\n      document.removeEventListener('click', handleTextClick);\n    };\n  }, [settings.textToSpeech]);\n\n  const increaseFontSize = () => {\n    setSettings(prev => ({ \n      ...prev, \n      fontSize: Math.min(150, prev.fontSize + 10) \n    }));\n  };\n\n  const decreaseFontSize = () => {\n    setSettings(prev => ({ \n      ...prev, \n      fontSize: Math.max(80, prev.fontSize - 10) \n    }));\n  };\n\n  const resetSettings = () => {\n    setSettings({\n      fontSize: 100,\n      highContrast: false,\n      textToSpeech: false,\n      visualGuides: false,\n      simpleMode: false,\n    });\n    stopSpeaking();\n  };\n\n  return (\n    <>\n      <div className=\"accessibility-button-container\">\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n          <DialogTrigger asChild>\n            <Button\n              className=\"accessibility-button\"\n              size=\"sm\"\n              aria-label=\"Abrir opciones de accesibilidad\"\n              data-testid=\"button-accessibility\"\n            >\n              <svg\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                aria-hidden=\"true\"\n              >\n                <path\n                  d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 7.5V9H9V7L3 7.5V9C3 10.1 3.9 11 5 11V17C5 18.1 5.9 19 7 19H9C10.1 19 11 18.1 11 17V14H13V17C13 18.1 13.9 19 15 19H17C18.1 19 19 18.1 19 17V11C20.1 11 21 10.1 21 9Z\"\n                  fill=\"currentColor\"\n                />\n              </svg>\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"accessibility-panel\" aria-describedby=\"accessibility-description\">\n            <DialogHeader>\n              <DialogTitle>Opciones de Accesibilidad</DialogTitle>\n              <p id=\"accessibility-description\" className=\"text-sm text-muted-foreground\">\n                Ajuste la interfaz según sus necesidades de accesibilidad\n              </p>\n            </DialogHeader>\n\n            <div className=\"accessibility-controls space-y-6\">\n              {/* Text Size Controls */}\n              <div className=\"accessibility-section\">\n                <h3 className=\"accessibility-section-title\">\n                  <Type className=\"w-4 h-4\" />\n                  Tamaño de Texto\n                </h3>\n                <div className=\"accessibility-controls-row\">\n                  <Button\n                    onClick={decreaseFontSize}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={settings.fontSize <= 80}\n                    aria-label=\"Disminuir tamaño de texto\"\n                    data-testid=\"button-decrease-font\"\n                  >\n                    A-\n                  </Button>\n                  <Badge variant=\"secondary\" className=\"accessibility-font-indicator\">\n                    {settings.fontSize}%\n                  </Badge>\n                  <Button\n                    onClick={increaseFontSize}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={settings.fontSize >= 150}\n                    aria-label=\"Aumentar tamaño de texto\"\n                    data-testid=\"button-increase-font\"\n                  >\n                    A+\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Contrast Controls */}\n              <div className=\"accessibility-section\">\n                <h3 className=\"accessibility-section-title\">\n                  <Palette className=\"w-4 h-4\" />\n                  Contraste y Visibilidad\n                </h3>\n                <div className=\"accessibility-controls-row\">\n                  <Button\n                    onClick={() => setSettings(prev => ({ ...prev, highContrast: !prev.highContrast }))}\n                    variant={settings.highContrast ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className=\"accessibility-toggle-button\"\n                    aria-label={settings.highContrast ? \"Desactivar alto contraste\" : \"Activar alto contraste\"}\n                    data-testid=\"button-high-contrast\"\n                  >\n                    {settings.highContrast ? \"Alto Contraste ON\" : \"Alto Contraste OFF\"}\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Text-to-Speech Controls */}\n              <div className=\"accessibility-section\">\n                <h3 className=\"accessibility-section-title\">\n                  <Volume2 className=\"w-4 h-4\" />\n                  Lectura de Pantalla\n                </h3>\n                <div className=\"accessibility-controls-row\">\n                  <Button\n                    onClick={toggleTextToSpeech}\n                    variant={settings.textToSpeech ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className=\"accessibility-toggle-button\"\n                    aria-label={settings.textToSpeech ? \"Desactivar lectura de texto\" : \"Activar lectura de texto\"}\n                    data-testid=\"button-text-to-speech\"\n                  >\n                    {settings.textToSpeech ? (\n                      <>\n                        <Volume2 className=\"w-4 h-4 mr-2\" />\n                        Lectura ON\n                      </>\n                    ) : (\n                      <>\n                        <VolumeX className=\"w-4 h-4 mr-2\" />\n                        Lectura OFF\n                      </>\n                    )}\n                  </Button>\n                  {isSpeaking && (\n                    <Button\n                      onClick={stopSpeaking}\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      aria-label=\"Detener lectura\"\n                      data-testid=\"button-stop-speech\"\n                    >\n                      Detener\n                    </Button>\n                  )}\n                </div>\n                {settings.textToSpeech && (\n                  <p className=\"accessibility-help-text\">\n                    Haga clic en cualquier texto para escucharlo\n                  </p>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Visual Guides */}\n              <div className=\"accessibility-section\">\n                <h3 className=\"accessibility-section-title\">\n                  <MousePointer className=\"w-4 h-4\" />\n                  Guías Visuales\n                </h3>\n                <div className=\"accessibility-controls-row\">\n                  <Button\n                    onClick={() => setSettings(prev => ({ ...prev, visualGuides: !prev.visualGuides }))}\n                    variant={settings.visualGuides ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className=\"accessibility-toggle-button\"\n                    aria-label={settings.visualGuides ? \"Desactivar guías visuales\" : \"Activar guías visuales\"}\n                    data-testid=\"button-visual-guides\"\n                  >\n                    {settings.visualGuides ? \"Guías ON\" : \"Guías OFF\"}\n                  </Button>\n                </div>\n                {settings.visualGuides && (\n                  <p className=\"accessibility-help-text\">\n                    Enlaces subrayados y campos con bordes resaltados\n                  </p>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Simple Mode */}\n              <div className=\"accessibility-section\">\n                <h3 className=\"accessibility-section-title\">\n                  <BookOpen className=\"w-4 h-4\" />\n                  Modo Simple\n                </h3>\n                <div className=\"accessibility-controls-row\">\n                  <Button\n                    onClick={() => setSettings(prev => ({ ...prev, simpleMode: !prev.simpleMode }))}\n                    variant={settings.simpleMode ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    className=\"accessibility-toggle-button\"\n                    aria-label={settings.simpleMode ? \"Desactivar modo simple\" : \"Activar modo simple\"}\n                    data-testid=\"button-simple-mode\"\n                  >\n                    {settings.simpleMode ? \"Modo Simple ON\" : \"Modo Simple OFF\"}\n                  </Button>\n                </div>\n                {settings.simpleMode && (\n                  <p className=\"accessibility-help-text\">\n                    Textos e instrucciones simplificadas\n                  </p>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Reset Button */}\n              <div className=\"accessibility-section\">\n                <Button\n                  onClick={resetSettings}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  aria-label=\"Restaurar configuración por defecto\"\n                  data-testid=\"button-reset-accessibility\"\n                >\n                  Restaurar Configuración\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </>\n  );\n}","size_bytes":12377},"client/src/components/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { UserPlus, Trash2, Shield, User } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { User as SelectUser } from \"@shared/schema\";\n\nconst createUserSchema = z.object({\n  username: z.string().min(3, \"El nombre de usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n  role: z.enum([\"admin\", \"super_admin\"], {\n    required_error: \"Debe seleccionar un rol\",\n  }),\n});\n\ntype CreateUserData = z.infer<typeof createUserSchema>;\n\nexport function UserManagement() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const form = useForm<CreateUserData>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      role: \"admin\",\n    },\n  });\n\n  // Fetch users\n  const { data: users, isLoading } = useQuery<SelectUser[]>({\n    queryKey: [\"/api/users\"],\n    enabled: currentUser?.role === \"super_admin\",\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al crear el usuario\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/users/${userId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuario eliminado\",\n        description: \"El usuario ha sido eliminado exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error.message || \"Error al eliminar el usuario\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateUserData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleDeleteUser = (userId: string, username: string) => {\n    if (window.confirm(`¿Está seguro de que desea eliminar al usuario \"${username}\"?`)) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'super_admin': return 'default';\n      case 'admin': return 'secondary';\n      case 'ciudadano': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'super_admin': return 'Super Admin';\n      case 'admin': return 'Administrador';\n      case 'ciudadano': return 'Ciudadano';\n      default: return role;\n    }\n  };\n\n  if (currentUser?.role !== \"super_admin\") {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Acceso Restringido</h3>\n            <p className=\"text-muted-foreground\">\n              Solo los Super Administradores pueden gestionar usuarios.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Gestión de Usuarios\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Administrar usuarios del sistema\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-user\">\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Crear Usuario\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Crear Nuevo Usuario</DialogTitle>\n              <DialogDescription>\n                Crear una nueva cuenta de administrador o super administrador.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nombre de Usuario</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ingrese el nombre de usuario\"\n                          data-testid=\"input-username\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contraseña</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Ingrese la contraseña\"\n                          data-testid=\"input-password\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rol</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Seleccione un rol\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"admin\">Administrador</SelectItem>\n                          <SelectItem value=\"super_admin\">Super Administrador</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createUserMutation.isPending ? \"Creando...\" : \"Crear Usuario\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Usuarios del Sistema\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground\">Cargando usuarios...</p>\n            </div>\n          ) : users && users.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Usuario</TableHead>\n                  <TableHead>Rol</TableHead>\n                  <TableHead>Fecha de Creación</TableHead>\n                  <TableHead className=\"text-right\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user) => (\n                  <TableRow key={user.id} data-testid={`row-user-${user.id}`}>\n                    <TableCell className=\"font-medium\">{user.username}</TableCell>\n                    <TableCell>\n                      <Badge variant={getRoleBadgeVariant(user.role)}>\n                        {getRoleLabel(user.role)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {new Date(user.createdAt).toLocaleDateString('es-HN')}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {currentUser?.id !== user.id && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteUser(user.id, user.username)}\n                          disabled={deleteUserMutation.isPending}\n                          data-testid={`button-delete-${user.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {currentUser?.id === user.id && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Tu cuenta\n                        </Badge>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-8\">\n              <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No hay usuarios en el sistema.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11577},"client/src/components/user-management-spe.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, Plus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst createPlanificadorSchema = z.object({\n  username: z.string().min(3, \"El nombre de usuario debe tener al menos 3 caracteres\"),\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n});\n\ntype CreatePlanificadorFormData = z.infer<typeof createPlanificadorSchema>;\n\nexport function UserManagementSPE() {\n  const [isCreating, setIsCreating] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreatePlanificadorFormData>({\n    resolver: zodResolver(createPlanificadorSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const createPlanificadorMutation = useMutation({\n    mutationFn: async (data: CreatePlanificadorFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", {\n        ...data,\n        role: \"planificador\"\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Planificador creado\",\n        description: \"El usuario planificador ha sido creado exitosamente.\",\n      });\n      form.reset();\n      setIsCreating(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al crear el planificador\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreatePlanificadorFormData) => {\n    createPlanificadorMutation.mutate(data);\n  };\n\n  return (\n    <Card className=\"border-0 shadow-sm\">\n      <CardHeader className=\"bg-white\">\n        <CardTitle className=\"mb-0\">\n          <Users className=\"w-5 h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n          Usuarios Planificadores\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-4\">\n        {!isCreating ? (\n          <div className=\"text-center py-6\">\n            <Button \n              onClick={() => setIsCreating(true)}\n              className=\"px-6 py-3 text-white rounded-lg font-medium hover:bg-[#17b8cd] hover:border-[#17b8cd] transition-colors\"\n              style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n              size=\"lg\"\n              data-testid=\"button-create-planificador\"\n            >\n              <Plus className=\"w-5 h-5 mr-2\" />\n              + Crear Planificador\n            </Button>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de Usuario</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ingrese nombre de usuario\"\n                        data-testid=\"input-username\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contraseña</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\"\n                        placeholder=\"Ingrese contraseña\"\n                        data-testid=\"input-password\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  disabled={createPlanificadorMutation.isPending}\n                  className=\"text-white\"\n                  style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                  data-testid=\"button-submit-planificador\"\n                >\n                  {createPlanificadorMutation.isPending ? \"Creando...\" : \"Crear Planificador\"}\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsCreating(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancelar\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5362},"client/src/components/navbar-admin.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { User, Settings, LogOut, UserPlus, ChevronDown } from \"lucide-react\";\n\ninterface NavbarAdminProps {\n  onCreatePlanificador?: () => void;\n}\n\nexport function NavbarAdmin({ onCreatePlanificador }: NavbarAdminProps) {\n  const { user, logoutMutation } = useAuth();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleProfile = () => {\n    // TODO: Implementar modal de perfil\n    console.log(\"Abrir perfil\");\n  };\n\n  return (\n    <nav className=\"bg-white border-b border-gray-200 shadow-sm mb-6\">\n      <div className=\"container-fluid\">\n        <div className=\"d-flex justify-content-between align-items-center py-3\">\n          {/* Logo/Título */}\n          <div className=\"d-flex align-items-center\">\n            <h1 className=\"h4 mb-0 text-primary fw-bold\">\n              Panel Administrativo\n            </h1>\n          </div>\n\n          {/* Usuario y menú */}\n          <div className=\"d-flex align-items-center gap-3\">\n            <span className=\"text-muted small d-none d-md-inline\">\n              Bienvenido,\n            </span>\n            <span className=\"fw-semibold text-dark\">\n              {user?.username}\n            </span>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button \n                  variant=\"outline\" \n                  className=\"d-flex align-items-center gap-2\"\n                  data-testid=\"button-user-menu\"\n                >\n                  <User className=\"w-4 h-4\" />\n                  <ChevronDown className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                {user?.username === \"SPE\" && (\n                  <>\n                    <DropdownMenuItem \n                      onClick={onCreatePlanificador}\n                      data-testid=\"menu-create-planificador\"\n                    >\n                      <UserPlus className=\"w-4 h-4 me-2\" />\n                      Crear Usuario Planificador\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                  </>\n                )}\n                \n                <DropdownMenuItem \n                  onClick={handleProfile}\n                  data-testid=\"menu-profile\"\n                >\n                  <Settings className=\"w-4 h-4 me-2\" />\n                  Mi Perfil\n                </DropdownMenuItem>\n                \n                <DropdownMenuSeparator />\n                \n                <DropdownMenuItem \n                  onClick={handleLogout}\n                  className=\"text-danger\"\n                  data-testid=\"menu-logout\"\n                >\n                  <LogOut className=\"w-4 h-4 me-2\" />\n                  Cerrar Sesión\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":3224},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Users, \n  UserPlus, \n  ArrowLeft, \n  Edit, \n  Trash2, \n  Key, \n  UserX, \n  UserCheck,\n  MoreVertical,\n  Settings\n} from \"lucide-react\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertUserSchema } from \"@shared/schema\";\n\nconst changePasswordSchema = z.object({\n  password: z.string().min(6, \"La contraseña debe tener al menos 6 caracteres\"),\n  confirmPassword: z.string().min(6, \"Confirme la contraseña\")\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Las contraseñas no coinciden\",\n  path: [\"confirmPassword\"]\n});\n\ntype CreateUserFormData = z.infer<typeof insertUserSchema>;\ntype ChangePasswordFormData = z.infer<typeof changePasswordSchema>;\n\nexport default function UserManagement() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [showCreateUser, setShowCreateUser] = useState(false);\n  const [showChangePassword, setShowChangePassword] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n\n  // Queries\n  const { data: users = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Mutations\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserFormData) => {\n      return apiRequest(\"POST\", \"/api/users\", userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuario creado\",\n        description: \"El usuario ha sido creado exitosamente.\",\n      });\n      setShowCreateUser(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al crear el usuario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(\"DELETE\", `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Usuario eliminado\",\n        description: \"El usuario ha sido eliminado exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al eliminar el usuario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async ({ userId, password }: { userId: string; password: string }) => {\n      return apiRequest(\"PUT\", `/api/users/${userId}/password`, { password });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contraseña actualizada\",\n        description: \"La contraseña ha sido actualizada exitosamente.\",\n      });\n      setShowChangePassword(false);\n      setSelectedUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al cambiar la contraseña\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleUserStatusMutation = useMutation({\n    mutationFn: async ({ userId, active }: { userId: string; active: boolean }) => {\n      return apiRequest(\"PUT\", `/api/users/${userId}/status`, { active });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Estado actualizado\",\n        description: \"El estado del usuario ha sido actualizado exitosamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Error al cambiar el estado del usuario\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Forms\n  const createUserForm = useForm<CreateUserFormData>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      role: \"planificador\",\n    },\n  });\n\n  const changePasswordForm = useForm<ChangePasswordFormData>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Handlers\n  const handleCreateUser = (data: CreateUserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (window.confirm(\"¿Está seguro que desea eliminar este usuario?\")) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const handleChangePassword = (data: ChangePasswordFormData) => {\n    if (selectedUser) {\n      changePasswordMutation.mutate({\n        userId: selectedUser.id,\n        password: data.password,\n      });\n    }\n  };\n\n  const handleToggleUserStatus = (userId: string, currentStatus: boolean) => {\n    const action = currentStatus ? \"suspender\" : \"activar\";\n    if (window.confirm(`¿Está seguro que desea ${action} este usuario?`)) {\n      toggleUserStatusMutation.mutate({\n        userId,\n        active: !currentStatus,\n      });\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"destructive\";\n      case \"admin\":\n        return \"default\";\n      case \"planificador\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case \"super_admin\":\n        return \"Super Admin\";\n      case \"admin\":\n        return \"Administrador\";\n      case \"planificador\":\n        return \"Planificador\";\n      case \"ciudadano\":\n        return \"Ciudadano\";\n      default:\n        return role;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"es-HN\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Cargando usuarios...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\" style={{ backgroundColor: '#f5f7fa' }}>\n      {/* Header */}\n      <div className=\"border-b\" style={{ backgroundColor: '#1bd1e8' }}>\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex justify-between items-center py-3\">\n            <div className=\"flex items-center\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => navigate(\"/admin\")}\n                className=\"text-white hover:bg-white hover:bg-opacity-20 mr-3\"\n                data-testid=\"button-back-to-dashboard\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <Settings className=\"w-6 h-6 text-white mr-3\" />\n              <h4 className=\"mb-0 font-bold text-white text-lg\">Gestión de Usuarios</h4>\n            </div>\n            \n            <div className=\"flex items-center text-white\">\n              <span className=\"font-medium mr-2\">{user?.username}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"grid grid-cols-1 gap-4\">\n          <div className=\"w-full\">\n            {/* Users Table */}\n            <Card className=\"border-0 shadow-sm rounded-lg\">\n              <CardHeader style={{ backgroundColor: '#fff' }} className=\"border-0 rounded-t-lg\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <CardTitle className=\"mb-0 flex items-center\">\n                      <Users className=\"w-5 h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n                      Lista de Usuarios\n                    </CardTitle>\n                  </div>\n                  <Button\n                    onClick={() => setShowCreateUser(true)}\n                    style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                    data-testid=\"button-create-user\"\n                  >\n                    <UserPlus className=\"w-4 h-4 mr-1\" />\n                    Crear Usuario\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead className=\"font-bold\">Usuario</TableHead>\n                        <TableHead className=\"font-bold\">Rol</TableHead>\n                        <TableHead className=\"font-bold\">Estado</TableHead>\n                        <TableHead className=\"font-bold\">Fecha Creación</TableHead>\n                        <TableHead className=\"font-bold\">Acciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users.length > 0 ? users.map((user: any) => (\n                        <TableRow key={user.id}>\n                          <TableCell>\n                            <div className=\"flex items-center\">\n                              <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center mr-3\">\n                                <span className=\"text-sm font-medium text-gray-600\">\n                                  {user.username[0].toUpperCase()}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{user.username}</p>\n                                <p className=\"text-sm text-gray-500\">{user.id.slice(0, 8)}...</p>\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getRoleBadgeVariant(user.role)}>\n                              {getRoleLabel(user.role)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={user.active ? \"default\" : \"secondary\"}>\n                              {user.active ? \"Activo\" : \"Suspendido\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{formatDate(user.createdAt)}</TableCell>\n                          <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`button-user-actions-${user.id}`}\n                                >\n                                  <MoreVertical className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem\n                                  onClick={() => {\n                                    setSelectedUser(user);\n                                    setShowChangePassword(true);\n                                  }}\n                                  data-testid={`button-change-password-${user.id}`}\n                                >\n                                  <Key className=\"w-4 h-4 mr-2\" />\n                                  Cambiar Contraseña\n                                </DropdownMenuItem>\n                                \n                                {user.username !== \"SPE\" && (\n                                  <>\n                                    <DropdownMenuItem\n                                      onClick={() => handleToggleUserStatus(user.id, user.active)}\n                                      data-testid={`button-toggle-status-${user.id}`}\n                                    >\n                                      {user.active ? (\n                                        <>\n                                          <UserX className=\"w-4 h-4 mr-2\" />\n                                          Suspender\n                                        </>\n                                      ) : (\n                                        <>\n                                          <UserCheck className=\"w-4 h-4 mr-2\" />\n                                          Activar\n                                        </>\n                                      )}\n                                    </DropdownMenuItem>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem\n                                      onClick={() => handleDeleteUser(user.id)}\n                                      className=\"text-red-600 hover:bg-red-50\"\n                                      data-testid={`button-delete-user-${user.id}`}\n                                    >\n                                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                                      Eliminar\n                                    </DropdownMenuItem>\n                                  </>\n                                )}\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell>\n                        </TableRow>\n                      )) : (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center text-gray-500 py-4\">\n                            No hay usuarios disponibles\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Create User Dialog */}\n      <Dialog open={showCreateUser} onOpenChange={setShowCreateUser}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <UserPlus className=\"w-5 h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n              Crear Nuevo Usuario\n            </DialogTitle>\n            <DialogDescription>\n              Complete la información para crear un nuevo usuario en el sistema.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...createUserForm}>\n            <form onSubmit={createUserForm.handleSubmit(handleCreateUser)} className=\"space-y-4\">\n              <FormField\n                control={createUserForm.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de Usuario</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ingrese el nombre de usuario\"\n                        data-testid=\"input-create-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={createUserForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Ingrese la contraseña\"\n                        data-testid=\"input-create-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={createUserForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rol</FormLabel>\n                    <Select \n                      onValueChange={field.onChange} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-create-role\">\n                          <SelectValue placeholder=\"Seleccione un rol\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"planificador\">Planificador</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowCreateUser(false)}\n                  data-testid=\"button-cancel-create\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createUserMutation.isPending}\n                  style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                  data-testid=\"button-submit-create\"\n                >\n                  {createUserMutation.isPending ? \"Creando...\" : \"Crear Usuario\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Change Password Dialog */}\n      <Dialog open={showChangePassword} onOpenChange={setShowChangePassword}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Key className=\"w-5 h-5 mr-2\" style={{ color: '#1bd1e8' }} />\n              Cambiar Contraseña\n            </DialogTitle>\n            <DialogDescription>\n              Cambiar la contraseña para el usuario: <strong>{selectedUser?.username}</strong>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...changePasswordForm}>\n            <form onSubmit={changePasswordForm.handleSubmit(handleChangePassword)} className=\"space-y-4\">\n              <FormField\n                control={changePasswordForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nueva Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Ingrese la nueva contraseña\"\n                        data-testid=\"input-new-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={changePasswordForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirmar Contraseña</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirme la nueva contraseña\"\n                        data-testid=\"input-confirm-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowChangePassword(false);\n                    setSelectedUser(null);\n                    changePasswordForm.reset();\n                  }}\n                  data-testid=\"button-cancel-password\"\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={changePasswordMutation.isPending}\n                  style={{ backgroundColor: '#1bd1e8', borderColor: '#1bd1e8' }}\n                  data-testid=\"button-submit-password\"\n                >\n                  {changePasswordMutation.isPending ? \"Actualizando...\" : \"Cambiar Contraseña\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21992},"client/src/components/google.tsx":{"content":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  useMapEvents,\n  useMap,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n\n// Fix iconos Leaflet\nimport iconUrl from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\nconst DefaultIcon = L.icon({\n  iconUrl,\n  shadowUrl: iconShadow,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\ntype LatLng = { lat: number; lng: number };\n\ntype Props = {\n  /** Valor controlado (si viene de BD/form). Si se pasa, el mapa lo usa como fuente de verdad */\n  value?: LatLng | null;\n  /** Valor inicial (si no hay value). Útil para precargar desde BD una sola vez */\n  defaultValue?: LatLng | null;\n  /** Callback cuando el usuario hace clic en el mapa */\n  onChange?: (pos: LatLng) => void;\n  /** Alto del mapa en px */\n  height?: number;\n  /** Zoom inicial cuando no hay coordenadas */\n  initialZoom?: number;\n  /** Zoom al seleccionar */\n  pickZoom?: number;\n};\n\nfunction Recenter({ position, zoom }: { position: LatLng; zoom: number }) {\n  const map = useMap();\n  useEffect(() => {\n    map.setView(position, zoom);\n  }, [position.lat, position.lng, zoom, map]);\n  return null;\n}\n\nfunction ClickCatcher({ onPick }: { onPick: (p: LatLng) => void }) {\n  useMapEvents({\n    click(e) {\n      onPick({ lat: e.latlng.lat, lng: e.latlng.lng });\n    },\n  });\n  return null;\n}\n\nexport default function MapPicker({\n  value = null,\n  defaultValue = null,\n  onChange,\n  height = 300,\n  initialZoom = 12,\n  pickZoom = 15,\n}: Props) {\n  // Estado interno solo si el componente NO es controlado\n  const [internal, setInternal] = useState<LatLng | null>(defaultValue);\n\n  // ¿Usamos externo (value) o interno?\n  const pos = useMemo<LatLng | null>(() => {\n    return value ?? internal;\n  }, [value, internal]);\n\n  const center = useMemo<LatLng>(() => {\n    return pos ?? { lat: 14.0723, lng: -87.1921 }; // Tegucigalpa\n  }, [pos]);\n\n  const zoomWhen = pos ? pickZoom : initialZoom;\n\n  const handlePick = (p: LatLng) => {\n    // Si es controlado, avisamos al padre\n    if (onChange) onChange(p);\n    // Si es no controlado, guardamos aquí\n    if (value === null) setInternal(p);\n  };\n\n  return (\n    <div className=\"rounded-xl border p-3\">\n      <h3 className=\"font-bold mb-2\">Seleccione su ubicación en el mapa</h3>\n\n      <div style={{ height, width: \"100%\" }}>\n        <MapContainer\n          center={center}\n          zoom={zoomWhen}\n          style={{ height: \"100%\", width: \"100%\" }}\n          key={`${center.lat}-${center.lng}-${zoomWhen}`} // asegura re-render al cambiar fuente\n        >\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n          />\n          {pos && <Recenter position={pos} zoom={pickZoom} />}\n          <ClickCatcher onPick={handlePick} />\n          {pos && <Marker position={pos} />}\n        </MapContainer>\n      </div>\n\n      {pos && (\n        <>\n          <p className=\"mt-2 text-sm\">\n            Punto seleccionado: <b>{pos.lat.toFixed(6)}, {pos.lng.toFixed(6)}</b>\n          </p>\n          {/* Hidden inputs para formularios HTML clásicos */}\n          <input type=\"hidden\" name=\"lat\" value={pos.lat} />\n          <input type=\"hidden\" name=\"lng\" value={pos.lng} />\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":3507},"update-honduras-data.js":{"content":"import fs from 'fs';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport { departments, municipalities, localities } from './shared/schema.js';\nimport { eq } from 'drizzle-orm';\n\n// Read the Honduras data\nconst hondurasData = JSON.parse(fs.readFileSync('honduras-data.json', 'utf8'));\n\n// Database connection\nconst connectionString = process.env.DATABASE_URL;\nconst sql = postgres(connectionString);\nconst db = drizzle(sql);\n\nconsole.log('🇭🇳 Actualizando datos geográficos de Honduras...\\n');\n\n// Update departments with official names\nasync function updateDepartments() {\n  console.log('📍 Actualizando departamentos...');\n  \n  for (const dept of hondurasData) {\n    const code = String(dept.Código).padStart(2, '0');\n    const name = dept['Nombre del Departamento'];\n    \n    await db.update(departments)\n      .set({ name: name })\n      .where(eq(departments.id, code));\n    \n    console.log(`✅ ${code} - ${name}`);\n  }\n  \n  console.log('\\n📍 Departamentos actualizados exitosamente!\\n');\n}\n\n// Add some representative municipalities for major departments\nasync function addMunicipalities() {\n  console.log('🏘️ Agregando municipios principales...');\n  \n  const mainMunicipalities = [\n    // Atlántida\n    { id: 'AT-001', name: 'La Ceiba', departmentId: '01', geocode: '001' },\n    { id: 'AT-002', name: 'Tela', departmentId: '01', geocode: '002' },\n    { id: 'AT-003', name: 'El Progreso', departmentId: '01', geocode: '003' },\n    \n    // Cortés\n    { id: 'CR-001', name: 'San Pedro Sula', departmentId: '05', geocode: '001' },\n    { id: 'CR-002', name: 'Choloma', departmentId: '05', geocode: '002' },\n    { id: 'CR-003', name: 'La Lima', departmentId: '05', geocode: '003' },\n    \n    // Francisco Morazán\n    { id: 'FM-001', name: 'Tegucigalpa', departmentId: '08', geocode: '001' },\n    { id: 'FM-002', name: 'Comayagüela', departmentId: '08', geocode: '002' },\n    { id: 'FM-003', name: 'Valle de Ángeles', departmentId: '08', geocode: '003' },\n    \n    // Choluteca\n    { id: 'CH-001', name: 'Choluteca', departmentId: '06', geocode: '001' },\n    { id: 'CH-002', name: 'Marcovia', departmentId: '06', geocode: '002' },\n    \n    // Copán\n    { id: 'CP-001', name: 'Santa Rosa de Copán', departmentId: '04', geocode: '001' },\n    { id: 'CP-002', name: 'Copán Ruinas', departmentId: '04', geocode: '002' },\n    \n    // Comayagua\n    { id: 'CM-001', name: 'Comayagua', departmentId: '03', geocode: '001' },\n    { id: 'CM-002', name: 'Siguatepeque', departmentId: '03', geocode: '002' },\n    \n    // Colón\n    { id: 'CL-001', name: 'Trujillo', departmentId: '02', geocode: '001' },\n    { id: 'CL-002', name: 'Tocoa', departmentId: '02', geocode: '002' },\n    \n    // Yoro\n    { id: 'YO-001', name: 'Yoro', departmentId: '18', geocode: '001' },\n    { id: 'YO-002', name: 'Olanchito', departmentId: '18', geocode: '002' },\n    \n    // Olancho\n    { id: 'OL-001', name: 'Juticalpa', departmentId: '15', geocode: '001' },\n    { id: 'OL-002', name: 'Catacamas', departmentId: '15', geocode: '002' },\n  ];\n  \n  // Clear existing municipalities first\n  await db.delete(municipalities);\n  console.log('🗑️ Municipios anteriores eliminados');\n  \n  for (const muni of mainMunicipalities) {\n    await db.insert(municipalities).values(muni);\n    console.log(`✅ ${muni.name} (${muni.departmentId})`);\n  }\n  \n  console.log('\\n🏘️ Municipios principales agregados exitosamente!\\n');\n}\n\n// Add localities (urban/rural areas)\nasync function addLocalities() {\n  console.log('🏡 Agregando localidades (urbano/rural)...');\n  \n  const sampleLocalities = [\n    // Urban areas for major cities\n    { id: 'LOC-001', name: 'Centro', municipalityId: 'CR-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-002', name: 'Chamelecón', municipalityId: 'CR-001', area: 'urbano', geocode: '002' },\n    { id: 'LOC-003', name: 'Río de Piedras', municipalityId: 'CR-001', area: 'urbano', geocode: '003' },\n    \n    { id: 'LOC-004', name: 'Centro Histórico', municipalityId: 'FM-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-005', name: 'Comayagüela', municipalityId: 'FM-001', area: 'urbano', geocode: '002' },\n    { id: 'LOC-006', name: 'Kennedy', municipalityId: 'FM-001', area: 'urbano', geocode: '003' },\n    \n    { id: 'LOC-007', name: 'Centro', municipalityId: 'AT-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-008', name: 'La Isla', municipalityId: 'AT-001', area: 'urbano', geocode: '002' },\n    \n    // Rural areas\n    { id: 'LOC-009', name: 'Aldea San José', municipalityId: 'CR-001', area: 'rural', geocode: '004' },\n    { id: 'LOC-010', name: 'Caserío El Progreso', municipalityId: 'CR-001', area: 'rural', geocode: '005' },\n    \n    { id: 'LOC-011', name: 'Aldea El Hatillo', municipalityId: 'FM-001', area: 'rural', geocode: '004' },\n    { id: 'LOC-012', name: 'Caserío Los Pinos', municipalityId: 'FM-001', area: 'rural', geocode: '005' },\n    \n    { id: 'LOC-013', name: 'Aldea La Bomba', municipalityId: 'AT-001', area: 'rural', geocode: '003' },\n    { id: 'LOC-014', name: 'Caserío El Sauce', municipalityId: 'AT-001', area: 'rural', geocode: '004' },\n    \n    // More localities for other municipalities\n    { id: 'LOC-015', name: 'Centro', municipalityId: 'CH-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-016', name: 'Barrio El Centro', municipalityId: 'CP-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-017', name: 'Centro', municipalityId: 'CM-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-018', name: 'Centro', municipalityId: 'CL-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-019', name: 'Centro', municipalityId: 'YO-001', area: 'urbano', geocode: '001' },\n    { id: 'LOC-020', name: 'Centro', municipalityId: 'OL-001', area: 'urbano', geocode: '001' },\n  ];\n  \n  // Clear existing localities first\n  await db.delete(localities);\n  console.log('🗑️ Localidades anteriores eliminadas');\n  \n  for (const locality of sampleLocalities) {\n    await db.insert(localities).values(locality);\n    console.log(`✅ ${locality.name} (${locality.area})`);\n  }\n  \n  console.log('\\n🏡 Localidades agregadas exitosamente!\\n');\n}\n\n// Main execution\nasync function main() {\n  try {\n    await updateDepartments();\n    await addMunicipalities();\n    await addLocalities();\n    \n    console.log('🎉 ¡Datos geográficos de Honduras actualizados exitosamente!');\n    console.log('📊 Resumen:');\n    console.log('   - 18 Departamentos oficiales actualizados');\n    console.log('   - 20 Municipios principales agregados');\n    console.log('   - 20 Localidades (urbanas/rurales) agregadas');\n    console.log('\\n✅ El formulario de consultas ahora tiene datos reales de Honduras');\n    \n  } catch (error) {\n    console.error('❌ Error:', error);\n  } finally {\n    await sql.end();\n  }\n}\n\nmain();","size_bytes":6821},"process-municipal-data.js":{"content":"import fs from 'fs';\n\n// Read the municipal data\nconst municipalData = JSON.parse(fs.readFileSync('municipal-data.json', 'utf8'));\n\nconsole.log('🏘️ Procesando datos municipales de Honduras...\\n');\n\n// Group by department correctly\nconst byDepartment = {};\nmunicipalData.forEach(row => {\n  const deptCode = String(row['Código Departamento']).padStart(2, '0');\n  if (!byDepartment[deptCode]) {\n    byDepartment[deptCode] = [];\n  }\n  byDepartment[deptCode].push(row);\n});\n\nconsole.log('📊 Municipios por departamento:');\nObject.keys(byDepartment).sort().forEach(deptCode => {\n  const munis = byDepartment[deptCode];\n  console.log(`${deptCode} - ${munis[0].Departamento}: ${munis.length} municipios`);\n});\n\n// Generate SQL to insert all municipalities with proper relationships\nlet sqlStatements = '';\n\nsqlStatements += '-- Eliminar localidades y municipios anteriores\\n';\nsqlStatements += 'DELETE FROM localities;\\n';\nsqlStatements += 'DELETE FROM municipalities;\\n\\n';\n\nsqlStatements += '-- Insertar TODOS los municipios de Honduras\\n';\n\nObject.keys(byDepartment).sort().forEach(deptCode => {\n  const municipalities = byDepartment[deptCode];\n  const deptName = municipalities[0].Departamento;\n  \n  sqlStatements += `\\n-- Municipios de ${deptName} (${deptCode})\\n`;\n  \n  municipalities.forEach(muni => {\n    const municipalCode = String(muni['Código Municipio']).slice(-2); // Last 2 digits for geocode\n    const id = `${deptCode}-${municipalCode}`;\n    const name = muni.Municipio.replace(/'/g, \"''\"); // Escape quotes\n    \n    sqlStatements += `INSERT INTO municipalities (id, name, department_id, geocode) VALUES ('${id}', '${name}', '${deptCode}', '${municipalCode}');\\n`;\n  });\n});\n\n// Add sample localities for major municipalities\nsqlStatements += '\\n-- Insertar localidades de ejemplo para municipios principales\\n';\n\nconst sampleLocalities = [\n  // Tegucigalpa (Francisco Morazán) \n  { id: 'LOC-001', name: 'Centro Histórico', municipalityId: '08-01', area: 'urbano', geocode: '001' },\n  { id: 'LOC-002', name: 'Comayagüela', municipalityId: '08-01', area: 'urbano', geocode: '002' },\n  { id: 'LOC-003', name: 'Kennedy', municipalityId: '08-01', area: 'urbano', geocode: '003' },\n  { id: 'LOC-004', name: 'Aldea El Hatillo', municipalityId: '08-01', area: 'rural', geocode: '004' },\n  \n  // San Pedro Sula (Cortés)\n  { id: 'LOC-005', name: 'Centro', municipalityId: '05-01', area: 'urbano', geocode: '001' },\n  { id: 'LOC-006', name: 'Chamelecón', municipalityId: '05-01', area: 'urbano', geocode: '002' },\n  { id: 'LOC-007', name: 'Río de Piedras', municipalityId: '05-01', area: 'urbano', geocode: '003' },\n  { id: 'LOC-008', name: 'Aldea San José', municipalityId: '05-01', area: 'rural', geocode: '004' },\n  \n  // La Ceiba (Atlántida)\n  { id: 'LOC-009', name: 'Centro', municipalityId: '01-01', area: 'urbano', geocode: '001' },\n  { id: 'LOC-010', name: 'La Isla', municipalityId: '01-01', area: 'urbano', geocode: '002' },\n  { id: 'LOC-011', name: 'Aldea La Bomba', municipalityId: '01-01', area: 'rural', geocode: '003' },\n  \n  // Choluteca (Choluteca)\n  { id: 'LOC-012', name: 'Centro', municipalityId: '06-01', area: 'urbano', geocode: '001' },\n  { id: 'LOC-013', name: 'Aldea Montaña Verde', municipalityId: '06-01', area: 'rural', geocode: '002' },\n  \n  // Roatán (Islas de la Bahía)\n  { id: 'LOC-014', name: 'Coxen Hole', municipalityId: '11-01', area: 'urbano', geocode: '001' },\n  { id: 'LOC-015', name: 'West End', municipalityId: '11-01', area: 'urbano', geocode: '002' },\n  \n  // Add some for other major cities\n  { id: 'LOC-016', name: 'Centro', municipalityId: '02-01', area: 'urbano', geocode: '001' }, // Trujillo\n  { id: 'LOC-017', name: 'Centro', municipalityId: '03-01', area: 'urbano', geocode: '001' }, // Comayagua\n  { id: 'LOC-018', name: 'Centro', municipalityId: '04-01', area: 'urbano', geocode: '001' }, // Santa Rosa de Copán\n  { id: 'LOC-019', name: 'Centro', municipalityId: '07-01', area: 'urbano', geocode: '001' }, // Yuscarán\n  { id: 'LOC-020', name: 'Centro', municipalityId: '15-01', area: 'urbano', geocode: '001' }, // Juticalpa\n];\n\nsampleLocalities.forEach(locality => {\n  sqlStatements += `INSERT INTO localities (id, name, municipality_id, area, geocode) VALUES ('${locality.id}', '${locality.name.replace(/'/g, \"''\")}', '${locality.municipalityId}', '${locality.area}', '${locality.geocode}');\\n`;\n});\n\n// Save SQL to file\nfs.writeFileSync('complete-honduras-data.sql', sqlStatements);\n\nconsole.log(`\\n✅ Archivo SQL generado: complete-honduras-data.sql`);\nconsole.log(`📊 Total de municipios: ${municipalData.length}`);\nconsole.log(`🏡 Localidades de ejemplo: ${sampleLocalities.length}`);\nconsole.log('\\n🔧 Listo para actualizar la base de datos con datos completos de Honduras');\n\n// Output some sample SQL for verification\nconsole.log('\\n--- SAMPLE SQL (primeros municipios) ---');\nconst firstDeptCode = Object.keys(byDepartment).sort()[0];\nconst firstMunis = byDepartment[firstDeptCode].slice(0, 3);\nfirstMunis.forEach(muni => {\n  const municipalCode = String(muni['Código Municipio']).slice(-2);\n  const id = `${firstDeptCode}-${municipalCode}`;\n  console.log(`INSERT INTO municipalities (id, name, department_id, geocode) VALUES ('${id}', '${muni.Municipio}', '${firstDeptCode}', '${municipalCode}');`);\n});","size_bytes":5296},"read-municipal-data.js":{"content":"import XLSX from 'xlsx';\nimport fs from 'fs';\n\ntry {\n  // Read the Excel file with municipal codes\n  const workbook = XLSX.readFile('attached_assets/Codificacion-Municipal-de-Honduras_1758565952760.xlsX');\n  \n  // Get first worksheet\n  const sheetName = workbook.SheetNames[0];\n  const worksheet = workbook.Sheets[sheetName];\n  \n  // Convert to JSON\n  const data = XLSX.utils.sheet_to_json(worksheet);\n  \n  console.log('🏘️ Datos municipales encontrados:', data.length, 'registros');\n  console.log('\\n📋 Estructura de las primeras filas:');\n  console.log(JSON.stringify(data.slice(0, 5), null, 2));\n  \n  console.log('\\n🔑 Columnas disponibles:');\n  if (data.length > 0) {\n    console.log(Object.keys(data[0]));\n  }\n  \n  // Group by department to verify relationships\n  const byDepartment = {};\n  data.forEach(row => {\n    const deptCode = String(row['Código del Departamento'] || row['Cod_Dept'] || '').padStart(2, '0');\n    if (!byDepartment[deptCode]) {\n      byDepartment[deptCode] = [];\n    }\n    byDepartment[deptCode].push(row);\n  });\n  \n  console.log('\\n📊 Municipios por departamento:');\n  Object.keys(byDepartment).sort().forEach(deptCode => {\n    console.log(`Departamento ${deptCode}: ${byDepartment[deptCode].length} municipios`);\n  });\n  \n  // Save to JSON for processing\n  fs.writeFileSync('municipal-data.json', JSON.stringify(data, null, 2));\n  console.log('\\n✅ Datos guardados en municipal-data.json');\n  \n} catch (error) {\n  console.error('❌ Error al leer el archivo Excel:', error.message);\n}","size_bytes":1526},"client/src/components/location-map.tsx":{"content":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport L from \"leaflet\";\n\n/* ========================\n   Marcador ciudadano atractivo 🇭🇳\n======================== */\nconst CitizenIcon = L.divIcon({\n  html: `\n    <div style=\"\n      background: linear-gradient(135deg, #ea4640 0%, #ff6b66 100%);\n      width: 36px; height: 36px; border-radius: 50%;\n      border: 3px solid white; box-shadow: 0 4px 12px rgba(234, 70, 64, 0.4);\n      display: flex; align-items: center; justify-content: center;\n      position: relative;\n    \">\n      <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"white\" style=\"\n        filter: drop-shadow(0 1px 2px rgba(0,0,0,0.3));\n      \">\n        <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n      </svg>\n    </div>\n    <div style=\"\n      width: 0; height: 0; \n      border-left: 6px solid transparent; border-right: 6px solid transparent;\n      border-top: 10px solid #ea4640;\n      position: absolute; left: 12px; top: 32px;\n      filter: drop-shadow(0 2px 3px rgba(234, 70, 64, 0.3));\n    \"></div>\n  `,\n  className: \"citizen-marker-icon\",\n  iconSize: [36, 42],\n  iconAnchor: [18, 42],\n  popupAnchor: [0, -42],\n});\n\n/* ========================\n   Tipos y utilidades\n======================== */\ntype LatLngZoom = { lat: number; lng: number; zoom: number };\n\ninterface Props {\n  /** Coordenadas controladas (texto o número). Si existen, se priorizan sobre geocode */\n  latitude?: string | number;\n  longitude?: string | number;\n\n  /** Nombre de la ubicación (para el popup) */\n  locationName?: string;\n\n  /** Geocódigo: \"DD\" (depto) o \"DDMM\" (muni) SIN guiones */\n  geocode?: string;\n\n  /** Callback cuando el usuario hace clic en el mapa */\n  onPick?: (lat: number, lng: number) => void;\n\n  /** Prefijo para inputs ocultos del formulario (p.ej. 'consulta') */\n  hiddenInputsNamePrefix?: string;\n\n \n  height?: number;\n}\n\n/** Centros aproximados de deptos/municipios (agrega los que necesites) */\nconst COORDS: Record<string, { lat: number; lng: number }> = {\n  // Departamentos\n  \"01\": { lat: 15.7795, lng: -86.8458 }, // Atlántida (La Ceiba)\n  \"02\": { lat: 15.9167, lng: -85.9333 }, // Colón (Trujillo)\n  \"03\": { lat: 14.4603, lng: -87.6423 }, // Comayagua\n  \"04\": { lat: 14.7679, lng: -89.1552 }, // Copán\n  \"05\": { lat: 15.5024, lng: -88.0174 }, // Cortés (SPS)\n  \"06\": { lat: 13.3097, lng: -87.1914 }, // Choluteca\n  \"07\": { lat: 14.0311, lng: -86.5775 }, // El Paraíso (Danlí)\n  \"08\": { lat: 14.0723, lng: -87.1921 }, // Fco. Morazán (Tegucigalpa)\n  \"09\": { lat: 15.0097, lng: -84.9639 }, // Gracias a Dios\n  \"10\": { lat: 14.3167, lng: -88.1667 }, // Intibucá (La Esperanza)\n  \"11\": { lat: 16.3097, lng: -86.5419 }, // Islas de la Bahía (Roatán)\n  \"12\": { lat: 14.3167, lng: -87.6833 }, // La Paz\n  \"13\": { lat: 14.5833, lng: -88.6167 }, // Lempira (Gracias)\n  \"14\": { lat: 14.4333, lng: -89.1833 }, // Ocotepeque\n  \"15\": { lat: 14.8667, lng: -86.0833 }, // Olancho (Juticalpa)\n  \"16\": { lat: 14.9167, lng: -88.2167 }, // Santa Bárbara\n  \"17\": { lat: 13.3667, lng: -87.6167 }, // Valle (Nacaome)\n  \"18\": { lat: 15.1333, lng: -87.1333 }, // Yoro\n\n\n  \"0101\": { lat: 15.7795, lng: -86.8458 }, // La Ceiba\n  \"0107\": { lat: 15.7774, lng: -87.4579 }, // Tela\n  \"0318\": { lat: 14.5935, lng: -87.8439 }, // Siguatepeque\n  \"0401\": { lat: 14.7679, lng: -89.1552 }, // Santa Rosa de Copán\n  \"0404\": { lat: 14.8394, lng: -89.1424 }, // Copán Ruinas\n  \"0501\": { lat: 15.5024, lng: -88.0174 }, // San Pedro Sula\n  \"0502\": { lat: 15.6108, lng: -87.9539 }, // Choloma\n  \"0512\": { lat: 15.4308, lng: -87.9027 }, // La Lima\n  \"0703\": { lat: 14.0311, lng: -86.5775 }, // Danlí\n  \"0801\": { lat: 14.0723, lng: -87.1921 }, // Distrito Central\n  \"1101\": { lat: 16.3097, lng: -86.5419 }, // Roatán\n  \"1804\": { lat: 15.4, lng: -87.8167 },     // El Progreso\n};\n\n\nconst HN_DEFAULT: LatLngZoom = { lat: 14.5, lng: -87.0, zoom: 7 };\nfunction Recenter({ lat, lng, zoom }: LatLngZoom) {\n  const map = useMap();\n  useEffect(() => {\n    map.setView([lat, lng], zoom);\n  }, [lat, lng, zoom, map]);\n  return null;\n}\n\nfunction ClickCatcher({ onPick }: { onPick: (lat: number, lng: number) => void }) {\n  useMapEvents({\n    click(e) {\n      onPick(e.latlng.lat, e.latlng.lng);\n    },\n  });\n  return null;\n}\n\n\nexport default function LocationMap({\n  latitude,\n  longitude,\n  locationName,\n  geocode,\n  onPick,\n  hiddenInputsNamePrefix = \"location\",\n  height = 320,\n}: Props) {\n  \n  const [pos, setPos] = useState<LatLngZoom>(HN_DEFAULT);\n\n \n  const controlled = useMemo(() => {\n    const latNum =\n      typeof latitude === \"string\" ? parseFloat(latitude) : typeof latitude === \"number\" ? latitude : undefined;\n    const lngNum =\n      typeof longitude === \"string\" ? parseFloat(longitude) : typeof longitude === \"number\" ? longitude : undefined;\n    if (typeof latNum === \"number\" && !isNaN(latNum) && typeof lngNum === \"number\" && !isNaN(lngNum)) {\n      return { lat: latNum, lng: lngNum } as const;\n    }\n    return null;\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    if (controlled) {\n      setPos({ lat: controlled.lat, lng: controlled.lng, zoom: 15 });\n      return;\n    }\n\n    if (geocode && (geocode.length === 2 || geocode.length === 4)) {\n      const key = geocode;\n      const deptKey = geocode.substring(0, 2);\n      const found = COORDS[key] || COORDS[deptKey];\n      if (found) {\n        setPos({\n          lat: found.lat,\n          lng: found.lng,\n          zoom: geocode.length === 4 ? 11 : 8,\n        });\n        return;\n      }\n    }\n\n    setPos(HN_DEFAULT);\n  }, [controlled, geocode]);\n\n  // Cuando el usuario hace clic en el mapa\n  const handlePick = (lat: number, lng: number) => {\n    setPos({ lat, lng, zoom: 15 });\n    onPick?.(lat, lng);\n  };\n\n  const showMarker = Boolean(geocode || controlled || (pos.lat !== HN_DEFAULT.lat || pos.lng !== HN_DEFAULT.lng));\n\n  return (\n    <div className=\"rounded-xl border p-3\">\n      <h4 className=\"font-semibold mb-2 text-sm\">Ubicación en el Mapa</h4>\n\n      <div style={{ width: \"100%\", height }}>\n        <MapContainer\n          center={[pos.lat, pos.lng]}\n          zoom={pos.zoom}\n          style={{ width: \"100%\", height: \"100%\", borderRadius: 8 }}\n          key={`${pos.lat}-${pos.lng}-${pos.zoom}`} \n        >\n          <Recenter lat={pos.lat} lng={pos.lng} zoom={pos.zoom} />\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n          />\n          <ClickCatcher onPick={handlePick} />\n\n          {showMarker && (\n            <Marker position={[pos.lat, pos.lng]} icon={CitizenIcon}>\n              <Popup>\n                {locationName || \"Ubicación seleccionada\"}\n                {geocode && (\n                  <>\n                    <br />\n                    <small>Geocódigo: {geocode}</small>\n                  </>\n                )}\n                <br />\n                <small>\n                  {pos.lat.toFixed(6)}, {pos.lng.toFixed(6)}\n                </small>\n              </Popup>\n            </Marker>\n          )}\n        </MapContainer>\n      </div>\n\n      <p className=\"mt-2 text-xs text-gray-600\">\n        📍 <b>{(locationName ?? \"Coordenadas\")}</b>{\" \"}\n        <span className=\"text-gray-500\">\n          ({pos.lat.toFixed(6)}, {pos.lng.toFixed(6)})\n        </span>\n        {geocode && <span className=\"ml-2 text-gray-500\">• Geocódigo: {geocode}</span>}\n      </p>\n\n      {/* Inputs ocultos para formularios HTML */}\n      <input type=\"hidden\" name={`${hiddenInputsNamePrefix}_lat`} value={pos.lat} />\n      <input type=\"hidden\" name={`${hiddenInputsNamePrefix}_lng`} value={pos.lng} />\n    </div>\n  );\n}\n","size_bytes":7912},"update-coordinates.js":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { eq } from 'drizzle-orm';\nimport { departments, municipalities } from './shared/schema.ts';\nimport ws from \"ws\";\n\n// Coordenadas exactas de departamentos (cabeceras departamentales)\nconst DEPARTMENT_COORDINATES = {\n  '01': { lat: '15.7795', lng: '-86.8458', name: 'La Ceiba' },          // Atlántida\n  '02': { lat: '15.9167', lng: '-85.9333', name: 'Trujillo' },         // Colón\n  '03': { lat: '14.4603', lng: '-87.6423', name: 'Comayagua' },        // Comayagua\n  '04': { lat: '14.7679', lng: '-89.1552', name: 'Santa Rosa de Copán' }, // Copán\n  '05': { lat: '15.5024', lng: '-88.0174', name: 'San Pedro Sula' },   // Cortés\n  '06': { lat: '13.3097', lng: '-87.1914', name: 'Choluteca' },        // Choluteca\n  '07': { lat: '14.0311', lng: '-86.5775', name: 'Yuscarán' },         // El Paraíso\n  '08': { lat: '14.0723', lng: '-87.1921', name: 'Tegucigalpa' },      // Francisco Morazán\n  '09': { lat: '15.0097', lng: '-84.9639', name: 'Puerto Lempira' },   // Gracias a Dios\n  '10': { lat: '14.3167', lng: '-88.1667', name: 'La Esperanza' },     // Intibucá\n  '11': { lat: '16.3097', lng: '-86.5419', name: 'Roatán' },           // Islas de la Bahía\n  '12': { lat: '14.3167', lng: '-87.6833', name: 'La Paz' },           // La Paz\n  '13': { lat: '14.5833', lng: '-88.6167', name: 'Gracias' },          // Lempira\n  '14': { lat: '14.4333', lng: '-89.1833', name: 'Ocotepeque' },       // Ocotepeque\n  '15': { lat: '14.8667', lng: '-86.0833', name: 'Juticalpa' },        // Olancho\n  '16': { lat: '14.9167', lng: '-88.2167', name: 'Santa Bárbara' },    // Santa Bárbara\n  '17': { lat: '13.3667', lng: '-87.6167', name: 'Nacaome' },          // Valle\n  '18': { lat: '15.1333', lng: '-87.1333', name: 'Yoro' },             // Yoro\n};\n\n// Coordenadas de municipios principales (cabeceras y ciudades importantes)\nconst MUNICIPALITY_COORDINATES = {\n  // Atlántida (01)\n  '01-01': { lat: '15.7795', lng: '-86.8458', name: 'La Ceiba' },\n  '01-07': { lat: '15.7774', lng: '-87.4579', name: 'Tela' },\n  '01-08': { lat: '15.7167', lng: '-87.4333', name: 'Arizona' },\n  '01-02': { lat: '15.8333', lng: '-86.9167', name: 'El Porvenir' },\n  '01-03': { lat: '15.7500', lng: '-86.7500', name: 'Esparta' },\n  '01-04': { lat: '15.8167', lng: '-86.7833', name: 'Jutiapa' },\n  '01-05': { lat: '15.7333', lng: '-86.9333', name: 'La Masica' },\n  '01-06': { lat: '15.7000', lng: '-87.1000', name: 'San Francisco' },\n\n  // Colón (02)\n  '02-01': { lat: '15.9167', lng: '-85.9333', name: 'Trujillo' },\n  '02-02': { lat: '15.9167', lng: '-86.1500', name: 'Balfate' },\n  '02-03': { lat: '15.7833', lng: '-85.2167', name: 'Iriona' },\n  '02-04': { lat: '15.4500', lng: '-85.8167', name: 'Limón' },\n  '02-05': { lat: '15.8500', lng: '-85.7167', name: 'Sabá' },\n  '02-06': { lat: '15.9000', lng: '-85.8000', name: 'Santa Fe' },\n  '02-07': { lat: '15.8167', lng: '-85.6500', name: 'Santa Rosa de Aguán' },\n  '02-08': { lat: '15.6833', lng: '-85.4500', name: 'Sonaguera' },\n  '02-09': { lat: '15.7500', lng: '-85.1333', name: 'Tocoa' },\n  '02-10': { lat: '15.6167', lng: '-85.2833', name: 'Bonito Oriental' },\n\n  // Comayagua (03)\n  '03-01': { lat: '14.4603', lng: '-87.6423', name: 'Comayagua' },\n  '03-18': { lat: '14.5935', lng: '-87.8439', name: 'Siguatepeque' },\n  '03-17': { lat: '14.6000', lng: '-87.4500', name: 'Villa de San Antonio' },\n  '03-02': { lat: '14.2500', lng: '-87.4167', name: 'Ajuterique' },\n  '03-03': { lat: '14.7000', lng: '-87.3167', name: 'El Rosario' },\n  '03-04': { lat: '14.3833', lng: '-87.8833', name: 'Esquías' },\n  '03-05': { lat: '14.6833', lng: '-87.2000', name: 'Humuya' },\n  '03-06': { lat: '14.3000', lng: '-87.9500', name: 'La Libertad' },\n  '03-07': { lat: '14.5500', lng: '-87.3833', name: 'Lamaní' },\n  '03-08': { lat: '14.4167', lng: '-87.3833', name: 'La Trinidad' },\n  '03-09': { lat: '14.5000', lng: '-87.9000', name: 'Lejamaní' },\n  '03-10': { lat: '14.8167', lng: '-87.4833', name: 'Meámbar' },\n  '03-11': { lat: '14.7833', lng: '-87.7333', name: 'Minas de Oro' },\n  '03-12': { lat: '14.7167', lng: '-87.9167', name: 'Ojos de Agua' },\n  '03-13': { lat: '14.8833', lng: '-87.6167', name: 'San Jerónimo' },\n  '03-14': { lat: '14.3500', lng: '-87.5500', name: 'San José de Comayagua' },\n  '03-15': { lat: '14.6167', lng: '-87.7000', name: 'San José del Potrero' },\n  '03-16': { lat: '14.5167', lng: '-87.5167', name: 'San Luis' },\n  '03-19': { lat: '14.2833', lng: '-87.6167', name: 'Taulabé' },\n  '03-20': { lat: '14.7333', lng: '-87.3833', name: 'Las Lajas' },\n  '03-21': { lat: '14.2833', lng: '-87.6167', name: 'Taulabé' },\n\n  // Copán (04)\n  '04-01': { lat: '14.7679', lng: '-89.1552', name: 'Santa Rosa de Copán' },\n  '04-04': { lat: '14.8394', lng: '-89.1424', name: 'Copán Ruinas' },\n  '04-02': { lat: '14.6500', lng: '-89.2167', name: 'Cabañas' },\n  '04-03': { lat: '14.9167', lng: '-89.0833', name: 'Concepción' },\n  '04-05': { lat: '14.8833', lng: '-89.3000', name: 'Corquín' },\n  '04-06': { lat: '14.5833', lng: '-88.9667', name: 'Cucuyagua' },\n  '04-07': { lat: '14.6333', lng: '-89.3500', name: 'Dolores' },\n  '04-08': { lat: '14.5000', lng: '-89.1167', name: 'Dulce Nombre' },\n  '04-09': { lat: '14.5167', lng: '-89.0333', name: 'El Paraíso' },\n  '04-10': { lat: '14.7000', lng: '-88.9833', name: 'Florida' },\n  '04-11': { lat: '14.8500', lng: '-89.2167', name: 'La Jigua' },\n  '04-12': { lat: '14.6833', lng: '-89.0167', name: 'La Unión' },\n  '04-13': { lat: '14.9333', lng: '-89.1500', name: 'Nueva Arcadia' },\n  '04-14': { lat: '14.4667', lng: '-89.0000', name: 'San Agustín' },\n  '04-15': { lat: '14.5833', lng: '-89.0833', name: 'San Antonio' },\n  '04-16': { lat: '14.8167', lng: '-88.9500', name: 'San Jerónimo' },\n  '04-17': { lat: '14.7167', lng: '-89.0500', name: 'San José' },\n  '04-18': { lat: '14.5500', lng: '-89.2000', name: 'San Juan de Opoa' },\n  '04-19': { lat: '14.4333', lng: '-89.0667', name: 'San Nicolás' },\n  '04-20': { lat: '14.9000', lng: '-89.2500', name: 'San Pedro' },\n  '04-21': { lat: '14.6167', lng: '-89.0667', name: 'Santa Rita' },\n  '04-22': { lat: '14.8000', lng: '-89.3167', name: 'Trinidad de Copán' },\n  '04-23': { lat: '14.4500', lng: '-89.1833', name: 'Veracruz' },\n\n  // Cortés (05)\n  '05-01': { lat: '15.5024', lng: '-88.0174', name: 'San Pedro Sula' },\n  '05-02': { lat: '15.6108', lng: '-87.9539', name: 'Choloma' },\n  '05-12': { lat: '15.4308', lng: '-87.9027', name: 'La Lima' },\n  '05-03': { lat: '15.6000', lng: '-88.1833', name: 'La Entrada' },\n  '05-04': { lat: '15.4167', lng: '-88.1167', name: 'Omoa' },\n  '05-05': { lat: '15.5500', lng: '-88.2000', name: 'Pimienta' },\n  '05-06': { lat: '15.6833', lng: '-88.0500', name: 'Potrerillos' },\n  '05-07': { lat: '15.4833', lng: '-88.0500', name: 'Puerto Cortés' },\n  '05-08': { lat: '15.5333', lng: '-88.1500', name: 'San Antonio de Cortés' },\n  '05-09': { lat: '15.5667', lng: '-88.0833', name: 'San Francisco de Yojoa' },\n  '05-10': { lat: '15.5167', lng: '-88.1333', name: 'San Manuel' },\n  '05-11': { lat: '15.4500', lng: '-88.0167', name: 'Santa Cruz de Yojoa' },\n  '05-13': { lat: '15.5833', lng: '-88.1167', name: 'Villanueva' },\n\n  // Choluteca (06)\n  '06-01': { lat: '13.3097', lng: '-87.1914', name: 'Choluteca' },\n  '06-02': { lat: '13.2000', lng: '-87.0833', name: 'Apacilagua' },\n  '06-03': { lat: '13.4333', lng: '-87.0500', name: 'Concepción de María' },\n  '06-04': { lat: '13.4000', lng: '-87.3167', name: 'Duyure' },\n  '06-05': { lat: '13.2833', lng: '-87.3500', name: 'El Corpus' },\n  '06-06': { lat: '13.1167', lng: '-87.3833', name: 'El Triunfo' },\n  '06-07': { lat: '13.3500', lng: '-87.2833', name: 'Marcovia' },\n  '06-08': { lat: '13.1667', lng: '-87.2833', name: 'Morolica' },\n  '06-09': { lat: '13.2167', lng: '-87.1500', name: 'Namasigüe' },\n  '06-10': { lat: '13.1500', lng: '-87.4500', name: 'Orocuina' },\n  '06-11': { lat: '13.2500', lng: '-87.2500', name: 'Pespire' },\n  '06-12': { lat: '13.4167', lng: '-87.1167', name: 'San Antonio de Flores' },\n  '06-13': { lat: '13.0833', lng: '-87.2333', name: 'San Isidro' },\n  '06-14': { lat: '13.2333', lng: '-87.0167', name: 'San José' },\n  '06-15': { lat: '13.3833', lng: '-87.1333', name: 'San Marcos de Colón' },\n  '06-16': { lat: '13.1333', lng: '-87.1167', name: 'Santa Ana de Yusguare' },\n\n  // El Paraíso (07)\n  '07-03': { lat: '14.0311', lng: '-86.5775', name: 'Danlí' },\n  '07-01': { lat: '13.9833', lng: '-86.4167', name: 'Alauca' },\n  '07-02': { lat: '14.0167', lng: '-86.3333', name: 'Danlí' },\n  '07-04': { lat: '13.7833', lng: '-86.5833', name: 'El Paraíso' },\n  '07-05': { lat: '13.9667', lng: '-86.6833', name: 'Güinope' },\n  '07-06': { lat: '14.0833', lng: '-86.7000', name: 'Jacaleapa' },\n  '07-07': { lat: '13.8500', lng: '-86.6167', name: 'Liure' },\n  '07-08': { lat: '13.8000', lng: '-86.7000', name: 'Morocelí' },\n  '07-09': { lat: '13.9167', lng: '-86.7500', name: 'Oropolí' },\n  '07-10': { lat: '13.8167', lng: '-86.5167', name: 'Potrerillos' },\n  '07-11': { lat: '13.9500', lng: '-86.5167', name: 'San Antonio de Flores' },\n  '07-12': { lat: '13.8833', lng: '-86.4833', name: 'San Lucas' },\n  '07-13': { lat: '13.7167', lng: '-86.6000', name: 'San Matías' },\n  '07-14': { lat: '13.9333', lng: '-86.6167', name: 'Soledad' },\n  '07-15': { lat: '13.7500', lng: '-86.4500', name: 'Teupasenti' },\n  '07-16': { lat: '13.8667', lng: '-86.5500', name: 'Texiguat' },\n  '07-17': { lat: '13.7000', lng: '-86.5167', name: 'Vado Ancho' },\n  '07-18': { lat: '13.9000', lng: '-86.8000', name: 'Yauyupe' },\n  '07-19': { lat: '14.0000', lng: '-86.8167', name: 'Yuscarán' },\n\n  // Francisco Morazán (08)\n  '08-01': { lat: '14.0723', lng: '-87.1921', name: 'Distrito Central' },\n  '08-02': { lat: '14.3167', lng: '-87.0500', name: 'Alubarén' },\n  '08-03': { lat: '14.2000', lng: '-86.9000', name: 'Cedros' },\n  '08-04': { lat: '14.4333', lng: '-87.1833', name: 'Curarén' },\n  '08-05': { lat: '14.2833', lng: '-87.0167', name: 'El Porvenir' },\n  '08-06': { lat: '14.4000', lng: '-87.0667', name: 'Guaimaca' },\n  '08-07': { lat: '14.1167', lng: '-86.9833', name: 'La Libertad' },\n  '08-08': { lat: '14.3500', lng: '-87.1167', name: 'La Venta' },\n  '08-09': { lat: '14.1833', lng: '-87.0667', name: 'Lepaterique' },\n  '08-10': { lat: '14.3833', lng: '-86.9833', name: 'Maraita' },\n  '08-11': { lat: '14.1500', lng: '-86.8833', name: 'Marale' },\n  '08-12': { lat: '14.4167', lng: '-87.0167', name: 'Nueva Armenia' },\n  '08-13': { lat: '14.2167', lng: '-87.1167', name: 'Ojojona' },\n  '08-14': { lat: '14.3000', lng: '-87.2167', name: 'Orica' },\n  '08-15': { lat: '14.2500', lng: '-87.1833', name: 'Reitoca' },\n  '08-16': { lat: '14.1333', lng: '-87.1333', name: 'Sabanagrande' },\n  '08-17': { lat: '14.3667', lng: '-86.8833', name: 'San Antonio de Oriente' },\n  '08-18': { lat: '14.1000', lng: '-86.9167', name: 'San Buenaventura' },\n  '08-19': { lat: '14.1667', lng: '-87.0167', name: 'San Ignacio' },\n  '08-20': { lat: '14.2333', lng: '-86.9667', name: 'San Juan de Flores' },\n  '08-21': { lat: '14.4500', lng: '-86.9167', name: 'San Miguelito' },\n  '08-22': { lat: '14.1833', lng: '-86.9167', name: 'Santa Ana' },\n  '08-23': { lat: '14.3833', lng: '-87.2000', name: 'Santa Lucía' },\n  '08-24': { lat: '14.4667', lng: '-87.1000', name: 'Talanga' },\n  '08-25': { lat: '14.2667', lng: '-86.9333', name: 'Tatumbla' },\n  '08-26': { lat: '14.1167', lng: '-87.0500', name: 'Valle de Ángeles' },\n  '08-27': { lat: '14.3333', lng: '-86.9500', name: 'Villa de San Francisco' },\n  '08-28': { lat: '14.2833', lng: '-87.1500', name: 'Vallecillo' },\n\n  // Gracias a Dios (09) \n  '09-01': { lat: '15.0097', lng: '-84.9639', name: 'Puerto Lempira' },\n  '09-02': { lat: '15.1833', lng: '-84.2833', name: 'Brus Laguna' },\n  '09-03': { lat: '14.8167', lng: '-84.3167', name: 'Ahuas' },\n  '09-04': { lat: '15.0333', lng: '-84.6000', name: 'Juan Francisco Bulnes' },\n  '09-05': { lat: '15.2833', lng: '-84.6833', name: 'Ramón Villeda Morales' },\n  '09-06': { lat: '14.9833', lng: '-84.1833', name: 'Wampusirpi' },\n\n  // Intibucá (10)\n  '10-01': { lat: '14.3167', lng: '-88.1667', name: 'La Esperanza' },\n  '10-02': { lat: '14.4667', lng: '-88.0833', name: 'Camasca' },\n  '10-03': { lat: '14.2833', lng: '-88.0500', name: 'Colomoncagua' },\n  '10-04': { lat: '14.2000', lng: '-88.1000', name: 'Concepción' },\n  '10-05': { lat: '14.3500', lng: '-88.0333', name: 'Dolores' },\n  '10-06': { lat: '14.4000', lng: '-88.1167', name: 'Intibucá' },\n  '10-07': { lat: '14.3333', lng: '-88.2167', name: 'Jesús de Otoro' },\n  '10-08': { lat: '14.4833', lng: '-88.1500', name: 'Magdalena' },\n  '10-09': { lat: '14.1667', lng: '-88.0833', name: 'Masaguara' },\n  '10-10': { lat: '14.2667', lng: '-88.1833', name: 'San Antonio' },\n  '10-11': { lat: '14.1833', lng: '-88.1167', name: 'San Isidro' },\n  '10-12': { lat: '14.3833', lng: '-88.2500', name: 'San Juan' },\n  '10-13': { lat: '14.2500', lng: '-88.0333', name: 'San Marcos de la Sierra' },\n  '10-14': { lat: '14.1833', lng: '-88.2000', name: 'San Miguelito' },\n  '10-15': { lat: '14.1500', lng: '-88.1333', name: 'Santa Lucía' },\n  '10-16': { lat: '14.4500', lng: '-88.2000', name: 'Yamaranguila' },\n  '10-17': { lat: '14.2167', lng: '-88.2167', name: 'San Francisco de Opalaca' },\n\n  // Islas de la Bahía (11)\n  '11-01': { lat: '16.3097', lng: '-86.5419', name: 'Roatán' },\n  '11-02': { lat: '16.3833', lng: '-86.9167', name: 'Guanaja' },\n  '11-03': { lat: '16.1667', lng: '-86.6167', name: 'José Santos Guardiola' },\n  '11-04': { lat: '16.4833', lng: '-86.8667', name: 'Utila' },\n\n  // La Paz (12)\n  '12-01': { lat: '14.3167', lng: '-87.6833', name: 'La Paz' },\n  '12-02': { lat: '14.2333', lng: '-87.6167', name: 'Aguantequerique' },\n  '12-03': { lat: '14.1667', lng: '-87.6333', name: 'Cabañas' },\n  '12-04': { lat: '14.2667', lng: '-87.5833', name: 'Cane' },\n  '12-05': { lat: '14.4333', lng: '-87.6500', name: 'Chinacla' },\n  '12-06': { lat: '14.4000', lng: '-87.5833', name: 'Guajiquiro' },\n  '12-07': { lat: '14.1833', lng: '-87.7167', name: 'Lauterique' },\n  '12-08': { lat: '14.3833', lng: '-87.5500', name: 'Marcala' },\n  '12-09': { lat: '14.2833', lng: '-87.7000', name: 'Mercedes de Oriente' },\n  '12-10': { lat: '14.1333', lng: '-87.5667', name: 'Opatoro' },\n  '12-11': { lat: '14.2000', lng: '-87.5333', name: 'San Antonio del Norte' },\n  '12-12': { lat: '14.3500', lng: '-87.6167', name: 'San José' },\n  '12-13': { lat: '14.4167', lng: '-87.7000', name: 'San Juan' },\n  '12-14': { lat: '14.2500', lng: '-87.5167', name: 'San Pedro de Tutule' },\n  '12-15': { lat: '14.1167', lng: '-87.6833', name: 'Santa Ana' },\n  '12-16': { lat: '14.3667', lng: '-87.7333', name: 'Santa Elena' },\n  '12-17': { lat: '14.2167', lng: '-87.7500', name: 'Santa María' },\n  '12-18': { lat: '14.4500', lng: '-87.5833', name: 'Santiago de Puringla' },\n  '12-19': { lat: '14.1500', lng: '-87.7333', name: 'Yarula' },\n\n  // Lempira (13)\n  '13-01': { lat: '14.5833', lng: '-88.6167', name: 'Gracias' },\n  '13-02': { lat: '14.4833', lng: '-88.4833', name: 'Belén' },\n  '13-03': { lat: '14.3667', lng: '-88.4167', name: 'Candelaria' },\n  '13-04': { lat: '14.6167', lng: '-88.5833', name: 'Cololaca' },\n  '13-05': { lat: '14.5000', lng: '-88.5167', name: 'Erandique' },\n  '13-06': { lat: '14.6833', lng: '-88.4500', name: 'Gualcince' },\n  '13-07': { lat: '14.4167', lng: '-88.5500', name: 'Guarita' },\n  '13-08': { lat: '14.7167', lng: '-88.5833', name: 'La Campa' },\n  '13-09': { lat: '14.6500', lng: '-88.7000', name: 'La Iguala' },\n  '13-10': { lat: '14.5167', lng: '-88.7167', name: 'Las Flores' },\n  '13-11': { lat: '14.6333', lng: '-88.4833', name: 'Lepaera' },\n  '13-12': { lat: '14.4500', lng: '-88.6167', name: 'Mapulaca' },\n  '13-13': { lat: '14.5500', lng: '-88.4500', name: 'Piraera' },\n  '13-14': { lat: '14.7000', lng: '-88.6500', name: 'San Andrés' },\n  '13-15': { lat: '14.3833', lng: '-88.4833', name: 'San Francisco' },\n  '13-16': { lat: '14.4333', lng: '-88.4333', name: 'San Juan Guarita' },\n  '13-17': { lat: '14.3500', lng: '-88.5167', name: 'San Manuel Colohete' },\n  '13-18': { lat: '14.6167', lng: '-88.6333', name: 'San Rafael' },\n  '13-19': { lat: '14.3333', lng: '-88.4667', name: 'San Sebastián' },\n  '13-20': { lat: '14.7500', lng: '-88.6167', name: 'Santa Cruz' },\n  '13-21': { lat: '14.5667', lng: '-88.7333', name: 'Talgua' },\n  '13-22': { lat: '14.4667', lng: '-88.6833', name: 'Tambla' },\n  '13-23': { lat: '14.3167', lng: '-88.5833', name: 'Tomalá' },\n  '13-24': { lat: '14.6667', lng: '-88.5167', name: 'Valladolid' },\n  '13-25': { lat: '14.5833', lng: '-88.5500', name: 'Virginia' },\n  '13-26': { lat: '14.6000', lng: '-88.4167', name: 'San Marcos de Caiquín' },\n  '13-27': { lat: '14.7333', lng: '-88.5500', name: 'La Virtud' },\n  '13-28': { lat: '14.4000', lng: '-88.6500', name: 'La Unión' },\n\n  // Ocotepeque (14)\n  '14-01': { lat: '14.4333', lng: '-89.1833', name: 'Ocotepeque' },\n  '14-02': { lat: '14.3833', lng: '-89.2333', name: 'Belén Gualcho' },\n  '14-03': { lat: '14.3167', lng: '-89.1500', name: 'Concepción' },\n  '14-04': { lat: '14.5167', lng: '-89.2167', name: 'Dolores Merendón' },\n  '14-05': { lat: '14.4667', lng: '-89.2333', name: 'Fraternidad' },\n  '14-06': { lat: '14.3667', lng: '-89.1167', name: 'La Encarnación' },\n  '14-07': { lat: '14.2833', lng: '-89.2000', name: 'La Labor' },\n  '14-08': { lat: '14.4000', lng: '-89.1333', name: 'Lucerna' },\n  '14-09': { lat: '14.3500', lng: '-89.2167', name: 'Mercedes' },\n  '14-10': { lat: '14.5000', lng: '-89.1500', name: 'San Fernando' },\n  '14-11': { lat: '14.2667', lng: '-89.1333', name: 'San Francisco del Valle' },\n  '14-12': { lat: '14.3000', lng: '-89.1167', name: 'San Jorge' },\n  '14-13': { lat: '14.5333', lng: '-89.1667', name: 'San Marcos' },\n  '14-14': { lat: '14.2500', lng: '-89.1667', name: 'Santa Fe' },\n  '14-15': { lat: '14.4833', lng: '-89.1333', name: 'Sensenti' },\n  '14-16': { lat: '14.3333', lng: '-89.0833', name: 'Sinuapa' },\n\n  // Olancho (15)\n  '15-01': { lat: '14.8667', lng: '-86.0833', name: 'Juticalpa' },\n  '15-02': { lat: '14.9333', lng: '-85.9167', name: 'Catacamas' },\n  '15-03': { lat: '14.6333', lng: '-85.4833', name: 'Dulce Nombre de Culmí' },\n  '15-04': { lat: '14.9167', lng: '-85.5167', name: 'El Rosario' },\n  '15-05': { lat: '14.7833', lng: '-85.9833', name: 'Esquipulas del Norte' },\n  '15-06': { lat: '14.7167', lng: '-85.8500', name: 'Gualaco' },\n  '15-07': { lat: '14.8333', lng: '-85.7167', name: 'Guarizama' },\n  '15-08': { lat: '14.9833', lng: '-85.8333', name: 'Guata' },\n  '15-09': { lat: '14.8000', lng: '-85.6833', name: 'Guayape' },\n  '15-10': { lat: '14.6167', lng: '-85.6167', name: 'Jano' },\n  '15-11': { lat: '14.7500', lng: '-85.7333', name: 'La Unión' },\n  '15-12': { lat: '14.6833', lng: '-85.7667', name: 'Mangulile' },\n  '15-13': { lat: '14.5833', lng: '-85.5833', name: 'Manto' },\n  '15-14': { lat: '14.8167', lng: '-85.5500', name: 'Salamá' },\n  '15-15': { lat: '14.6000', lng: '-85.8167', name: 'San Esteban' },\n  '15-16': { lat: '14.7000', lng: '-85.6333', name: 'San Francisco de Becerra' },\n  '15-17': { lat: '14.5667', lng: '-85.7000', name: 'San Francisco de la Paz' },\n  '15-18': { lat: '14.6667', lng: '-85.5167', name: 'Santa María del Real' },\n  '15-19': { lat: '14.8500', lng: '-85.8667', name: 'Silca' },\n  '15-20': { lat: '14.9500', lng: '-85.7000', name: 'Yocón' },\n  '15-21': { lat: '14.7333', lng: '-85.5667', name: 'Patuca' },\n  '15-22': { lat: '14.8833', lng: '-85.6333', name: 'San José del Potrero' },\n  '15-23': { lat: '14.5500', lng: '-85.6500', name: 'Mezapa' },\n\n  // Santa Bárbara (16)\n  '16-01': { lat: '14.9167', lng: '-88.2167', name: 'Santa Bárbara' },\n  '16-02': { lat: '15.0167', lng: '-88.1333', name: 'Arada' },\n  '16-03': { lat: '14.8167', lng: '-88.3333', name: 'Atima' },\n  '16-04': { lat: '14.9833', lng: '-88.3167', name: 'Azacualpa' },\n  '16-05': { lat: '14.8833', lng: '-88.1833', name: 'Ceguaca' },\n  '16-06': { lat: '14.8500', lng: '-88.2833', name: 'Concepción del Norte' },\n  '16-07': { lat: '14.8000', lng: '-88.2167', name: 'Concepción del Sur' },\n  '16-08': { lat: '15.0500', lng: '-88.2000', name: 'Chinda' },\n  '16-09': { lat: '14.9500', lng: '-88.2833', name: 'El Níspero' },\n  '16-10': { lat: '14.7833', lng: '-88.3167', name: 'Gualala' },\n  '16-11': { lat: '15.0333', lng: '-88.1667', name: 'Ilama' },\n  '16-12': { lat: '14.8667', lng: '-88.2500', name: 'Las Vegas' },\n  '16-13': { lat: '14.7667', lng: '-88.2333', name: 'Macuelizo' },\n  '16-14': { lat: '14.7500', lng: '-88.2833', name: 'Naranjito' },\n  '16-15': { lat: '14.9667', lng: '-88.1833', name: 'Nuevo Celilac' },\n  '16-16': { lat: '15.0000', lng: '-88.2500', name: 'Petoa' },\n  '16-17': { lat: '14.9000', lng: '-88.3000', name: 'Protección' },\n  '16-18': { lat: '15.0167', lng: '-88.2333', name: 'Quimistán' },\n  '16-19': { lat: '14.8333', lng: '-88.3667', name: 'San Francisco de Ojuera' },\n  '16-20': { lat: '14.8000', lng: '-88.1500', name: 'San José de Colinas' },\n  '16-21': { lat: '14.7167', lng: '-88.1833', name: 'San Luis' },\n  '16-22': { lat: '14.7333', lng: '-88.3500', name: 'San Marcos' },\n  '16-23': { lat: '14.9333', lng: '-88.1167', name: 'San Nicolás' },\n  '16-24': { lat: '14.7000', lng: '-88.2500', name: 'San Pedro Zacapa' },\n  '16-25': { lat: '14.8667', lng: '-88.3833', name: 'San Vicente Centenario' },\n  '16-26': { lat: '14.9833', lng: '-88.2667', name: 'Santa Rita' },\n  '16-27': { lat: '14.8500', lng: '-88.1667', name: 'Trinidad' },\n  '16-28': { lat: '14.7833', lng: '-88.1667', name: 'Colinas' },\n\n  // Valle (17)\n  '17-01': { lat: '13.3667', lng: '-87.6167', name: 'Nacaome' },\n  '17-02': { lat: '13.4167', lng: '-87.5333', name: 'Alianza' },\n  '17-03': { lat: '13.3167', lng: '-87.7333', name: 'Amapala' },\n  '17-04': { lat: '13.4333', lng: '-87.6000', name: 'Aramecina' },\n  '17-05': { lat: '13.4000', lng: '-87.7000', name: 'Caridad' },\n  '17-06': { lat: '13.3333', lng: '-87.5167', name: 'Goascorán' },\n  '17-07': { lat: '13.4500', lng: '-87.5167', name: 'Langue' },\n  '17-08': { lat: '13.3833', lng: '-87.5833', name: 'San Francisco de Coray' },\n  '17-09': { lat: '13.4667', lng: '-87.6500', name: 'San Lorenzo' },\n\n  // Yoro (18)\n  '18-01': { lat: '15.1333', lng: '-87.1333', name: 'Yoro' },\n  '18-02': { lat: '15.2833', lng: '-87.3500', name: 'Arenal' },\n  '18-03': { lat: '15.2167', lng: '-87.2167', name: 'El Negrito' },\n  '18-04': { lat: '15.4000', lng: '-87.8167', name: 'El Progreso' },\n  '18-05': { lat: '15.1667', lng: '-87.0833', name: 'Jocón' },\n  '18-06': { lat: '15.3333', lng: '-87.6000', name: 'Morazán' },\n  '18-07': { lat: '15.2000', lng: '-87.3333', name: 'Olanchito' },\n  '18-08': { lat: '15.1167', lng: '-87.2833', name: 'Santa Rita' },\n  '18-09': { lat: '15.0833', lng: '-87.2000', name: 'Sulaco' },\n  '18-10': { lat: '15.3167', lng: '-87.4500', name: 'Victoria' },\n  '18-11': { lat: '15.2500', lng: '-87.1500', name: 'Yorito' },\n\n  // Más municipios se pueden agregar aquí...\n  // Para este script inicial, agregamos las principales cabeceras\n};\n\n// Database connection\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set. Did you forget to provision a database?\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nconst db = drizzle({ client: pool });\n\nconsole.log('🗺️  Actualizando coordenadas de departamentos y municipios...\\n');\n\nasync function updateDepartmentCoordinates() {\n  console.log('📍 Actualizando coordenadas de departamentos...');\n  \n  for (const [deptId, coords] of Object.entries(DEPARTMENT_COORDINATES)) {\n    try {\n      await db.update(departments)\n        .set({\n          latitude: coords.lat,\n          longitude: coords.lng\n        })\n        .where(eq(departments.id, deptId));\n      \n      console.log(`✅ Departamento ${deptId}: ${coords.name} (${coords.lat}, ${coords.lng})`);\n    } catch (error) {\n      console.error(`❌ Error updating department ${deptId}:`, error.message);\n    }\n  }\n  \n  console.log('\\n');\n}\n\nasync function updateMunicipalityCoordinates() {\n  console.log('🏘️  Actualizando coordenadas de municipios...');\n  \n  for (const [muniCode, coords] of Object.entries(MUNICIPALITY_COORDINATES)) {\n    try {\n      // Convertir \"01-08\" a departamento \"01\" y municipio \"08\"\n      const [deptId, muniId] = muniCode.split('-');\n      \n      // Actualizar usando el ID completo del municipio \"01-08\"\n      const updateResult = await db.update(municipalities)\n        .set({\n          latitude: coords.lat,\n          longitude: coords.lng\n        })\n        .where(eq(municipalities.id, muniCode));\n      \n      console.log(`✅ Municipio ${muniCode}: ${coords.name} (${coords.lat}, ${coords.lng})`);\n    } catch (error) {\n      console.error(`❌ Error updating municipality ${muniCode}:`, error.message);\n    }\n  }\n  \n  console.log('\\n');\n}\n\nasync function main() {\n  try {\n    await updateDepartmentCoordinates();\n    await updateMunicipalityCoordinates();\n    \n    console.log('🎉 Coordenadas actualizadas exitosamente!');\n    console.log(`📊 Departamentos actualizados: ${Object.keys(DEPARTMENT_COORDINATES).length}`);\n    console.log(`🏘️  Municipios actualizados: ${Object.keys(MUNICIPALITY_COORDINATES).length}`);\n    \n  } catch (error) {\n    console.error('❌ Error durante la actualización:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nmain();","size_bytes":25388}},"version":1}